language: php
os: linux
dist: bionic
group: edge
env:
  global:
    - DEFAULT_COMPOSER_FLAGS="--no-interaction --no-ansi --no-progress --no-suggest"
    - PGUSER=postgres
    - PGPORT=5432
branches:
  only:
    - master
    - develop
services:
  - mysql
jobs:
  fast_finish: true
  include:
    - php: 7.4
      env: DB=mysql
    - php: 7.3
      env: DB=mysql
    - php: 7.2
      env: DB=mysql
    - php: 7.1
      env: DB=mysql
    - php: 7.4
      env: DB=pgsql
    - php: 7.3
      env: DB=pgsql
    - php: 7.2
      env: DB=pgsql
    - php: 7.1
      env: DB=pgsql
cache:
  directories:
    - "$HOME/.composer/cache"
    - "$HOME/.npm"
addons:
  postgresql: "12"
  apt:
    packages:
      - postgresql-12
      - postgresql-client-12
install:
  - |
    if [[ $TASK_TESTS_COVERAGE != 1 ]]; then
      # Disable Xdebug for performance when code coverage is not needed.
      phpenv config-rm xdebug.ini || echo "xdebug is not installed"
    fi

    # Install composer dependencies.
    export PATH="$HOME/.composer/vendor/bin:$PATH"
    composer validate
    travis_retry composer install $DEFAULT_COMPOSER_FLAGS
before_script:
  - |
    # Display version and environment information.
    php --version
    composer --version
    php -r "echo INTL_ICU_VERSION . \"\n\";"
    php -r "echo INTL_ICU_DATA_VERSION . \"\n\";"
  - |
    # Prep databases.
    if [[ "$DB" == "mysql" ]]; then
      mysql --version
      sudo mysql_upgrade || echo "MySQL is already up to date"
      travis_retry mysql -e 'CREATE DATABASE `test`;';
      mysql -e "SET GLOBAL sql_mode = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';";
    elif [[ "$DB" == "pgsql" ]]; then
      pg_ctlcluster 12 main start
      psql --version
      psql -U postgres -c 'CREATE DATABASE "test";';
    fi
  - pear config-set preferred_state beta
  - pecl channel-update pecl.php.net
  - yes | pecl install imagick
  - cp .travis/.env.example.$DB tests/.env
script:
  - |
    if [[ $TASK_TESTS_COVERAGE != 1 ]]; then
      vendor/bin/codecept run unit
      vendor/bin/codecept run functional
    else
      mkdir -p build/logs
      vendor/bin/codecept run unit --coverage-xml coverage-unit.xml;
      vendor/bin/codecept run functional --coverage-xml coverage-functional.xml;
    fi
after_script:
  - |
    if [ $TASK_TESTS_COVERAGE == 1 ]; then
      bash <(curl -s https://codecov.io/bash)
    fi
notifications:
  email:
    recipients:
      - matt@workingconcept.com
