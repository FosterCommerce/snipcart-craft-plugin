{% requireAdmin %}

{% set crumbs = [
    { label: "Settings"|t('app'), url: url('settings') },
    { label: "Plugins"|t('app'), url: url('settings/plugins') }
] %}

{% extends "_layouts/cp" %}
{% import "_includes/forms" as forms %}

{% set title = "Snipcart Plugin Settings"|t %}
{% set fullPageForm = true %}


{#

TODO: note use of static config here!

#}

{% from _self import configWarning %}

{% set tabs = {
    account:  { label: "Snipcart Account"|t, url: '#account' },
    products: { label: "Products"|t, url: '#products' },
    orders: { label: "Orders"|t, url: '#orders' },
    webhooks: { label: "Webhooks"|t, url: '#webhooks' },
    logging:  { label: "Logging & Caching"|t, url: '#logging' },
    shipping: { label: "Shipping"|t, url: '#shipping' },
} %}

{#
{% include "_includes/tabs" with { tabs: tabs } %}
#}

{% set staticConfig = craft.app.config.getConfigFromFile('snipcart') %}

{% block content %}

    {% if staticConfig is not empty %}
        <div style="color: #8f98a3; display: block; background: #F2F5F8; padding: 0.75rem 1rem; margin-bottom: 1rem;">
            {{ '<span class="warn"></span> Config values in `snipcart.php` will override any settings you change here!' | markdown }}
        </div>
    {% endif %}

    <input type="hidden" name="action" value="plugins/save-plugin-settings">
    <input type="hidden" name="pluginHandle" value="snipcart">
    {{ redirectInput('settings') }}

    <div class="form-wrap">

        <div id="account" class="">
            {{ forms.textField({
                first: true,
                label: 'Snipcart Public API Key'|t,
                class: 'code',
                id: 'publicApiKey',
                required: true,
                name: 'publicApiKey',
                value: settings.publicApiKey,
                autofocus: true,
                errors: settings.getErrors('publicApiKey'),
                instructions: "Add your public Snipcart API key. You can find this on your account page in Snipcart."
            }) }}

            {{ forms.textField({
                label: 'Snipcart Secret API Key'|t,
                id: 'secretApiKey',
                class: 'code',
                required: true,
                name: 'secretApiKey',
                value: settings.secretApiKey,
                autofocus: true,
                errors: settings.getErrors('secretApiKey'),
                instructions: "Add your secret Snipcart API key. You can find this on your account page in Snipcart."
            }) }}

            {{ forms.selectField({
                label: 'Currency'|t,
                id: 'currency',
                required: true,
                name: 'currency',
                options: settings.getCurrencyOptions,
                value: settings.defaultCurrency ?? null,
                placeholder: 'id',
                errors: settings.getErrors('productIdentifier'),
                instructions: "Specify your store's currency."
            }) }}
        </div>

        <div id="products" class="hidden">
            {#

            TODO: carefully explain setup options here

            1. get a quick start with the built-in Product Details field
            2. designate fields to be used for product properties
            3. set up products however you want and manually create your own handlers

            #}
            {{ forms.lightswitchField({
                label: 'Use Custom Product Fields'|t,
                id: 'useCustomProductFields',
                required: false,
                name: 'useCustomProductFields',
                on: settings.useCustomProductFields,
                value: true,
                placeholder: 'useCustomProductFields',
                errors: settings.getErrors('useCustomProductFields'),
                instructions: "Switch on if you want to designate your own fields for product details."
            }) }}

            <div id="custom-product-fields" class="hidden">
                {{ forms.selectField({
                    label: 'Product Identifier/SKU'|t,
                    id: 'productIdentifier',
                    required: true,
                    name: 'productIdentifier',
                    options: settings.getFieldOptionsForProduct('productIdentifier'),
                    value: settings.productIdentifier,
                    placeholder: 'id',
                    errors: settings.getErrors('productIdentifier'),
                    instructions: "Designate a property that will **uniquely** reference each Snipcart product. Populates `data-item-id`, used for identifying items and optionally reducing quantities."
                }) }}

                {{ forms.selectField({
                    label: 'Price Field'|t,
                    id: 'productPriceField',
                    required: true,
                    name: 'productPriceField',
                    options: settings.getFieldOptionsForProduct('productPriceField'),
                    value: settings.productPriceField,
                    placeholder: 'productPrice',
                    errors: settings.getErrors('productPriceField'),
                    instructions: ""
                }) }}

                {# TODO: require if shippable field selected #}
                {{ forms.selectField({
                    label: 'Weight Field'|t,
                    id: 'productWeightField',
                    required: false,
                    name: 'productWeightField',
                    options: settings.getFieldOptionsForProduct('productWeightField'),
                    value: settings.productWeightField,
                    placeholder: 'productWeight',
                    errors: settings.getErrors('productWeightField'),
                    instructions: ""
                }) }}

                {# TODO: require if shippable field selected #}
                {# TODO: allow explicit selection here #}
                {{ forms.selectField({
                    label: 'Weight Unit Field'|t,
                    id: 'productWeightUnitField',
                    required: false,
                    name: 'productWeightUnitField',
                    options: settings.getFieldOptionsForProduct('productWeightUnitField'),
                    value: settings.productWeightUnitField,
                    placeholder: 'productWeightUnit',
                    errors: settings.getErrors('productWeightUnitField'),
                    instructions: ""
                }) }}

                {# TODO: require if shippable field selected #}
                {{ forms.selectField({
                    label: 'Length Field'|t,
                    id: 'productLengthField',
                    required: false,
                    name: 'productLengthField',
                    options: settings.getFieldOptionsForProduct('productLengthField'),
                    value: settings.productLengthField,
                    placeholder: 'productLength',
                    errors: settings.getErrors('productLengthField'),
                    instructions: ""
                }) }}

                {# TODO: require if shippable field selected #}
                {{ forms.selectField({
                    label: 'Width Field'|t,
                    id: 'productWidthField',
                    required: false,
                    name: 'productWidthField',
                    options: settings.getFieldOptionsForProduct('productWidthField'),
                    value: settings.productWidthField,
                    placeholder: 'productWidth',
                    errors: settings.getErrors('productWidthField'),
                    instructions: ""
                }) }}

                {# TODO: require if shippable field selected #}
                {{ forms.selectField({
                    label: 'Height Field'|t,
                    id: 'productHeightField',
                    required: false,
                    name: 'productHeightField',
                    options: settings.getFieldOptionsForProduct('productHeightField'),
                    value: settings.productHeightField,
                    placeholder: 'productHeight',
                    errors: settings.getErrors('productHeightField'),
                    instructions: ""
                }) }}

                {# TODO: require if shippable field selected #}
                {# TODO: allow explicit selection here #}
                {{ forms.selectField({
                    label: 'Dimensions Unit Field'|t,
                    id: 'productDimensionsUnitField',
                    required: false,
                    name: 'productDimensionsUnitField',
                    options: settings.getFieldOptionsForProduct('productDimensionsUnitField'),
                    value: settings.productDimensionsUnitField,
                    placeholder: 'productDimensionsUnit',
                    errors: settings.getErrors('productDimensionsUnitField'),
                    instructions: ""
                }) }}

                {{ forms.selectField({
                    label: 'Shippable Field'|t,
                    id: 'productShippableField',
                    required: false,
                    name: 'productShippableField',
                    options: settings.getFieldOptionsForProduct('productShippableField'),
                    value: settings.productShippableField,
                    placeholder: 'productShippable',
                    errors: settings.getErrors('productShippableField'),
                    instructions: ""
                }) }}

                {{ forms.selectField({
                    label: 'Taxable Field'|t,
                    id: 'productTaxableField',
                    required: false,
                    name: 'productTaxableField',
                    options: settings.getFieldOptionsForProduct('productTaxableField'),
                    value: settings.productTaxableField,
                    placeholder: 'productTaxable',
                    errors: settings.getErrors('productTaxableField'),
                    instructions: ""
                }) }}

                {{ forms.selectField({
                    label: 'Product Inventory Field'|t,
                    id: 'productInventoryField',
                    required: false,
                    name: 'productInventoryField',
                    options: settings.getFieldOptionsForProduct('productInventoryField'),
                    value: settings.productInventoryField,
                    placeholder: 'productInventory',
                    errors: settings.getErrors('productInventoryField'),
                    instructions: "Specify a Number field handle that will define product quantities."
                }) }}
            </div>
        </div>

        <div id="orders" class="hidden">
            {# TODO: disable if there isn't an inventory field #}
            {{ forms.lightswitchField({
                label: 'Reduce Item Quantities on Order?'|t,
                id: 'reduceQuantitiesOnOrder',
                required: false,
                name: 'reduceQuantitiesOnOrder',
                on: settings.reduceQuantitiesOnOrder,
                value: true,
                placeholder: 'id',
                errors: settings.getErrors('reduceQuantitiesOnOrder'),
                instructions: "Switch on if you've configured web hooks, set the Product Identifier + Inventory Field, and want to reduce item quantities as orders come in."
            }) }}

            {{ forms.textField({
                label: 'Order Comments Field Name'|t,
                id: 'orderCommentsFieldName',
                class: 'code',
                required: false,
                name: 'orderCommentsFieldName',
                value: settings.orderCommentsFieldName,
                autofocus: true,
                errors: settings.getErrors('orderCommentsFieldName'),
                instructions: "If you're supplying Snipcart with a custom field for order comments at checkout, add the exact name of that field here."
            }) }}

            {{ forms.textField({
                label: 'Order Gift Note Field Name'|t,
                id: 'orderGiftNoteFieldName',
                class: 'code',
                required: false,
                name: 'orderGiftNoteFieldName',
                value: settings.orderGiftNoteFieldName,
                autofocus: true,
                errors: settings.getErrors('orderGiftNoteFieldName'),
                instructions: "If you're supplying Snipcart with a custom field for gift notes at checkout, add the exact name of that field here."
            }) }}
        </div>

        <div id="webhooks" class="hidden">
            {{ forms.textField({
                label: 'Webhook Endpoint'|t,
                id: 'webhookEndpoint',
                name: 'webhookEndpoint',
                class: 'code webhook-endpoint',
                value: siteUrl(craft.app.config.general.actionTrigger ~ '/snipcart/webhooks/handle'),
                readonly: true,
                instructions: "Configure Snipcart to use this endpoint if you'd like this site to receive webhook data."
            }) }}

            {{ forms.editableTableField({
                label: 'Notification Emails'|t,
                id: 'notificationEmails',
                cols: {
                    0: { heading: 'Email Address'|t, type: 'singleline' }
                },
                required: false,
                name: 'notificationEmails',
                rows: settings.getNotificationEmailsForTable(),
                errors: settings.getErrors('notificationEmails'),
                instructions: "Add comma-separated email addresses that should receive email notifications as orders come in through the web hook."
            }) }}
        </div>

        <div id="logging" class="hidden">
            {{ forms.lightswitchField({
                label: 'Cache API Responses?'|t,
                id: 'cacheResponses',
                required: false,
                name: 'cacheResponses',
                on: settings.cacheResponses,
                value: true,
                placeholder: 'id',
                errors: settings.getErrors('cacheResponses'),
                instructions: "Switch on to have some REST API requests cached, which will make things zippier in the control panel."
            }) }}

            {{ forms.textField({
                label: 'Cache Duration Limit'|t,
                id: 'cacheDurationLimit',
                name: 'cacheDurationLimit',
                class: 'code',
                value: settings.cacheDurationLimit,
                instructions: "Specify the maximum number of seconds cached responses will be used, if enabled."
            }) }}

            {{ forms.lightswitchField({
                label: 'Log Custom Rates?'|t,
                id: 'logCustomRates',
                required: false,
                name: 'logCustomRates',
                on: settings.logCustomRates,
                value: true,
                placeholder: 'id',
                errors: settings.getErrors('logCustomRates'),
                instructions: "Switch on to log webhook rate responses to the database for troubleshooting and order shipping rate validation."
            }) }}

            {{ forms.lightswitchField({
                label: 'Log Webhook Requests?'|t,
                id: 'logWebhookRequests',
                required: false,
                name: 'logWebhookRequests',
                on: settings.logWebhookRequests,
                value: true,
                placeholder: 'id',
                errors: settings.getErrors('logWebhookRequests'),
                instructions: "Switch on to look valid webhook posts to the database for troubleshooting."
            }) }}
        </div>

        <div id="shipping" class="hidden">

            <h2>{{ "Ship From"|t }}</h2>

            {{ forms.textField({
                label: 'Name'|t,
                id: 'shipFromName',
                name: 'shipFrom[name]',
                value: settings.shipFrom.name ?? '',
                instructions: ""
            }) }}

            {{ forms.textField({
                label: 'Company Name'|t,
                id: 'shipFromCompanyName',
                name: 'shipFrom[companyName]',
                value: settings.shipFrom.companyName ?? '',
                instructions: ""
            }) }}

            {{ forms.textField({
                label: 'Address'|t,
                id: 'shipFromAddress1',
                name: 'shipFrom[address1]',
                placeholder: 'Address Line 1'|t,
                value: settings.shipFrom.address1 ?? '',
                instructions: ""
            }) }}

            {{ forms.textField({
                id: 'shipFromAddress2',
                name: 'shipFrom[address2]',
                placeholder: 'Address Line 2'|t,
                value: settings.shipFrom.address2 ?? '',
                instructions: ""
            }) }}

            <div class="input-row">
                <div class="column city">
                    {{ forms.textField({
                        id: 'shipFromCity',
                        name: 'shipFrom[city]',
                        size: 30,
                        placeholder: 'City',
                        value: settings.shipFrom.city ?? '',
                        instructions: ""
                    }) }}
                </div>
                <div class="column province">
                    {{ forms.textField({
                        id: 'shipFromProvince',
                        name: 'shipFrom[province]',
                        placeholder: 'Province'|t,
                        size: 8,
                        maxlength: 2,
                        value: settings.shipFrom.province ?? '',
                        instructions: ""
                    }) }}
                </div>
                <div class="column postal-code">
                    {{ forms.textField({
                        id: 'shipFromPostalCode',
                        name: 'shipFrom[postalCode]',
                        placeholder: 'Postal Code'|t,
                        value: settings.shipFrom.postalCode ?? '',
                        instructions: ""
                    }) }}
                </div>
                <div class="column country">
                    {{ forms.textField({
                        id: 'shipFromCountry',
                        name: 'shipFrom[country]',
                        placeholder: 'Country'|t,
                        size: 8,
                        maxlength: 2,
                        value: settings.shipFrom.country ?? '',
                        instructions: ""
                    }) }}
                </div>
            </div>

            {{ forms.textField({
                label: 'Phone'|t,
                id: 'shipFromPhone',
                name: 'shipFrom[phone]',
                value: settings.shipFrom.phone ?? '',
                instructions: ""
            }) }}

            {{ forms.textField({
                label: 'Email'|t,
                id: 'shipFromEmail',
                name: 'shipFrom[email]',
                value: settings.shipFrom.email ?? '',
                instructions: ""
            }) }}

            <h2>{{ "Packaging Types"|t }}</h2>

            {{ forms.editableTableField({
                label: 'Packaging Types'|t,
                id: 'packagingTypes',
                cols: {
                    0: { heading: 'Name'|t, type: 'singleline' },
                    1: { heading: 'Length'|t, type: 'number' },
                    2: { heading: 'Width'|t, type: 'number' },
                    3: { heading: 'Height'|t, type: 'number' },
                    4: { heading: 'Weight'|t, type: 'number' },
                },
                required: false,
                name: 'packagingTypes',
                rows: settings.getPackagingTypesForTable(),
                errors: settings.getErrors('packagingTypes'),
                instructions: ""
            }) }}

            <h2>{{ "Providers"|t }}</h2>

            {% if settings.enabledProviders | length %}
                <h3>
                    Provider{% if settings.enabledProviders | length > 1 %}s{% endif %} enabled in static config:
                    {% for provider in settings.enabledProviders %}
                        {{ provider }}{% if loop.last != true %}, {% endif %}
                    {% endfor %}
                </h3>
            {% endif %}

            {% if settings.providers | length %}
                <h3>Provider settings from static config:</h3>
                {% for providerName, settings in settings.providers %}
                    <label>{{ providerName }}</label>
                    <ul style="margin-bottom: 1rem;">
                        {% for key, value in settings %}
                            <li><code>{{ key }}</code>: <code>{{ value }}</code></li>
                        {% endfor %}
                    </ul>
                {% endfor %}
            {% endif %}
        </div>

    </div>

{% endblock %}

{% js %}
    (function($) {
        "use strict";
        $("#useCustomProductFields").click(function(e){
            $("#custom-product-fields").toggleClass("hidden");
        });
    })(jQuery);
{% endjs %}