(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors"],{

/***/ "./node_modules/apexcharts/dist/apexcharts.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/apexcharts/dist/apexcharts.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(setImmediate, module) {/*!\n * ApexCharts v3.6.8\n * (c) 2018-2019 Juned Chhipa\n * Released under the MIT License.\n */\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\n/*\n ** Generic functions which are not dependent on ApexCharts\n */\nvar Utils =\n/*#__PURE__*/\nfunction () {\n  function Utils() {\n    _classCallCheck(this, Utils);\n  }\n\n  _createClass(Utils, [{\n    key: \"shadeRGBColor\",\n    value: function shadeRGBColor(percent, color) {\n      var f = color.split(','),\n          t = percent < 0 ? 0 : 255,\n          p = percent < 0 ? percent * -1 : percent,\n          R = parseInt(f[0].slice(4)),\n          G = parseInt(f[1]),\n          B = parseInt(f[2]);\n      return 'rgb(' + (Math.round((t - R) * p) + R) + ',' + (Math.round((t - G) * p) + G) + ',' + (Math.round((t - B) * p) + B) + ')';\n    }\n  }, {\n    key: \"shadeHexColor\",\n    value: function shadeHexColor(percent, color) {\n      var f = parseInt(color.slice(1), 16),\n          t = percent < 0 ? 0 : 255,\n          p = percent < 0 ? percent * -1 : percent,\n          R = f >> 16,\n          G = f >> 8 & 0x00ff,\n          B = f & 0x0000ff;\n      return '#' + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n    } // beautiful color shading blending code\n    // http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n\n  }, {\n    key: \"shadeColor\",\n    value: function shadeColor(p, color) {\n      if (color.length > 7) return this.shadeRGBColor(p, color);else return this.shadeHexColor(p, color);\n    }\n  }], [{\n    key: \"bind\",\n    value: function bind(fn, me) {\n      return function () {\n        return fn.apply(me, arguments);\n      };\n    }\n  }, {\n    key: \"isObject\",\n    value: function isObject(item) {\n      return item && _typeof(item) === 'object' && !Array.isArray(item) && item != null;\n    }\n  }, {\n    key: \"listToArray\",\n    value: function listToArray(list) {\n      var i,\n          array = [];\n\n      for (i = 0; i < list.length; i++) {\n        array[i] = list[i];\n      }\n\n      return array;\n    } // to extend defaults with user options\n    // credit: http://stackoverflow.com/questions/27936772/deep-object-merging-in-es6-es7#answer-34749873\n\n  }, {\n    key: \"extend\",\n    value: function extend(target, source) {\n      var _this = this;\n\n      if (typeof Object.assign !== 'function') {\n\n        (function () {\n          Object.assign = function (target) {\n\n            if (target === undefined || target === null) {\n              throw new TypeError('Cannot convert undefined or null to object');\n            }\n\n            var output = Object(target);\n\n            for (var index = 1; index < arguments.length; index++) {\n              var _source = arguments[index];\n\n              if (_source !== undefined && _source !== null) {\n                for (var nextKey in _source) {\n                  if (_source.hasOwnProperty(nextKey)) {\n                    output[nextKey] = _source[nextKey];\n                  }\n                }\n              }\n            }\n\n            return output;\n          };\n        })();\n      }\n\n      var output = Object.assign({}, target);\n\n      if (this.isObject(target) && this.isObject(source)) {\n        Object.keys(source).forEach(function (key) {\n          if (_this.isObject(source[key])) {\n            if (!(key in target)) {\n              Object.assign(output, _defineProperty({}, key, source[key]));\n            } else {\n              output[key] = _this.extend(target[key], source[key]);\n            }\n          } else {\n            Object.assign(output, _defineProperty({}, key, source[key]));\n          }\n        });\n      }\n\n      return output;\n    }\n  }, {\n    key: \"extendArray\",\n    value: function extendArray(arrToExtend, resultArr) {\n      var extendedArr = [];\n      arrToExtend.map(function (item) {\n        extendedArr.push(Utils.extend(resultArr, item));\n      });\n      arrToExtend = extendedArr;\n      return arrToExtend;\n    } // If month counter exceeds 12, it starts again from 1\n\n  }, {\n    key: \"monthMod\",\n    value: function monthMod(month) {\n      return month % 12;\n    }\n  }, {\n    key: \"addProps\",\n    value: function addProps(obj, arr, val) {\n      if (typeof arr === 'string') {\n        arr = arr.split('.');\n      }\n\n      obj[arr[0]] = obj[arr[0]] || {};\n      var tmpObj = obj[arr[0]];\n\n      if (arr.length > 1) {\n        arr.shift();\n        this.addProps(tmpObj, arr, val);\n      } else {\n        obj[arr[0]] = val;\n      }\n\n      return obj;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(source) {\n      if (Object.prototype.toString.call(source) === '[object Array]') {\n        var cloneResult = [];\n\n        for (var i = 0; i < source.length; i++) {\n          cloneResult[i] = this.clone(source[i]);\n        }\n\n        return cloneResult;\n      } else if (_typeof(source) === 'object') {\n        var _cloneResult = {};\n\n        for (var prop in source) {\n          if (source.hasOwnProperty(prop)) {\n            _cloneResult[prop] = this.clone(source[prop]);\n          }\n        }\n\n        return _cloneResult;\n      } else {\n        return source;\n      }\n    }\n  }, {\n    key: \"log10\",\n    value: function log10(x) {\n      return Math.log(x) / Math.LN10;\n    }\n  }, {\n    key: \"roundToBase10\",\n    value: function roundToBase10(x) {\n      return Math.pow(10, Math.floor(Math.log10(x)));\n    }\n  }, {\n    key: \"roundToBase\",\n    value: function roundToBase(x, base) {\n      return Math.pow(base, Math.floor(Math.log(x) / Math.log(base)));\n    }\n  }, {\n    key: \"parseNumber\",\n    value: function parseNumber(val) {\n      if (val === null) return val;\n      return parseFloat(val);\n    }\n  }, {\n    key: \"getDimensions\",\n    value: function getDimensions(el) {\n      var computedStyle = getComputedStyle(el);\n      var ret = [];\n      var elementHeight = el.clientHeight;\n      var elementWidth = el.clientWidth;\n      elementHeight -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);\n      elementWidth -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);\n      ret.push(elementWidth);\n      ret.push(elementHeight);\n      return ret;\n    }\n  }, {\n    key: \"getBoundingClientRect\",\n    value: function getBoundingClientRect(element) {\n      var rect = element.getBoundingClientRect();\n      return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y\n      };\n    } // http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb#answer-12342275\n\n  }, {\n    key: \"hexToRgba\",\n    value: function hexToRgba() {\n      var hex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#999999';\n      var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.6;\n\n      if (hex.substring(0, 1) !== '#') {\n        hex = '#999999';\n      }\n\n      var h = hex.replace('#', '');\n      h = h.match(new RegExp('(.{' + h.length / 3 + '})', 'g'));\n\n      for (var i = 0; i < h.length; i++) {\n        h[i] = parseInt(h[i].length === 1 ? h[i] + h[i] : h[i], 16);\n      }\n\n      if (typeof opacity !== 'undefined') h.push(opacity);\n      return 'rgba(' + h.join(',') + ')';\n    }\n  }, {\n    key: \"getOpacityFromRGBA\",\n    value: function getOpacityFromRGBA(rgba) {\n      rgba = rgba.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n      return rgba[3];\n    }\n  }, {\n    key: \"rgb2hex\",\n    value: function rgb2hex(rgb) {\n      rgb = rgb.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n      return rgb && rgb.length === 4 ? '#' + ('0' + parseInt(rgb[1], 10).toString(16)).slice(-2) + ('0' + parseInt(rgb[2], 10).toString(16)).slice(-2) + ('0' + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';\n    }\n  }, {\n    key: \"isColorHex\",\n    value: function isColorHex(color) {\n      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);\n    }\n  }, {\n    key: \"polarToCartesian\",\n    value: function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n      var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n      return {\n        x: centerX + radius * Math.cos(angleInRadians),\n        y: centerY + radius * Math.sin(angleInRadians)\n      };\n    }\n  }, {\n    key: \"escapeString\",\n    value: function escapeString(str) {\n      var escapeWith = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n      var newStr = str.toString().slice();\n      newStr = newStr.replace(/[` ~!@#$%^&*()_|+\\-=?;:'\",.<>\\{\\}\\[\\]\\\\\\/]/gi, escapeWith);\n      return newStr;\n    }\n  }, {\n    key: \"negToZero\",\n    value: function negToZero(val) {\n      return val < 0 ? 0 : val;\n    }\n  }, {\n    key: \"moveIndexInArray\",\n    value: function moveIndexInArray(arr, old_index, new_index) {\n      if (new_index >= arr.length) {\n        var k = new_index - arr.length + 1;\n\n        while (k--) {\n          arr.push(undefined);\n        }\n      }\n\n      arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n      return arr;\n    }\n  }, {\n    key: \"extractNumber\",\n    value: function extractNumber(s) {\n      return parseFloat(s.replace(/[^\\d\\.]*/g, ''));\n    }\n  }, {\n    key: \"randomString\",\n    value: function randomString(len) {\n      var text = '';\n      var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n      for (var i = 0; i < len; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    }\n  }, {\n    key: \"findAncestor\",\n    value: function findAncestor(el, cls) {\n      while ((el = el.parentElement) && !el.classList.contains(cls)) {\n      }\n\n      return el;\n    }\n  }, {\n    key: \"setELstyles\",\n    value: function setELstyles(el, styles) {\n      for (var key in styles) {\n        if (styles.hasOwnProperty(key)) {\n          el.style.key = styles[key];\n        }\n      }\n    }\n  }, {\n    key: \"isNumber\",\n    value: function isNumber(value) {\n      return !isNaN(value) && parseFloat(Number(value)) === value && !isNaN(parseInt(value, 10));\n    }\n  }, {\n    key: \"isFloat\",\n    value: function isFloat(n) {\n      return Number(n) === n && n % 1 !== 0;\n    }\n  }, {\n    key: \"isSafari\",\n    value: function isSafari() {\n      return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    }\n  }, {\n    key: \"isFirefox\",\n    value: function isFirefox() {\n      return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n    }\n  }, {\n    key: \"isIE11\",\n    value: function isIE11() {\n      if (window.navigator.userAgent.indexOf('MSIE') !== -1 || window.navigator.appVersion.indexOf('Trident/') > -1) {\n        return true;\n      }\n    }\n  }, {\n    key: \"isIE\",\n    value: function isIE() {\n      var ua = window.navigator.userAgent;\n      var msie = ua.indexOf('MSIE ');\n\n      if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n      }\n\n      var trident = ua.indexOf('Trident/');\n\n      if (trident > 0) {\n        // IE 11 => return version number\n        var rv = ua.indexOf('rv:');\n        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n      }\n\n      var edge = ua.indexOf('Edge/');\n\n      if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n      } // other browser\n\n\n      return false;\n    }\n  }]);\n\n  return Utils;\n}();\n\n/**\n * ApexCharts Filters Class for setting hover/active states on the paths.\n *\n * @module Formatters\n **/\n\nvar Filters =\n/*#__PURE__*/\nfunction () {\n  function Filters(ctx) {\n    _classCallCheck(this, Filters);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  } // create a re-usable filter which can be appended other filter effects and applied to multiple elements\n\n\n  _createClass(Filters, [{\n    key: \"getDefaultFilter\",\n    value: function getDefaultFilter(el) {\n      var w = this.w;\n      el.unfilter(true);\n      var filter = new window.SVG.Filter();\n      filter.size('120%', '180%', '-5%', '-40%');\n\n      if (w.config.states.normal.filter !== 'none') {\n        this.applyFilter(el, w.config.states.normal.filter.type, w.config.states.normal.filter.value);\n      } else {\n        if (w.config.chart.dropShadow.enabled) {\n          this.dropShadow(el, w.config.chart.dropShadow);\n        }\n      }\n    }\n  }, {\n    key: \"addNormalFilter\",\n    value: function addNormalFilter(el) {\n      var w = this.w;\n\n      if (w.config.chart.dropShadow.enabled) {\n        this.dropShadow(el, w.config.chart.dropShadow);\n      }\n    }\n  }, {\n    key: \"addDesaturateFilter\",\n    value: function addDesaturateFilter(el) {\n      var _this = this;\n\n      var w = this.w;\n      el.unfilter(true);\n      var filter = new window.SVG.Filter();\n      filter.size('120%', '180%', '-5%', '-40%');\n      el.filter(function (add) {\n        var shadowAttr = w.config.chart.dropShadow;\n\n        if (shadowAttr.enabled) {\n          filter = _this.addShadow(add, shadowAttr);\n        } else {\n          filter = add;\n        }\n\n        filter.colorMatrix('matrix', [0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0, 0, 1.0, 0]).colorMatrix('saturate', 0);\n      });\n      el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');\n    } // appends dropShadow to the filter object which can be chained with other filter effects\n\n  }, {\n    key: \"addLightenFilter\",\n    value: function addLightenFilter(el, attrs) {\n      var _this2 = this;\n\n      var w = this.w;\n      var intensity = attrs.intensity;\n\n      if (Utils.isFirefox()) {\n        return;\n      }\n\n      el.unfilter(true);\n      var filter = new window.SVG.Filter();\n      filter.size('120%', '180%', '-5%', '-40%');\n      el.filter(function (add) {\n        var shadowAttr = w.config.chart.dropShadow;\n\n        if (shadowAttr.enabled) {\n          filter = _this2.addShadow(add, shadowAttr);\n        } else {\n          filter = add;\n        }\n\n        filter.componentTransfer({\n          rgb: {\n            type: 'linear',\n            slope: 1.5,\n            intercept: intensity\n          }\n        });\n      });\n      el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');\n    } // appends dropShadow to the filter object which can be chained with other filter effects\n\n  }, {\n    key: \"addDarkenFilter\",\n    value: function addDarkenFilter(el, attrs) {\n      var _this3 = this;\n\n      var w = this.w;\n      var intensity = attrs.intensity;\n\n      if (Utils.isFirefox()) {\n        return;\n      }\n\n      el.unfilter(true);\n      var filter = new window.SVG.Filter();\n      filter.size('120%', '180%', '-5%', '-40%');\n      el.filter(function (add) {\n        var shadowAttr = w.config.chart.dropShadow;\n\n        if (shadowAttr.enabled) {\n          filter = _this3.addShadow(add, shadowAttr);\n        } else {\n          filter = add;\n        }\n\n        filter.componentTransfer({\n          rgb: {\n            type: 'linear',\n            slope: intensity\n          }\n        });\n      });\n      el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');\n    }\n  }, {\n    key: \"applyFilter\",\n    value: function applyFilter(el, filter) {\n      var intensity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n\n      switch (filter) {\n        case 'none':\n          {\n            this.addNormalFilter(el);\n            break;\n          }\n\n        case 'lighten':\n          {\n            this.addLightenFilter(el, {\n              intensity: intensity\n            });\n            break;\n          }\n\n        case 'darken':\n          {\n            this.addDarkenFilter(el, {\n              intensity: intensity\n            });\n            break;\n          }\n\n        case 'desaturate':\n          {\n            this.addDesaturateFilter(el);\n            break;\n          }\n\n        default:\n          // do nothing\n          break;\n      }\n    } // appends dropShadow to the filter object which can be chained with other filter effects\n\n  }, {\n    key: \"addShadow\",\n    value: function addShadow(add, attrs) {\n      var blur = attrs.blur,\n          top = attrs.top,\n          left = attrs.left,\n          color = attrs.color,\n          opacity = attrs.opacity;\n      var shadowBlur = add.flood(color, opacity).composite(add.sourceAlpha, 'in').offset(left, top).gaussianBlur(blur).merge(add.source);\n      return add.blend(add.source, shadowBlur);\n    } // directly adds dropShadow to the element and returns the same element.\n    // the only way it is different from the addShadow() function is that addShadow is chainable to other filters, while this function discards all filters and add dropShadow\n\n  }, {\n    key: \"dropShadow\",\n    value: function dropShadow(el, attrs) {\n      var top = attrs.top,\n          left = attrs.left,\n          blur = attrs.blur,\n          color = attrs.color,\n          opacity = attrs.opacity,\n          noUserSpaceOnUse = attrs.noUserSpaceOnUse;\n      el.unfilter(true);\n      var filter = new window.SVG.Filter();\n      filter.size('120%', '180%', '-5%', '-40%');\n      el.filter(function (add) {\n        var shadowBlur = null;\n\n        if (Utils.isSafari() || Utils.isFirefox() || Utils.isIE()) {\n          // safari/firefox has some alternative way to use this filter\n          shadowBlur = add.flood(color, opacity).composite(add.sourceAlpha, 'in').offset(left, top).gaussianBlur(blur);\n        } else {\n          shadowBlur = add.flood(color, opacity).composite(add.sourceAlpha, 'in').offset(left, top).gaussianBlur(blur).merge(add.source);\n        }\n\n        add.blend(add.source, shadowBlur);\n      });\n\n      if (!noUserSpaceOnUse) {\n        el.filterer.node.setAttribute('filterUnits', 'userSpaceOnUse');\n      }\n\n      return el;\n    }\n  }, {\n    key: \"setSelectionFilter\",\n    value: function setSelectionFilter(el, realIndex, dataPointIndex) {\n      var w = this.w;\n\n      if (typeof w.globals.selectedDataPoints[realIndex] !== 'undefined') {\n        if (w.globals.selectedDataPoints[realIndex].indexOf(dataPointIndex) > -1) {\n          el.node.setAttribute('selected', true);\n          var activeFilter = w.config.states.active.filter;\n\n          if (activeFilter !== 'none') {\n            this.applyFilter(el, activeFilter.type, activeFilter.value);\n          }\n        }\n      }\n    }\n  }]);\n\n  return Filters;\n}();\n\n/**\n * ApexCharts Animation Class.\n *\n * @module Animations\n **/\n\nvar Animations =\n/*#__PURE__*/\nfunction () {\n  function Animations(ctx) {\n    _classCallCheck(this, Animations);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.setEasingFunctions();\n  }\n\n  _createClass(Animations, [{\n    key: \"setEasingFunctions\",\n    value: function setEasingFunctions() {\n      var easing;\n      var userDefinedEasing = this.w.config.chart.animations.easing;\n\n      switch (userDefinedEasing) {\n        case 'linear':\n          {\n            easing = '-';\n            break;\n          }\n\n        case 'easein':\n          {\n            easing = '<';\n            break;\n          }\n\n        case 'easeout':\n          {\n            easing = '>';\n            break;\n          }\n\n        case 'easeinout':\n          {\n            easing = '<>';\n            break;\n          }\n\n        case 'swing':\n          {\n            easing = function easing(pos) {\n              var s = 1.70158;\n              return (pos -= 1) * pos * ((s + 1) * pos + s) + 1;\n            };\n\n            break;\n          }\n\n        case 'bounce':\n          {\n            easing = function easing(pos) {\n              if (pos < 1 / 2.75) {\n                return 7.5625 * pos * pos;\n              } else if (pos < 2 / 2.75) {\n                return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;\n              } else if (pos < 2.5 / 2.75) {\n                return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;\n              } else {\n                return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;\n              }\n            };\n\n            break;\n          }\n\n        case 'elastic':\n          {\n            easing = function easing(pos) {\n              if (pos === !!pos) return pos;\n              return Math.pow(2, -10 * pos) * Math.sin((pos - 0.075) * (2 * Math.PI) / 0.3) + 1;\n            };\n\n            break;\n          }\n\n        default:\n          {\n            easing = '<>';\n          }\n      }\n\n      this.w.globals.easing = easing;\n    }\n  }, {\n    key: \"animateLine\",\n    value: function animateLine(el, from, to, speed) {\n      el.attr(from).animate(speed).attr(to);\n    }\n    /*\n     ** Animate radius of a circle element\n     */\n\n  }, {\n    key: \"animateCircleRadius\",\n    value: function animateCircleRadius(el, from, to, speed, easing) {\n      if (!from) from = 0;\n      el.attr({\n        r: from\n      }).animate(speed, easing).attr({\n        r: to\n      });\n    }\n    /*\n     ** Animate radius and position of a circle element\n     */\n\n  }, {\n    key: \"animateCircle\",\n    value: function animateCircle(el, from, to, speed, easing) {\n      el.attr({\n        r: from.r,\n        cx: from.cx,\n        cy: from.cy\n      }).animate(speed, easing).attr({\n        r: to.r,\n        cx: to.cx,\n        cy: to.cy\n      });\n    }\n    /*\n     ** Animate rect properties\n     */\n\n  }, {\n    key: \"animateRect\",\n    value: function animateRect(el, from, to, speed, fn) {\n      el.attr(from).animate(speed).attr(to).afterAll(function () {\n        fn();\n      });\n    }\n  }, {\n    key: \"animatePathsGradually\",\n    value: function animatePathsGradually(params) {\n      var el = params.el,\n          j = params.j,\n          pathFrom = params.pathFrom,\n          pathTo = params.pathTo,\n          speed = params.speed,\n          delay = params.delay,\n          strokeWidth = params.strokeWidth;\n      var me = this;\n      var w = this.w;\n      var delayFactor = 0;\n\n      if (w.config.chart.animations.animateGradually.enabled) {\n        delayFactor = w.config.chart.animations.animateGradually.delay;\n      }\n\n      if (w.config.chart.animations.dynamicAnimation.enabled && w.globals.dataChanged) {\n        delayFactor = 0;\n      }\n\n      me.morphSVG(el, j, pathFrom, pathTo, speed, strokeWidth, delay * delayFactor);\n    }\n  }, {\n    key: \"showDelayedElements\",\n    value: function showDelayedElements() {\n      this.w.globals.delayedElements.forEach(function (d) {\n        var ele = d.el;\n        ele.classList.remove('hidden');\n      });\n    } // SVG.js animation for morphing one path to another\n\n  }, {\n    key: \"morphSVG\",\n    value: function morphSVG(el, j, pathFrom, pathTo, speed, strokeWidth, delay) {\n      var _this = this;\n\n      var w = this.w;\n\n      if (!pathFrom) {\n        pathFrom = el.attr('pathFrom');\n      }\n\n      if (!pathTo) {\n        pathTo = el.attr('pathTo');\n      }\n\n      if (!pathFrom || pathFrom.indexOf('undefined') > -1 || pathFrom.indexOf('NaN') > -1) {\n        pathFrom = \"M 0 \".concat(w.globals.gridHeight);\n        speed = 1;\n      }\n\n      if (pathTo.indexOf('undefined') > -1 || pathTo.indexOf('NaN') > -1) {\n        pathTo = \"M 0 \".concat(w.globals.gridHeight);\n        speed = 1;\n      }\n\n      if (!w.globals.shouldAnimate) {\n        speed = 1;\n      }\n\n      el.plot(pathFrom).animate(1, w.globals.easing, delay).plot(pathFrom).animate(speed, w.globals.easing, delay).plot(pathTo).afterAll(function () {\n        // a flag to indicate that the original mount function can return true now as animation finished here\n        if (Utils.isNumber(j)) {\n          if (j === w.globals.series[w.globals.maxValsInArrayIndex].length - 2 && w.globals.shouldAnimate) {\n            w.globals.animationEnded = true;\n          }\n        } else if (w.globals.shouldAnimate) {\n          w.globals.animationEnded = true;\n\n          if (typeof w.config.chart.events.animationEnd === 'function') {\n            w.config.chart.events.animationEnd(_this.ctx, w);\n          }\n        }\n\n        _this.showDelayedElements();\n      });\n    }\n  }]);\n\n  return Animations;\n}();\n\n/**\n * ApexCharts Graphics Class for all drawing operations.\n *\n * @module Graphics\n **/\n\nvar Graphics =\n/*#__PURE__*/\nfunction () {\n  function Graphics(ctx) {\n    _classCallCheck(this, Graphics);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(Graphics, [{\n    key: \"drawLine\",\n    value: function drawLine(x1, y1, x2, y2) {\n      var lineColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '#a8a8a8';\n      var dashArray = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var strokeWidth = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      var w = this.w;\n      var line = w.globals.dom.Paper.line().attr({\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2,\n        stroke: lineColor,\n        'stroke-dasharray': dashArray,\n        'stroke-width': strokeWidth\n      });\n      return line;\n    }\n  }, {\n    key: \"drawRect\",\n    value: function drawRect() {\n      var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '#fefefe';\n      var opacity = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n      var strokeWidth = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n      var strokeColor = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n      var strokeDashArray = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n      var w = this.w;\n      var rect = w.globals.dom.Paper.rect();\n      rect.attr({\n        x: x1,\n        y: y1,\n        width: x2 > 0 ? x2 : 0,\n        height: y2 > 0 ? y2 : 0,\n        rx: radius,\n        ry: radius,\n        fill: color,\n        opacity: opacity,\n        'stroke-width': strokeWidth !== null ? strokeWidth : 0,\n        stroke: strokeColor !== null ? strokeColor : 'none',\n        'stroke-dasharray': strokeDashArray\n      });\n      return rect;\n    }\n  }, {\n    key: \"drawPolygon\",\n    value: function drawPolygon(polygonString) {\n      var stroke = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#e1e1e1';\n      var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'none';\n      var w = this.w;\n      var polygon = w.globals.dom.Paper.polygon(polygonString).attr({\n        fill: fill,\n        stroke: stroke\n      });\n      return polygon;\n    }\n  }, {\n    key: \"drawCircle\",\n    value: function drawCircle(radius) {\n      var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var w = this.w;\n      var c = w.globals.dom.Paper.circle(radius * 2);\n\n      if (attrs !== null) {\n        c.attr(attrs);\n      }\n\n      return c;\n    }\n  }, {\n    key: \"drawPath\",\n    value: function drawPath(_ref) {\n      var _ref$d = _ref.d,\n          d = _ref$d === void 0 ? '' : _ref$d,\n          _ref$stroke = _ref.stroke,\n          stroke = _ref$stroke === void 0 ? '#a8a8a8' : _ref$stroke,\n          _ref$strokeWidth = _ref.strokeWidth,\n          strokeWidth = _ref$strokeWidth === void 0 ? 1 : _ref$strokeWidth,\n          fill = _ref.fill,\n          _ref$fillOpacity = _ref.fillOpacity,\n          fillOpacity = _ref$fillOpacity === void 0 ? 1 : _ref$fillOpacity,\n          _ref$strokeOpacity = _ref.strokeOpacity,\n          strokeOpacity = _ref$strokeOpacity === void 0 ? 1 : _ref$strokeOpacity,\n          classes = _ref.classes,\n          _ref$strokeLinecap = _ref.strokeLinecap,\n          strokeLinecap = _ref$strokeLinecap === void 0 ? null : _ref$strokeLinecap,\n          _ref$strokeDashArray = _ref.strokeDashArray,\n          strokeDashArray = _ref$strokeDashArray === void 0 ? 0 : _ref$strokeDashArray;\n      var w = this.w;\n\n      if (strokeLinecap === null) {\n        strokeLinecap = w.config.stroke.lineCap;\n      }\n\n      if (d.indexOf('undefined') > -1 || d.indexOf('NaN') > -1) {\n        d = \"M 0 \".concat(w.globals.gridHeight);\n      }\n\n      var p = w.globals.dom.Paper.path(d).attr({\n        fill: fill,\n        'fill-opacity': fillOpacity,\n        stroke: stroke,\n        'stroke-opacity': strokeOpacity,\n        'stroke-linecap': strokeLinecap,\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': strokeDashArray,\n        class: classes\n      });\n      return p;\n    }\n  }, {\n    key: \"group\",\n    value: function group() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var w = this.w;\n      var g = w.globals.dom.Paper.group();\n\n      if (attrs !== null) {\n        g.attr(attrs);\n      }\n\n      return g;\n    }\n  }, {\n    key: \"move\",\n    value: function move(x, y) {\n      var move = ['M', x, y].join(' ');\n      return move;\n    }\n  }, {\n    key: \"line\",\n    value: function line(x, y) {\n      var hORv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var line = null;\n\n      if (hORv === null) {\n        line = ['L', x, y].join(' ');\n      } else if (hORv === 'H') {\n        line = ['H', x].join(' ');\n      } else if (hORv === 'V') {\n        line = ['V', y].join(' ');\n      }\n\n      return line;\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(x1, y1, x2, y2, x, y) {\n      var curve = ['C', x1, y1, x2, y2, x, y].join(' ');\n      return curve;\n    }\n  }, {\n    key: \"quadraticCurve\",\n    value: function quadraticCurve(x1, y1, x, y) {\n      var curve = ['Q', x1, y1, x, y].join(' ');\n      return curve;\n    }\n  }, {\n    key: \"arc\",\n    value: function arc(rx, ry, axisRotation, largeArcFlag, sweepFlag, x, y) {\n      var relative = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      var coord = 'A';\n      if (relative) coord = 'a';\n      var arc = [coord, rx, ry, axisRotation, largeArcFlag, sweepFlag, x, y].join(' ');\n      return arc;\n    }\n    /**\n     * @memberof Graphics\n     * @param {object}\n     *  i = series's index\n     *  realIndex = realIndex is series's actual index when it was drawn time. After several redraws, the iterating \"i\" may change in loops, but realIndex doesn't\n     *  pathFrom = existing pathFrom to animateTo\n     *  pathTo = new Path to which d attr will be animated from pathFrom to pathTo\n     *  stroke = line Color\n     *  strokeWidth = width of path Line\n     *  fill = it can be gradient, single color, pattern or image\n     *  animationDelay = how much to delay when starting animation (in milliseconds)\n     *  dataChangeSpeed = for dynamic animations, when data changes\n     *  className = class attribute to add\n     * @return {object} svg.js path object\n     **/\n\n  }, {\n    key: \"renderPaths\",\n    value: function renderPaths(_ref2) {\n      var i = _ref2.i,\n          j = _ref2.j,\n          realIndex = _ref2.realIndex,\n          pathFrom = _ref2.pathFrom,\n          pathTo = _ref2.pathTo,\n          stroke = _ref2.stroke,\n          strokeWidth = _ref2.strokeWidth,\n          strokeLinecap = _ref2.strokeLinecap,\n          fill = _ref2.fill,\n          animationDelay = _ref2.animationDelay,\n          initialSpeed = _ref2.initialSpeed,\n          dataChangeSpeed = _ref2.dataChangeSpeed,\n          className = _ref2.className,\n          id = _ref2.id,\n          _ref2$shouldClipToGri = _ref2.shouldClipToGrid,\n          shouldClipToGrid = _ref2$shouldClipToGri === void 0 ? true : _ref2$shouldClipToGri,\n          _ref2$bindEventsOnPat = _ref2.bindEventsOnPaths,\n          bindEventsOnPaths = _ref2$bindEventsOnPat === void 0 ? true : _ref2$bindEventsOnPat;\n      var w = this.w;\n      var filters = new Filters(this.ctx);\n      var anim = new Animations(this.ctx);\n      var initialAnim = this.w.config.chart.animations.enabled;\n      var dynamicAnim = initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;\n      var d;\n      var shouldAnimate = !!(initialAnim && !w.globals.resized || dynamicAnim && w.globals.dataChanged && w.globals.shouldAnimate);\n\n      if (shouldAnimate) {\n        d = pathFrom;\n      } else {\n        d = pathTo;\n        this.w.globals.animationEnded = true;\n      }\n\n      var strokeDashArrayOpt = w.config.stroke.dashArray;\n      var strokeDashArray = 0;\n\n      if (Array.isArray(strokeDashArrayOpt)) {\n        strokeDashArray = strokeDashArrayOpt[realIndex];\n      } else {\n        strokeDashArray = w.config.stroke.dashArray;\n      }\n\n      var el = this.drawPath({\n        d: d,\n        stroke: stroke,\n        strokeWidth: strokeWidth,\n        fill: fill,\n        fillOpacity: 1,\n        classes: className,\n        strokeLinecap: strokeLinecap,\n        strokeDashArray: strokeDashArray\n      });\n      el.attr('id', \"\".concat(id, \"-\").concat(i));\n      el.attr('index', realIndex);\n\n      if (shouldClipToGrid) {\n        el.attr({\n          'clip-path': \"url(#gridRectMask\".concat(w.globals.cuid, \")\")\n        });\n      } // const defaultFilter = el.filterer\n\n\n      if (w.config.states.normal.filter.type !== 'none') {\n        filters.getDefaultFilter(el, w.config.states.normal.filter.type, w.config.states.normal.filter.value);\n      } else {\n        if (w.config.chart.dropShadow.enabled) {\n          if (!w.config.chart.dropShadow.enabledSeries || w.config.chart.dropShadow.enabledSeries && w.config.chart.dropShadow.enabledSeries.indexOf(realIndex) !== -1) {\n            var shadow = w.config.chart.dropShadow;\n            filters.dropShadow(el, shadow);\n          }\n        }\n      }\n\n      if (bindEventsOnPaths) {\n        el.node.addEventListener('mouseenter', this.pathMouseEnter.bind(this, el));\n        el.node.addEventListener('mouseleave', this.pathMouseLeave.bind(this, el));\n        el.node.addEventListener('mousedown', this.pathMouseDown.bind(this, el));\n      }\n\n      el.attr({\n        pathTo: pathTo,\n        pathFrom: pathFrom\n      });\n      var defaultAnimateOpts = {\n        el: el,\n        j: j,\n        pathFrom: pathFrom,\n        pathTo: pathTo,\n        strokeWidth: strokeWidth\n      };\n\n      if (initialAnim && !w.globals.resized && !w.globals.dataChanged) {\n        anim.animatePathsGradually(_objectSpread({}, defaultAnimateOpts, {\n          speed: initialSpeed,\n          delay: animationDelay\n        }));\n      } else {\n        if (w.globals.resized || !w.globals.dataChanged) {\n          anim.showDelayedElements();\n        }\n      }\n\n      if (w.globals.dataChanged && dynamicAnim && shouldAnimate) {\n        anim.animatePathsGradually(_objectSpread({}, defaultAnimateOpts, {\n          speed: dataChangeSpeed\n        }));\n      }\n\n      return el;\n    }\n  }, {\n    key: \"drawPattern\",\n    value: function drawPattern(style, width, height) {\n      var stroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#a8a8a8';\n      var strokeWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n      var w = this.w;\n      var p = w.globals.dom.Paper.pattern(width, height, function (add) {\n        if (style === 'horizontalLines') {\n          add.line(0, 0, height, 0).stroke({\n            color: stroke,\n            width: strokeWidth + 1\n          });\n        } else if (style === 'verticalLines') {\n          add.line(0, 0, 0, width).stroke({\n            color: stroke,\n            width: strokeWidth + 1\n          });\n        } else if (style === 'slantedLines') {\n          add.line(0, 0, width, height).stroke({\n            color: stroke,\n            width: strokeWidth\n          });\n        } else if (style === 'squares') {\n          add.rect(width, height).fill('none').stroke({\n            color: stroke,\n            width: strokeWidth\n          });\n        } else if (style === 'circles') {\n          add.circle(width).fill('none').stroke({\n            color: stroke,\n            width: strokeWidth\n          });\n        }\n      });\n      return p;\n    }\n  }, {\n    key: \"drawGradient\",\n    value: function drawGradient(style, gfrom, gto, opacityFrom, opacityTo) {\n      var size = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      var stops = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      var colorStops = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n      var i = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;\n      var w = this.w;\n      var g;\n      gfrom = Utils.hexToRgba(gfrom, opacityFrom);\n      gto = Utils.hexToRgba(gto, opacityTo);\n      var stop1 = 0;\n      var stop2 = 1;\n      var stop3 = 1;\n      var stop4 = null;\n\n      if (stops !== null) {\n        stop1 = typeof stops[0] !== 'undefined' ? stops[0] / 100 : 0;\n        stop2 = typeof stops[1] !== 'undefined' ? stops[1] / 100 : 1;\n        stop3 = typeof stops[2] !== 'undefined' ? stops[2] / 100 : 1;\n        stop4 = typeof stops[3] !== 'undefined' ? stops[3] / 100 : null;\n      }\n\n      var radial = !!(w.config.chart.type === 'donut' || w.config.chart.type === 'pie' || w.config.chart.type === 'bubble');\n\n      if (colorStops === null || colorStops.length === 0) {\n        g = w.globals.dom.Paper.gradient(radial ? 'radial' : 'linear', function (stop) {\n          stop.at(stop1, gfrom, opacityFrom);\n          stop.at(stop2, gto, opacityTo);\n          stop.at(stop3, gto, opacityTo);\n\n          if (stop4 !== null) {\n            stop.at(stop4, gfrom, opacityFrom);\n          }\n        });\n      } else {\n        g = w.globals.dom.Paper.gradient(radial ? 'radial' : 'linear', function (stop) {\n          var stops = Array.isArray(colorStops[i]) ? colorStops[i] : colorStops;\n          stops.forEach(function (s) {\n            stop.at(s.offset / 100, s.color, s.opacity);\n          });\n        });\n      }\n\n      if (!radial) {\n        if (style === 'vertical') {\n          g.from(0, 0).to(0, 1);\n        } else if (style === 'diagonal') {\n          g.from(0, 0).to(1, 1);\n        } else if (style === 'horizontal') {\n          g.from(0, 1).to(1, 1);\n        } else if (style === 'diagonal2') {\n          g.from(0, 1).to(2, 2);\n        }\n      } else {\n        var offx = w.globals.gridWidth / 2;\n        var offy = w.globals.gridHeight / 2;\n\n        if (w.config.chart.type !== 'bubble') {\n          g.attr({\n            gradientUnits: 'userSpaceOnUse',\n            cx: offx,\n            cy: offy,\n            r: size\n          });\n        } else {\n          g.attr({\n            cx: 0.5,\n            cy: 0.5,\n            r: 0.8,\n            fx: 0.2,\n            fy: 0.2\n          });\n        }\n      }\n\n      return g;\n    }\n  }, {\n    key: \"drawText\",\n    value: function drawText(opts) {\n      var w = this.w;\n      var x = opts.x,\n          y = opts.y,\n          text = opts.text,\n          textAnchor = opts.textAnchor,\n          fontSize = opts.fontSize,\n          fontFamily = opts.fontFamily,\n          foreColor = opts.foreColor,\n          opacity = opts.opacity;\n\n      if (!textAnchor) {\n        textAnchor = 'start';\n      }\n\n      if (!foreColor) {\n        foreColor = w.config.chart.foreColor;\n      }\n\n      fontFamily = fontFamily || w.config.chart.fontFamily;\n      var elText;\n\n      if (Array.isArray(text)) {\n        elText = w.globals.dom.Paper.text(function (add) {\n          for (var i = 0; i < text.length; i++) {\n            add.tspan(text[i]);\n          }\n        });\n      } else {\n        elText = w.globals.dom.Paper.plain(text);\n      }\n\n      elText.attr({\n        x: x,\n        y: y,\n        'text-anchor': textAnchor,\n        'dominant-baseline': 'auto',\n        'font-size': fontSize,\n        'font-family': fontFamily,\n        fill: foreColor,\n        class:  true ? opts.cssClass : undefined\n      });\n      elText.node.style.fontFamily = fontFamily;\n      elText.node.style.opacity = opacity;\n      return elText;\n    }\n  }, {\n    key: \"addTspan\",\n    value: function addTspan(textEl, text, fontFamily) {\n      var tspan = textEl.tspan(text);\n\n      if (!fontFamily) {\n        fontFamily = this.w.config.chart.fontFamily;\n      }\n\n      tspan.node.style.fontFamily = fontFamily;\n    }\n  }, {\n    key: \"drawMarker\",\n    value: function drawMarker(x, y, opts) {\n      x = x || 0;\n      var size = opts.pSize || 0;\n      var elPoint = null;\n\n      if (opts.shape === 'square') {\n        var radius = opts.pRadius === undefined ? size / 2 : opts.pRadius;\n\n        if (y === null) {\n          size = 0;\n          radius = 0;\n        }\n\n        var nSize = size * 1.2 + radius;\n        var p = this.drawRect(nSize, nSize, nSize, nSize, radius);\n        p.attr({\n          x: x - nSize / 2,\n          y: y - nSize / 2,\n          cx: x,\n          cy: y,\n          class: opts.class ? opts.class : '',\n          fill: opts.pointFillColor,\n          'fill-opacity': opts.pointFillOpacity ? opts.pointFillOpacity : 1,\n          stroke: opts.pointStrokeColor,\n          'stroke-width': opts.pWidth ? opts.pWidth : 0,\n          'stroke-opacity': opts.pointStrokeOpacity ? opts.pointStrokeOpacity : 1\n        });\n        elPoint = p;\n      } else if (opts.shape === 'circle') {\n        if (!Utils.isNumber(y)) {\n          size = 0;\n          y = 0;\n        } // let nSize = size - opts.pRadius / 2 < 0 ? 0 : size - opts.pRadius / 2\n\n\n        elPoint = this.drawCircle(size, {\n          cx: x,\n          cy: y,\n          class: opts.class ? opts.class : '',\n          stroke: opts.pointStrokeColor,\n          fill: opts.pointFillColor,\n          'fill-opacity': opts.pointFillOpacity ? opts.pointFillOpacity : 1,\n          'stroke-width': opts.pWidth ? opts.pWidth : 0,\n          'stroke-opacity': opts.pointStrokeOpacity ? opts.pointStrokeOpacity : 1\n        });\n      }\n\n      return elPoint;\n    }\n  }, {\n    key: \"pathMouseEnter\",\n    value: function pathMouseEnter(path, e) {\n      var w = this.w;\n      var filters = new Filters(this.ctx);\n      var i = parseInt(path.node.getAttribute('index'));\n      var j = parseInt(path.node.getAttribute('j'));\n\n      if (typeof w.config.chart.events.dataPointMouseEnter === 'function') {\n        w.config.chart.events.dataPointMouseEnter(e, this.ctx, {\n          seriesIndex: i,\n          dataPointIndex: j,\n          w: w\n        });\n      }\n\n      this.ctx.fireEvent('dataPointMouseEnter', [e, this.ctx, {\n        seriesIndex: i,\n        dataPointIndex: j,\n        w: w\n      }]);\n\n      if (w.config.states.active.filter.type !== 'none') {\n        if (path.node.getAttribute('selected') === 'true') {\n          return;\n        }\n      }\n\n      if (w.config.states.hover.filter.type !== 'none') {\n        if (w.config.states.active.filter.type !== 'none' && !w.globals.isTouchDevice) {\n          var hoverFilter = w.config.states.hover.filter;\n          filters.applyFilter(path, hoverFilter.type, hoverFilter.value);\n        }\n      }\n    }\n  }, {\n    key: \"pathMouseLeave\",\n    value: function pathMouseLeave(path, e) {\n      var w = this.w;\n      var filters = new Filters(this.ctx);\n      var i = parseInt(path.node.getAttribute('index'));\n      var j = parseInt(path.node.getAttribute('j'));\n\n      if (typeof w.config.chart.events.dataPointMouseLeave === 'function') {\n        w.config.chart.events.dataPointMouseLeave(e, this.ctx, {\n          seriesIndex: i,\n          dataPointIndex: j,\n          w: w\n        });\n      }\n\n      this.ctx.fireEvent('dataPointMouseLeave', [e, this.ctx, {\n        seriesIndex: i,\n        dataPointIndex: j,\n        w: w\n      }]);\n\n      if (w.config.states.active.filter.type !== 'none') {\n        if (path.node.getAttribute('selected') === 'true') {\n          return;\n        }\n      }\n\n      if (w.config.states.hover.filter.type !== 'none') {\n        filters.getDefaultFilter(path);\n      }\n    }\n  }, {\n    key: \"pathMouseDown\",\n    value: function pathMouseDown(path, e) {\n      var w = this.w;\n      var filters = new Filters(this.ctx);\n      var i = parseInt(path.node.getAttribute('index'));\n      var j = parseInt(path.node.getAttribute('j'));\n      var selected = 'false';\n\n      if (path.node.getAttribute('selected') === 'true') {\n        path.node.setAttribute('selected', 'false');\n\n        if (w.globals.selectedDataPoints[i].indexOf(j) > -1) {\n          var index = w.globals.selectedDataPoints[i].indexOf(j);\n          w.globals.selectedDataPoints[i].splice(index, 1);\n        }\n      } else {\n        if (!w.config.states.active.allowMultipleDataPointsSelection && w.globals.selectedDataPoints.length > 0) {\n          w.globals.selectedDataPoints = [];\n          var elPaths = w.globals.dom.Paper.select('.apexcharts-series path').members;\n          var elCircles = w.globals.dom.Paper.select('.apexcharts-series circle, .apexcharts-series rect').members;\n          elPaths.forEach(function (elPath) {\n            elPath.node.setAttribute('selected', 'false');\n            filters.getDefaultFilter(elPath);\n          });\n          elCircles.forEach(function (circle) {\n            circle.node.setAttribute('selected', 'false');\n            filters.getDefaultFilter(circle);\n          });\n        }\n\n        path.node.setAttribute('selected', 'true');\n        selected = 'true';\n\n        if (typeof w.globals.selectedDataPoints[i] === 'undefined') {\n          w.globals.selectedDataPoints[i] = [];\n        }\n\n        w.globals.selectedDataPoints[i].push(j);\n      }\n\n      if (selected === 'true') {\n        var activeFilter = w.config.states.active.filter;\n\n        if (activeFilter !== 'none') {\n          filters.applyFilter(path, activeFilter.type, activeFilter.value);\n        }\n      } else {\n        if (w.config.states.active.filter.type !== 'none') {\n          filters.getDefaultFilter(path);\n        }\n      }\n\n      if (typeof w.config.chart.events.dataPointSelection === 'function') {\n        w.config.chart.events.dataPointSelection(e, this.ctx, {\n          selectedDataPoints: w.globals.selectedDataPoints,\n          seriesIndex: i,\n          dataPointIndex: j,\n          w: w\n        });\n      }\n\n      this.ctx.fireEvent('dataPointSelection', [e, this.ctx, {\n        selectedDataPoints: w.globals.selectedDataPoints,\n        seriesIndex: i,\n        dataPointIndex: j,\n        w: w\n      }]); // if (this.w.config.chart.selection.selectedPoints !== undefined) {\n      //   this.w.config.chart.selection.selectedPoints(w.globals.selectedDataPoints)\n      // }\n    }\n  }, {\n    key: \"rotateAroundCenter\",\n    value: function rotateAroundCenter(el) {\n      var coord = el.getBBox();\n      var x = coord.x + coord.width / 2;\n      var y = coord.y + coord.height / 2;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"getTextRects\",\n    value: function getTextRects(text, fontSize, fontFamily, transform) {\n      var useBBox = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n      var w = this.w;\n      var virtualText = this.drawText({\n        x: -200,\n        y: -200,\n        text: text,\n        textAnchor: 'start',\n        fontSize: fontSize,\n        fontFamily: fontFamily,\n        foreColor: '#fff',\n        opacity: 0\n      });\n\n      if (transform) {\n        virtualText.attr('transform', transform);\n      }\n\n      w.globals.dom.Paper.add(virtualText);\n      var rect = virtualText.bbox();\n\n      if (!useBBox) {\n        rect = virtualText.node.getBoundingClientRect();\n      }\n\n      virtualText.remove();\n      return {\n        width: rect.width,\n        height: rect.height\n      };\n    }\n    /**\n     * append ... to long text\n     * http://stackoverflow.com/questions/9241315/trimming-text-to-a-given-pixel-width-in-svg\n     * @memberof Graphics\n     **/\n\n  }, {\n    key: \"placeTextWithEllipsis\",\n    value: function placeTextWithEllipsis(textObj, textString, width) {\n      textObj.textContent = textString;\n\n      if (textString.length > 0) {\n        // ellipsis is needed\n        if (textObj.getSubStringLength(0, textString.length) >= width) {\n          for (var x = textString.length - 3; x > 0; x -= 3) {\n            if (textObj.getSubStringLength(0, x) <= width) {\n              textObj.textContent = textString.substring(0, x) + '...';\n              return;\n            }\n          }\n\n          textObj.textContent = '...'; // can't place at all\n        }\n      }\n    }\n  }], [{\n    key: \"setAttrs\",\n    value: function setAttrs(el, attrs) {\n      for (var key in attrs) {\n        if (attrs.hasOwnProperty(key)) {\n          el.setAttribute(key, attrs[key]);\n        }\n      }\n    }\n  }]);\n\n  return Graphics;\n}();\n\nconst name = \"en\";\nconst options = {\n\tmonths: [\n\t\t\"January\",\n\t\t\"February\",\n\t\t\"March\",\n\t\t\"April\",\n\t\t\"May\",\n\t\t\"June\",\n\t\t\"July\",\n\t\t\"August\",\n\t\t\"September\",\n\t\t\"October\",\n\t\t\"November\",\n\t\t\"December\"\n\t],\n\tshortMonths: [\n\t\t\"Jan\",\n\t\t\"Feb\",\n\t\t\"Mar\",\n\t\t\"Apr\",\n\t\t\"May\",\n\t\t\"Jun\",\n\t\t\"Jul\",\n\t\t\"Aug\",\n\t\t\"Sep\",\n\t\t\"Oct\",\n\t\t\"Nov\",\n\t\t\"Dec\"\n\t],\n\tdays: [\n\t\t\"Sunday\",\n\t\t\"Monday\",\n\t\t\"Tuesday\",\n\t\t\"Wednesday\",\n\t\t\"Thursday\",\n\t\t\"Friday\",\n\t\t\"Saturday\"\n\t],\n\tshortDays: [\n\t\t\"Sun\",\n\t\t\"Mon\",\n\t\t\"Tue\",\n\t\t\"Wed\",\n\t\t\"Thu\",\n\t\t\"Fri\",\n\t\t\"Sat\"\n\t],\n\ttoolbar: {\n\t\texportToSVG: \"Download SVG\",\n\t\texportToPNG: \"Download PNG\",\n\t\tmenu: \"Menu\",\n\t\tselection: \"Selection\",\n\t\tselectionZoom: \"Selection Zoom\",\n\t\tzoomIn: \"Zoom In\",\n\t\tzoomOut: \"Zoom Out\",\n\t\tpan: \"Panning\",\n\t\treset: \"Reset Zoom\"\n\t}\n};\nvar en = {\n\tname: name,\n\toptions: options\n};\n\nvar Options =\n/*#__PURE__*/\nfunction () {\n  function Options() {\n    _classCallCheck(this, Options);\n\n    this.yAxis = {\n      show: true,\n      showAlways: false,\n      seriesName: undefined,\n      opposite: false,\n      reversed: false,\n      logarithmic: false,\n      tickAmount: undefined,\n      forceNiceScale: false,\n      max: undefined,\n      min: undefined,\n      floating: false,\n      decimalsInFloat: 2,\n      labels: {\n        show: true,\n        minWidth: 0,\n        maxWidth: 160,\n        offsetX: 0,\n        offsetY: 0,\n        align: undefined,\n        rotate: 0,\n        padding: 20,\n        style: {\n          colors: [],\n          fontSize: '11px',\n          fontFamily: undefined,\n          cssClass: ''\n        },\n        formatter: undefined\n      },\n      axisBorder: {\n        show: false,\n        color: '#78909C',\n        offsetX: 0,\n        offsetY: 0\n      },\n      axisTicks: {\n        show: false,\n        color: '#78909C',\n        width: 6,\n        offsetX: 0,\n        offsetY: 0\n      },\n      title: {\n        text: undefined,\n        rotate: 90,\n        offsetY: 0,\n        offsetX: 0,\n        style: {\n          color: undefined,\n          fontSize: '11px',\n          fontFamily: undefined,\n          cssClass: ''\n        }\n      },\n      tooltip: {\n        enabled: false,\n        offsetX: 0\n      },\n      crosshairs: {\n        show: true,\n        position: 'front',\n        stroke: {\n          color: '#b6b6b6',\n          width: 1,\n          dashArray: 0\n        }\n      }\n    };\n    this.xAxisAnnotation = {\n      x: 0,\n      x2: null,\n      strokeDashArray: 1,\n      fillColor: '#c2c2c2',\n      borderColor: '#c2c2c2',\n      opacity: 0.3,\n      offsetX: 0,\n      offsetY: 0,\n      label: {\n        borderColor: '#c2c2c2',\n        borderWidth: 1,\n        text: undefined,\n        textAnchor: 'middle',\n        orientation: 'vertical',\n        position: 'top',\n        offsetX: 0,\n        offsetY: 0,\n        style: {\n          background: '#fff',\n          color: undefined,\n          fontSize: '11px',\n          fontFamily: undefined,\n          cssClass: '',\n          padding: {\n            left: 5,\n            right: 5,\n            top: 2,\n            bottom: 2\n          }\n        }\n      }\n    };\n    this.yAxisAnnotation = {\n      y: 0,\n      y2: null,\n      strokeDashArray: 1,\n      fillColor: '#c2c2c2',\n      borderColor: '#c2c2c2',\n      opacity: 0.3,\n      offsetX: 0,\n      offsetY: 0,\n      yAxisIndex: 0,\n      label: {\n        borderColor: '#c2c2c2',\n        borderWidth: 1,\n        text: undefined,\n        textAnchor: 'end',\n        position: 'right',\n        offsetX: 0,\n        offsetY: -3,\n        style: {\n          background: '#fff',\n          color: undefined,\n          fontSize: '11px',\n          fontFamily: undefined,\n          cssClass: '',\n          padding: {\n            left: 5,\n            right: 5,\n            top: 0,\n            bottom: 2\n          }\n        }\n      }\n    };\n    this.pointAnnotation = {\n      x: 0,\n      y: null,\n      yAxisIndex: 0,\n      seriesIndex: 0,\n      marker: {\n        size: 0,\n        fillColor: '#fff',\n        strokeWidth: 2,\n        strokeColor: '#333',\n        shape: 'circle',\n        offsetX: 0,\n        offsetY: 0,\n        radius: 2,\n        cssClass: ''\n      },\n      label: {\n        borderColor: '#c2c2c2',\n        borderWidth: 1,\n        text: undefined,\n        textAnchor: 'middle',\n        offsetX: 0,\n        offsetY: -15,\n        style: {\n          background: '#fff',\n          color: undefined,\n          fontSize: '11px',\n          fontFamily: undefined,\n          cssClass: '',\n          padding: {\n            left: 5,\n            right: 5,\n            top: 0,\n            bottom: 2\n          }\n        }\n      },\n      customSVG: {\n        SVG: undefined,\n        cssClass: undefined,\n        offsetX: 0,\n        offsetY: 0\n      }\n    };\n  }\n\n  _createClass(Options, [{\n    key: \"init\",\n    value: function init() {\n      return {\n        annotations: {\n          position: 'front',\n          yaxis: [this.yAxisAnnotation],\n          xaxis: [this.xAxisAnnotation],\n          points: [this.pointAnnotation]\n        },\n        chart: {\n          animations: {\n            enabled: true,\n            easing: 'easeinout',\n            // linear, easeout, easein, easeinout, swing, bounce, elastic\n            speed: 800,\n            animateGradually: {\n              delay: 150,\n              enabled: true\n            },\n            dynamicAnimation: {\n              enabled: true,\n              speed: 350\n            }\n          },\n          background: 'transparent',\n          locales: [en],\n          defaultLocale: 'en',\n          dropShadow: {\n            enabled: false,\n            enabledSeries: undefined,\n            top: 2,\n            left: 2,\n            blur: 4,\n            color: '#000',\n            opacity: 0.35\n          },\n          events: {\n            animationEnd: undefined,\n            beforeMount: undefined,\n            mounted: undefined,\n            updated: undefined,\n            click: undefined,\n            legendClick: undefined,\n            markerClick: undefined,\n            selection: undefined,\n            dataPointSelection: undefined,\n            dataPointMouseEnter: undefined,\n            dataPointMouseLeave: undefined,\n            beforeZoom: undefined,\n            zoomed: undefined,\n            scrolled: undefined\n          },\n          foreColor: '#373d3f',\n          fontFamily: 'Helvetica, Arial, sans-serif',\n          height: 'auto',\n          parentHeightOffset: 15,\n          id: undefined,\n          group: undefined,\n          offsetX: 0,\n          offsetY: 0,\n          selection: {\n            enabled: false,\n            type: 'x',\n            // selectedPoints: undefined, // default datapoints that should be selected automatically\n            fill: {\n              color: '#24292e',\n              opacity: 0.1\n            },\n            stroke: {\n              width: 1,\n              color: '#24292e',\n              opacity: 0.4,\n              dashArray: 3\n            },\n            xaxis: {\n              min: undefined,\n              max: undefined\n            },\n            yaxis: {\n              min: undefined,\n              max: undefined\n            }\n          },\n          sparkline: {\n            enabled: false\n          },\n          brush: {\n            enabled: false,\n            autoScaleYaxis: false,\n            target: undefined\n          },\n          stacked: false,\n          stackType: 'normal',\n          toolbar: {\n            show: true,\n            tools: {\n              download: true,\n              selection: true,\n              zoom: true,\n              zoomin: true,\n              zoomout: true,\n              pan: true,\n              reset: true,\n              customIcons: []\n            },\n            autoSelected: 'zoom' // accepts -> zoom, pan, selection\n\n          },\n          type: 'line',\n          width: '100%',\n          zoom: {\n            enabled: true,\n            type: 'x',\n            // autoScaleYaxis: false, // TODO: rewrite the autoScaleY function\n            zoomedArea: {\n              fill: {\n                color: '#90CAF9',\n                opacity: 0.4\n              },\n              stroke: {\n                color: '#0D47A1',\n                opacity: 0.4,\n                width: 1\n              }\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            columnWidth: '70%',\n            // should be in percent 0 - 100\n            barHeight: '70%',\n            // should be in percent 0 - 100\n            distributed: false,\n            endingShape: 'flat',\n            colors: {\n              ranges: [],\n              backgroundBarColors: [],\n              backgroundBarOpacity: 1\n            },\n            dataLabels: {\n              maxItems: 100,\n              position: 'top' // top, center, bottom\n              // TODO: provide stackedLabels for stacked charts which gives additions of values\n\n            }\n          },\n          candlestick: {\n            colors: {\n              upward: '#00B746',\n              downward: '#EF403C'\n            },\n            wick: {\n              useFillColor: true\n            }\n          },\n          heatmap: {\n            radius: 2,\n            enableShades: true,\n            shadeIntensity: 0.5,\n            distributed: false,\n            colorScale: {\n              inverse: false,\n              ranges: [],\n              min: undefined,\n              max: undefined\n            }\n          },\n          radialBar: {\n            size: undefined,\n            inverseOrder: false,\n            startAngle: 0,\n            endAngle: 360,\n            offsetX: 0,\n            offsetY: 0,\n            hollow: {\n              margin: 5,\n              size: '50%',\n              background: 'transparent',\n              image: undefined,\n              imageWidth: 150,\n              imageHeight: 150,\n              imageOffsetX: 0,\n              imageOffsetY: 0,\n              imageClipped: true,\n              position: 'front',\n              dropShadow: {\n                enabled: false,\n                top: 0,\n                left: 0,\n                blur: 3,\n                color: '#000',\n                opacity: 0.5\n              }\n            },\n            track: {\n              show: true,\n              startAngle: undefined,\n              endAngle: undefined,\n              background: '#f2f2f2',\n              strokeWidth: '97%',\n              opacity: 1,\n              margin: 5,\n              // margin is in pixels\n              dropShadow: {\n                enabled: false,\n                top: 0,\n                left: 0,\n                blur: 3,\n                color: '#000',\n                opacity: 0.5\n              }\n            },\n            dataLabels: {\n              show: true,\n              name: {\n                show: true,\n                fontSize: '16px',\n                fontFamily: undefined,\n                color: undefined,\n                offsetY: 0\n              },\n              value: {\n                show: true,\n                fontSize: '14px',\n                fontFamily: undefined,\n                color: undefined,\n                offsetY: 16,\n                formatter: function formatter(val) {\n                  return val + '%';\n                }\n              },\n              total: {\n                show: false,\n                label: 'Total',\n                color: undefined,\n                formatter: function formatter(w) {\n                  return w.globals.seriesTotals.reduce(function (a, b) {\n                    return a + b;\n                  }, 0) / w.globals.series.length + '%';\n                }\n              }\n            }\n          },\n          rangeBar: {},\n          pie: {\n            size: undefined,\n            customScale: 1,\n            offsetX: 0,\n            offsetY: 0,\n            expandOnClick: true,\n            dataLabels: {\n              // These are the percentage values which are displayed on slice\n              offset: 0,\n              // offset by which labels will move outside\n              minAngleToShowLabel: 15\n            },\n            donut: {\n              size: '65%',\n              background: 'transparent',\n              labels: {\n                // These are the inner labels appearing inside donut\n                show: false,\n                name: {\n                  show: true,\n                  fontSize: '16px',\n                  fontFamily: undefined,\n                  color: undefined,\n                  offsetY: -10\n                },\n                value: {\n                  show: true,\n                  fontSize: '20px',\n                  fontFamily: undefined,\n                  color: undefined,\n                  offsetY: 10,\n                  formatter: function formatter(val) {\n                    return val;\n                  }\n                },\n                total: {\n                  show: false,\n                  label: 'Total',\n                  color: undefined,\n                  formatter: function formatter(w) {\n                    return w.globals.seriesTotals.reduce(function (a, b) {\n                      return a + b;\n                    }, 0);\n                  }\n                }\n              }\n            }\n          },\n          radar: {\n            size: undefined,\n            offsetX: 0,\n            offsetY: 0,\n            polygons: {\n              // strokeColor: '#e8e8e8', // should be deprecated in the minor version i.e 3.2\n              strokeColors: '#e8e8e8',\n              connectorColors: '#e8e8e8',\n              fill: {\n                colors: undefined\n              }\n            }\n          }\n        },\n        colors: undefined,\n        dataLabels: {\n          enabled: true,\n          enabledOnSeries: undefined,\n          formatter: function formatter(val) {\n            return val;\n          },\n          textAnchor: 'middle',\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            fontSize: '12px',\n            fontFamily: undefined,\n            colors: undefined\n          },\n          dropShadow: {\n            enabled: false,\n            top: 1,\n            left: 1,\n            blur: 1,\n            color: '#000',\n            opacity: 0.45\n          }\n        },\n        fill: {\n          type: 'solid',\n          colors: undefined,\n          // array of colors\n          opacity: 0.85,\n          gradient: {\n            shade: 'dark',\n            type: 'horizontal',\n            shadeIntensity: 0.5,\n            gradientToColors: undefined,\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 100],\n            colorStops: []\n          },\n          image: {\n            src: [],\n            width: undefined,\n            // optional\n            height: undefined // optional\n\n          },\n          pattern: {\n            style: 'sqaures',\n            // String | Array of Strings\n            width: 6,\n            height: 6,\n            strokeWidth: 2\n          }\n        },\n        grid: {\n          show: true,\n          borderColor: '#e0e0e0',\n          strokeDashArray: 0,\n          position: 'back',\n          xaxis: {\n            lines: {\n              show: false,\n              animate: false\n            }\n          },\n          yaxis: {\n            lines: {\n              show: true,\n              animate: true\n            }\n          },\n          row: {\n            colors: undefined,\n            // takes as array which will be repeated on rows\n            opacity: 0.5\n          },\n          column: {\n            colors: undefined,\n            // takes an array which will be repeated on columns\n            opacity: 0.5\n          },\n          padding: {\n            top: 0,\n            right: 10,\n            bottom: 0,\n            left: 12\n          }\n        },\n        labels: [],\n        legend: {\n          show: true,\n          showForSingleSeries: false,\n          showForNullSeries: true,\n          showForZeroSeries: true,\n          floating: false,\n          position: 'bottom',\n          // whether to position legends in 1 of 4\n          // direction - top, bottom, left, right\n          horizontalAlign: 'center',\n          // when position top/bottom, you can specify whether to align legends left, right or center\n          fontSize: '12px',\n          fontFamily: undefined,\n          width: undefined,\n          height: undefined,\n          formatter: undefined,\n          offsetX: -20,\n          offsetY: 0,\n          labels: {\n            colors: undefined,\n            useSeriesColors: false\n          },\n          markers: {\n            width: 12,\n            height: 12,\n            strokeWidth: 0,\n            strokeColor: '#fff',\n            radius: 12,\n            customHTML: undefined,\n            offsetX: 0,\n            offsetY: 0,\n            onClick: undefined\n          },\n          itemMargin: {\n            horizontal: 0,\n            vertical: 5\n          },\n          onItemClick: {\n            toggleDataSeries: true\n          },\n          onItemHover: {\n            highlightDataSeries: true\n          }\n        },\n        markers: {\n          discrete: [],\n          size: 0,\n          colors: undefined,\n          //strokeColor: '#fff', // TODO: deprecate in major version 4.0\n          strokeColors: '#fff',\n          strokeWidth: 2,\n          strokeOpacity: 0.9,\n          fillOpacity: 1,\n          shape: 'circle',\n          radius: 2,\n          offsetX: 0,\n          offsetY: 0,\n          hover: {\n            size: undefined,\n            sizeOffset: 3\n          }\n        },\n        noData: {\n          text: undefined,\n          align: 'center',\n          verticalAlign: 'middle',\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            color: undefined,\n            fontSize: '14px',\n            fontFamily: undefined\n          }\n        },\n        responsive: [],\n        // breakpoints should follow ascending order 400, then 700, then 1000\n        series: undefined,\n        states: {\n          normal: {\n            filter: {\n              type: 'none',\n              value: 0\n            }\n          },\n          hover: {\n            filter: {\n              type: 'lighten',\n              value: 0.15\n            }\n          },\n          active: {\n            allowMultipleDataPointsSelection: false,\n            filter: {\n              type: 'darken',\n              value: 0.65\n            }\n          }\n        },\n        title: {\n          text: undefined,\n          align: 'left',\n          margin: 10,\n          offsetX: 0,\n          offsetY: 0,\n          floating: false,\n          style: {\n            fontSize: '14px',\n            fontFamily: undefined,\n            color: undefined\n          }\n        },\n        subtitle: {\n          text: undefined,\n          align: 'left',\n          margin: 10,\n          offsetX: 0,\n          offsetY: 30,\n          floating: false,\n          style: {\n            fontSize: '12px',\n            fontFamily: undefined,\n            color: undefined\n          }\n        },\n        stroke: {\n          show: true,\n          curve: 'smooth',\n          // \"smooth\" / \"straight\" / \"stepline\"\n          lineCap: 'butt',\n          // round, butt , square\n          width: 2,\n          colors: undefined,\n          // array of colors\n          dashArray: 0 // single value or array of values\n\n        },\n        tooltip: {\n          enabled: true,\n          shared: true,\n          followCursor: false,\n          // when disabled, the tooltip will show on top of the series instead of mouse position\n          intersect: false,\n          // when enabled, tooltip will only show when user directly hovers over point\n          inverseOrder: false,\n          custom: undefined,\n          fillSeriesColor: false,\n          theme: 'light',\n          style: {\n            fontSize: '12px',\n            fontFamily: undefined\n          },\n          onDatasetHover: {\n            highlightDataSeries: false\n          },\n          x: {\n            // x value\n            show: true,\n            format: 'dd MMM',\n            // dd/MM, dd MMM yy, dd MMM yyyy\n            formatter: undefined // a custom user supplied formatter function\n\n          },\n          y: {\n            formatter: undefined,\n            title: {\n              formatter: function formatter(seriesName) {\n                return seriesName;\n              }\n            }\n          },\n          z: {\n            formatter: undefined,\n            title: 'Size: '\n          },\n          marker: {\n            show: true\n          },\n          items: {\n            display: 'flex'\n          },\n          fixed: {\n            enabled: false,\n            position: 'topRight',\n            // topRight, topLeft, bottomRight, bottomLeft\n            offsetX: 0,\n            offsetY: 0\n          }\n        },\n        xaxis: {\n          type: 'category',\n          categories: [],\n          offsetX: 0,\n          offsetY: 0,\n          labels: {\n            show: true,\n            rotate: -45,\n            rotateAlways: false,\n            hideOverlappingLabels: true,\n            trim: true,\n            minHeight: undefined,\n            maxHeight: 120,\n            showDuplicates: true,\n            style: {\n              colors: [],\n              fontSize: '12px',\n              fontFamily: undefined,\n              cssClass: ''\n            },\n            offsetX: 0,\n            offsetY: 0,\n            format: undefined,\n            formatter: undefined,\n            // custom formatter function which will override format\n            datetimeFormatter: {\n              year: 'yyyy',\n              month: \"MMM 'yy\",\n              day: 'dd MMM',\n              hour: 'HH:mm',\n              minute: 'HH:mm:ss'\n            }\n          },\n          axisBorder: {\n            show: true,\n            color: '#78909C',\n            width: '100%',\n            height: 1,\n            offsetX: 0,\n            offsetY: 0\n          },\n          axisTicks: {\n            show: true,\n            color: '#78909C',\n            height: 6,\n            offsetX: 0,\n            offsetY: 0\n          },\n          tickAmount: undefined,\n          tickPlacement: 'on',\n          min: undefined,\n          max: undefined,\n          range: undefined,\n          floating: false,\n          position: 'bottom',\n          title: {\n            text: undefined,\n            offsetX: 0,\n            offsetY: 0,\n            style: {\n              color: undefined,\n              fontSize: '12px',\n              fontFamily: undefined,\n              cssClass: ''\n            }\n          },\n          crosshairs: {\n            show: true,\n            width: 1,\n            // tickWidth/barWidth or an integer\n            position: 'back',\n            opacity: 0.9,\n            stroke: {\n              color: '#b6b6b6',\n              width: 1,\n              dashArray: 3\n            },\n            fill: {\n              type: 'solid',\n              // solid, gradient\n              color: '#B1B9C4',\n              gradient: {\n                colorFrom: '#D8E3F0',\n                colorTo: '#BED1E6',\n                stops: [0, 100],\n                opacityFrom: 0.4,\n                opacityTo: 0.5\n              }\n            },\n            dropShadow: {\n              enabled: false,\n              left: 0,\n              top: 0,\n              blur: 1,\n              opacity: 0.4\n            }\n          },\n          tooltip: {\n            enabled: true,\n            offsetY: 0,\n            formatter: undefined,\n            style: {\n              fontSize: '12px',\n              fontFamily: undefined\n            }\n          }\n        },\n        yaxis: this.yAxis,\n        theme: {\n          mode: 'light',\n          palette: 'palette1',\n          // If defined, it will overwrite globals.colors variable\n          monochrome: {\n            // monochrome allows you to select just 1 color and fill out the rest with light/dark shade (intensity can be selected)\n            enabled: false,\n            color: '#008FFB',\n            shadeTo: 'light',\n            shadeIntensity: 0.65\n          }\n        }\n      };\n    }\n  }]);\n\n  return Options;\n}();\n\n/**\n * ApexCharts Annotations Class for drawing lines/rects on both xaxis and yaxis.\n *\n * @module Annotations\n **/\n\nvar Annotations =\n/*#__PURE__*/\nfunction () {\n  function Annotations(ctx) {\n    _classCallCheck(this, Annotations);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.graphics = new Graphics(this.ctx);\n\n    if (this.w.globals.isBarHorizontal) {\n      this.invertAxis = true;\n    }\n\n    this.xDivision = this.w.globals.gridWidth / this.w.globals.dataPoints;\n  }\n\n  _createClass(Annotations, [{\n    key: \"drawAnnotations\",\n    value: function drawAnnotations() {\n      var w = this.w;\n\n      if (w.globals.axisCharts) {\n        var yAnnotations = this.drawYAxisAnnotations();\n        var xAnnotations = this.drawXAxisAnnotations();\n        var pointAnnotations = this.drawPointAnnotations();\n        var initialAnim = w.config.chart.animations.enabled;\n        var annoArray = [yAnnotations, xAnnotations, pointAnnotations];\n        var annoElArray = [xAnnotations.node, yAnnotations.node, pointAnnotations.node];\n\n        for (var i = 0; i < 3; i++) {\n          w.globals.dom.elGraphical.add(annoArray[i]);\n\n          if (initialAnim && !w.globals.resized && !w.globals.dataChanged) {\n            annoElArray[i].classList.add('hidden');\n          }\n\n          w.globals.delayedElements.push({\n            el: annoElArray[i],\n            index: 0\n          });\n        } // after placing the annotations on svg, set any vertically placed annotations\n\n\n        this.setOrientations(w.config.annotations.xaxis); // background sizes needs to be calculated after text is drawn, so calling them last\n\n        this.annotationsBackground();\n      }\n    }\n  }, {\n    key: \"addXaxisAnnotation\",\n    value: function addXaxisAnnotation(anno, parent, index) {\n      var w = this.w;\n      var min = this.invertAxis ? w.globals.minY : w.globals.minX;\n      var range = this.invertAxis ? w.globals.yRange[0] : w.globals.xRange;\n      var x1 = (anno.x - min) / (range / w.globals.gridWidth);\n\n      if (w.config.xaxis.type === 'category' || w.config.xaxis.convertedCatToNumeric) {\n        var catIndex = w.globals.labels.indexOf(anno.x);\n        var xLabel = w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g text:nth-child(' + (catIndex + 1) + ')');\n\n        if (xLabel) {\n          x1 = parseFloat(xLabel.getAttribute('x'));\n        }\n      }\n\n      var strokeDashArray = anno.strokeDashArray;\n      if (x1 < 0 || x1 > w.globals.gridWidth) return;\n\n      if (anno.x2 === null) {\n        var line = this.graphics.drawLine(x1 + anno.offsetX, // x1\n        0 + anno.offsetY, // y1\n        x1 + anno.offsetX, // x2\n        w.globals.gridHeight + anno.offsetY, // y2\n        anno.borderColor, // lineColor\n        strokeDashArray //dashArray\n        );\n        parent.appendChild(line.node);\n      } else {\n        var x2 = (anno.x2 - min) / (range / w.globals.gridWidth);\n\n        if (x2 < x1) {\n          var temp = x1;\n          x1 = x2;\n          x2 = temp;\n        }\n\n        var rect = this.graphics.drawRect(x1 + anno.offsetX, // x1\n        0 + anno.offsetY, // y1\n        x2 - x1, // x2\n        w.globals.gridHeight + anno.offsetY, // y2\n        0, // radius\n        anno.fillColor, // color\n        anno.opacity, // opacity,\n        1, // strokeWidth\n        anno.borderColor, // strokeColor\n        strokeDashArray // stokeDashArray\n        );\n        parent.appendChild(rect.node);\n      }\n\n      var textY = anno.label.position === 'top' ? -3 : w.globals.gridHeight;\n      var text = anno.label.text ? anno.label.text : '';\n      var elText = this.graphics.drawText({\n        x: x1 + anno.label.offsetX,\n        y: textY + anno.label.offsetY,\n        text: text,\n        textAnchor: anno.label.textAnchor,\n        fontSize: anno.label.style.fontSize,\n        fontFamily: anno.label.style.fontFamily,\n        foreColor: anno.label.style.color,\n        cssClass: 'apexcharts-xaxis-annotation-label ' + anno.label.style.cssClass\n      });\n      elText.attr({\n        rel: index\n      });\n      parent.appendChild(elText.node);\n    }\n  }, {\n    key: \"drawXAxisAnnotations\",\n    value: function drawXAxisAnnotations() {\n      var _this = this;\n\n      var w = this.w;\n      var elg = this.graphics.group({\n        class: 'apexcharts-xaxis-annotations'\n      });\n      w.config.annotations.xaxis.map(function (anno, index) {\n        _this.addXaxisAnnotation(anno, elg.node, index);\n      });\n      return elg;\n    }\n  }, {\n    key: \"addYaxisAnnotation\",\n    value: function addYaxisAnnotation(anno, parent, index) {\n      var w = this.w;\n      var strokeDashArray = anno.strokeDashArray;\n      var y1;\n      var y2;\n\n      if (this.invertAxis) {\n        var catIndex = w.globals.labels.indexOf(anno.y);\n        var xLabel = w.globals.dom.baseEl.querySelector('.apexcharts-yaxis-texts-g text:nth-child(' + (catIndex + 1) + ')');\n\n        if (xLabel) {\n          y1 = parseFloat(xLabel.getAttribute('y'));\n        }\n      } else {\n        y1 = w.globals.gridHeight - (anno.y - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n\n        if (w.config.yaxis[anno.yAxisIndex] && w.config.yaxis[anno.yAxisIndex].reversed) {\n          y1 = (anno.y - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n        }\n      }\n\n      var text = anno.label.text ? anno.label.text : '';\n\n      if (anno.y2 === null) {\n        var line = this.graphics.drawLine(0 + anno.offsetX, // x1\n        y1 + anno.offsetY, // y1\n        w.globals.gridWidth + anno.offsetX, // x2\n        y1 + anno.offsetY, // y2\n        anno.borderColor, // lineColor\n        strokeDashArray // dashArray\n        );\n        parent.appendChild(line.node);\n      } else {\n        if (this.invertAxis) {\n          var _catIndex = w.globals.labels.indexOf(anno.y2);\n\n          var _xLabel = w.globals.dom.baseEl.querySelector('.apexcharts-yaxis-texts-g text:nth-child(' + (_catIndex + 1) + ')');\n\n          if (_xLabel) {\n            y2 = parseFloat(_xLabel.getAttribute('y'));\n          }\n        } else {\n          y2 = w.globals.gridHeight - (anno.y2 - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n\n          if (w.config.yaxis[anno.yAxisIndex] && w.config.yaxis[anno.yAxisIndex].reversed) {\n            y2 = (anno.y2 - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n          }\n        }\n\n        if (y2 > y1) {\n          var temp = y1;\n          y1 = y2;\n          y2 = temp;\n        }\n\n        var rect = this.graphics.drawRect(0 + anno.offsetX, // x1\n        y2 + anno.offsetY, // y1\n        w.globals.gridWidth + anno.offsetX, // x2\n        y1 - y2, // y2\n        0, // radius\n        anno.fillColor, // color\n        anno.opacity, // opacity,\n        1, // strokeWidth\n        anno.borderColor, // strokeColor\n        strokeDashArray // stokeDashArray\n        );\n        parent.appendChild(rect.node);\n      }\n\n      var textX = anno.label.position === 'right' ? w.globals.gridWidth : 0;\n      var elText = this.graphics.drawText({\n        x: textX + anno.label.offsetX,\n        y: (y2 || y1) + anno.label.offsetY - 3,\n        text: text,\n        textAnchor: anno.label.textAnchor,\n        fontSize: anno.label.style.fontSize,\n        fontFamily: anno.label.style.fontFamily,\n        foreColor: anno.label.style.color,\n        cssClass: 'apexcharts-yaxis-annotation-label ' + anno.label.style.cssClass\n      });\n      elText.attr({\n        rel: index\n      });\n      parent.appendChild(elText.node);\n    }\n  }, {\n    key: \"drawYAxisAnnotations\",\n    value: function drawYAxisAnnotations() {\n      var _this2 = this;\n\n      var w = this.w;\n      var elg = this.graphics.group({\n        class: 'apexcharts-yaxis-annotations'\n      });\n      w.config.annotations.yaxis.map(function (anno, index) {\n        _this2.addYaxisAnnotation(anno, elg.node, index);\n      });\n      return elg;\n    }\n  }, {\n    key: \"clearAnnotations\",\n    value: function clearAnnotations(ctx) {\n      var w = ctx.w;\n      var annos = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations');\n      annos = Utils.listToArray(annos);\n      annos.forEach(function (a) {\n        while (a.firstChild) {\n          a.removeChild(a.firstChild);\n        }\n      });\n    }\n  }, {\n    key: \"addPointAnnotation\",\n    value: function addPointAnnotation(anno, parent, index) {\n      var w = this.w;\n      var x = 0;\n      var y = 0;\n      var pointY = 0;\n\n      if (this.invertAxis) {\n        console.warn('Point annotation is not supported in horizontal bar charts.');\n      }\n\n      if (typeof anno.x === 'string') {\n        var catIndex = w.globals.labels.indexOf(anno.x);\n        var xLabel = w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g text:nth-child(' + (catIndex + 1) + ')');\n        var xPos = parseFloat(xLabel.getAttribute('x'));\n        x = xPos;\n        var annoY = anno.y;\n\n        if (anno.y === null) {\n          annoY = w.globals.series[anno.seriesIndex][catIndex];\n        }\n\n        y = w.globals.gridHeight - (annoY - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight) - parseInt(anno.label.style.fontSize) - anno.marker.size;\n        pointY = w.globals.gridHeight - (annoY - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n\n        if (w.config.yaxis[anno.yAxisIndex] && w.config.yaxis[anno.yAxisIndex].reversed) {\n          y = (annoY - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight) + parseInt(anno.label.style.fontSize) + anno.marker.size;\n          pointY = (annoY - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n        }\n      } else {\n        x = (anno.x - w.globals.minX) / (w.globals.xRange / w.globals.gridWidth);\n        y = w.globals.gridHeight - (parseFloat(anno.y) - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight) - parseInt(anno.label.style.fontSize) - anno.marker.size;\n        pointY = w.globals.gridHeight - (anno.y - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n\n        if (w.config.yaxis[anno.yAxisIndex] && w.config.yaxis[anno.yAxisIndex].reversed) {\n          y = (parseFloat(anno.y) - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight) - parseInt(anno.label.style.fontSize) - anno.marker.size;\n          pointY = (anno.y - w.globals.minYArr[anno.yAxisIndex]) / (w.globals.yRange[anno.yAxisIndex] / w.globals.gridHeight);\n        }\n      }\n\n      if (x < 0 || x > w.globals.gridWidth) return;\n      var optsPoints = {\n        pSize: anno.marker.size,\n        pWidth: anno.marker.strokeWidth,\n        pointFillColor: anno.marker.fillColor,\n        pointStrokeColor: anno.marker.strokeColor,\n        shape: anno.marker.shape,\n        radius: anno.marker.radius,\n        class: 'apexcharts-point-annotation-marker ' + anno.marker.cssClass\n      };\n      var point = this.graphics.drawMarker(x + anno.marker.offsetX, pointY + anno.marker.offsetY, optsPoints);\n      parent.appendChild(point.node);\n      var text = anno.label.text ? anno.label.text : '';\n      var elText = this.graphics.drawText({\n        x: x + anno.label.offsetX,\n        y: y + anno.label.offsetY,\n        text: text,\n        textAnchor: anno.label.textAnchor,\n        fontSize: anno.label.style.fontSize,\n        fontFamily: anno.label.style.fontFamily,\n        foreColor: anno.label.style.color,\n        cssClass: 'apexcharts-point-annotation-label ' + anno.label.style.cssClass\n      });\n      elText.attr({\n        rel: index\n      });\n      parent.appendChild(elText.node);\n\n      if (anno.customSVG.SVG) {\n        var g = this.graphics.group({\n          class: 'apexcharts-point-annotations-custom-svg ' + anno.customSVG.cssClass\n        });\n        g.attr({\n          transform: \"translate(\".concat(x + anno.customSVG.offsetX, \", \").concat(y + anno.customSVG.offsetY, \")\")\n        });\n        g.node.innerHTML = anno.customSVG.SVG;\n        parent.appendChild(g.node);\n      }\n    }\n  }, {\n    key: \"drawPointAnnotations\",\n    value: function drawPointAnnotations() {\n      var _this3 = this;\n\n      var w = this.w;\n      var elg = this.graphics.group({\n        class: 'apexcharts-point-annotations'\n      });\n      w.config.annotations.points.map(function (anno, index) {\n        _this3.addPointAnnotation(anno, elg.node, index);\n      });\n      return elg;\n    }\n  }, {\n    key: \"setOrientations\",\n    value: function setOrientations(annos) {\n      var _this4 = this;\n\n      var annoIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var w = this.w;\n      annos.map(function (anno, index) {\n        if (anno.label.orientation === 'vertical') {\n          var i = annoIndex !== null ? annoIndex : index;\n          var xAnno = w.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(i, \"']\"));\n\n          if (xAnno !== null) {\n            var xAnnoCoord = xAnno.getBoundingClientRect();\n            xAnno.setAttribute('x', parseFloat(xAnno.getAttribute('x')) - xAnnoCoord.height + 4);\n\n            if (anno.label.position === 'top') {\n              xAnno.setAttribute('y', parseFloat(xAnno.getAttribute('y')) + xAnnoCoord.width);\n            } else {\n              xAnno.setAttribute('y', parseFloat(xAnno.getAttribute('y')) - xAnnoCoord.width);\n            }\n\n            var annoRotatingCenter = _this4.graphics.rotateAroundCenter(xAnno);\n\n            var x = annoRotatingCenter.x;\n            var y = annoRotatingCenter.y;\n            xAnno.setAttribute('transform', \"rotate(-90 \".concat(x, \" \").concat(y, \")\"));\n          }\n        }\n      });\n    }\n  }, {\n    key: \"addBackgroundToAnno\",\n    value: function addBackgroundToAnno(annoEl, anno) {\n      var w = this.w;\n      var elGridRect = w.globals.dom.baseEl.querySelector('.apexcharts-grid').getBoundingClientRect();\n      var coords = annoEl.getBoundingClientRect();\n      var pleft = anno.label.style.padding.left;\n      var pright = anno.label.style.padding.right;\n      var ptop = anno.label.style.padding.top;\n      var pbottom = anno.label.style.padding.bottom;\n\n      if (anno.label.orientation === 'vertical') {\n        ptop = anno.label.style.padding.left;\n        pbottom = anno.label.style.padding.right;\n        pleft = anno.label.style.padding.top;\n        pright = anno.label.style.padding.bottom;\n      }\n\n      var x1 = coords.left - elGridRect.left - pleft;\n      var y1 = coords.top - elGridRect.top - ptop;\n      var elRect = this.graphics.drawRect(x1, y1, coords.width + pleft + pright, coords.height + ptop + pbottom, 0, anno.label.style.background, 1, anno.label.borderWidth, anno.label.borderColor, 0);\n      return elRect;\n    }\n  }, {\n    key: \"annotationsBackground\",\n    value: function annotationsBackground() {\n      var _this5 = this;\n\n      var w = this.w;\n\n      var add = function add(anno, i, type) {\n        var annoLabel = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-annotations .apexcharts-\").concat(type, \"-annotation-label[rel='\").concat(i, \"']\"));\n\n        if (annoLabel) {\n          var parent = annoLabel.parentNode;\n\n          var elRect = _this5.addBackgroundToAnno(annoLabel, anno);\n\n          parent.insertBefore(elRect.node, annoLabel);\n        }\n      };\n\n      w.config.annotations.xaxis.map(function (anno, i) {\n        add(anno, i, 'xaxis');\n      });\n      w.config.annotations.yaxis.map(function (anno, i) {\n        add(anno, i, 'yaxis');\n      });\n      w.config.annotations.points.map(function (anno, i) {\n        add(anno, i, 'point');\n      });\n    }\n  }, {\n    key: \"addText\",\n    value: function addText(params, pushToMemory, context) {\n      var x = params.x,\n          y = params.y,\n          text = params.text,\n          textAnchor = params.textAnchor,\n          _params$appendTo = params.appendTo,\n          appendTo = _params$appendTo === void 0 ? '.apexcharts-inner' : _params$appendTo,\n          foreColor = params.foreColor,\n          fontSize = params.fontSize,\n          fontFamily = params.fontFamily,\n          cssClass = params.cssClass,\n          backgroundColor = params.backgroundColor,\n          borderWidth = params.borderWidth,\n          strokeDashArray = params.strokeDashArray,\n          radius = params.radius,\n          borderColor = params.borderColor,\n          _params$paddingLeft = params.paddingLeft,\n          paddingLeft = _params$paddingLeft === void 0 ? 4 : _params$paddingLeft,\n          _params$paddingRight = params.paddingRight,\n          paddingRight = _params$paddingRight === void 0 ? 4 : _params$paddingRight,\n          _params$paddingBottom = params.paddingBottom,\n          paddingBottom = _params$paddingBottom === void 0 ? 2 : _params$paddingBottom,\n          _params$paddingTop = params.paddingTop,\n          paddingTop = _params$paddingTop === void 0 ? 2 : _params$paddingTop;\n      var me = context;\n      var w = me.w;\n      var parentNode = w.globals.dom.baseEl.querySelector(appendTo);\n      var elText = this.graphics.drawText({\n        x: x,\n        y: y,\n        text: text,\n        textAnchor: textAnchor || 'start',\n        fontSize: fontSize || '12px',\n        fontFamily: fontFamily || w.config.chart.fontFamily,\n        foreColor: foreColor || w.config.chart.foreColor,\n        cssClass:  true ? cssClass : undefined\n      });\n      parentNode.appendChild(elText.node);\n      var textRect = elText.bbox();\n      var elRect = this.graphics.drawRect(textRect.x - paddingLeft, textRect.y - paddingTop, textRect.width + paddingLeft + paddingRight, textRect.height + paddingBottom + paddingTop, radius, backgroundColor, 1, borderWidth, borderColor, strokeDashArray);\n      elText.before(elRect);\n\n      if (pushToMemory) {\n        w.globals.memory.methodsToExec.push({\n          context: me,\n          method: me.addText,\n          params: {\n            x: x,\n            y: y,\n            text: text,\n            textAnchor: textAnchor,\n            appendTo: appendTo,\n            foreColor: foreColor,\n            fontSize: fontSize,\n            cssClass: cssClass,\n            backgroundColor: backgroundColor,\n            borderWidth: borderWidth,\n            strokeDashArray: strokeDashArray,\n            radius: radius,\n            borderColor: borderColor,\n            paddingLeft: paddingLeft,\n            paddingRight: paddingRight,\n            paddingBottom: paddingBottom,\n            paddingTop: paddingTop\n          }\n        });\n      }\n\n      return context;\n    }\n  }, {\n    key: \"addPointAnnotationExternal\",\n    value: function addPointAnnotationExternal(params, pushToMemory, context) {\n      this.addAnnotationExternal({\n        params: params,\n        pushToMemory: pushToMemory,\n        context: context,\n        type: 'point',\n        contextMethod: context.addPointAnnotation\n      });\n      return context;\n    }\n  }, {\n    key: \"addYaxisAnnotationExternal\",\n    value: function addYaxisAnnotationExternal(params, pushToMemory, context) {\n      this.addAnnotationExternal({\n        params: params,\n        pushToMemory: pushToMemory,\n        context: context,\n        type: 'yaxis',\n        contextMethod: context.addYaxisAnnotation\n      });\n      return context;\n    } // The addXaxisAnnotation method requires a parent class, and user calling this method externally on the chart instance may not specify parent, hence a different method\n\n  }, {\n    key: \"addXaxisAnnotationExternal\",\n    value: function addXaxisAnnotationExternal(params, pushToMemory, context) {\n      this.addAnnotationExternal({\n        params: params,\n        pushToMemory: pushToMemory,\n        context: context,\n        type: 'xaxis',\n        contextMethod: context.addXaxisAnnotation\n      });\n      return context;\n    }\n  }, {\n    key: \"addAnnotationExternal\",\n    value: function addAnnotationExternal(_ref) {\n      var params = _ref.params,\n          pushToMemory = _ref.pushToMemory,\n          context = _ref.context,\n          type = _ref.type,\n          contextMethod = _ref.contextMethod;\n      var me = context;\n      var w = me.w;\n      var parent = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-annotations\"));\n      var index = parent.childNodes.length + 1;\n      var opt = new Options();\n      var axesAnno = Object.assign({}, type === 'xaxis' ? opt.xAxisAnnotation : type === 'yaxis' ? opt.yAxisAnnotation : opt.pointAnnotation);\n      var anno = Utils.extend(axesAnno, params);\n\n      switch (type) {\n        case 'xaxis':\n          this.addXaxisAnnotation(anno, parent, index);\n          break;\n\n        case 'yaxis':\n          this.addYaxisAnnotation(anno, parent, index);\n          break;\n\n        case 'point':\n          this.addPointAnnotation(anno, parent, index);\n          break;\n      } // add background\n\n\n      var axesAnnoLabel = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-annotations .apexcharts-\").concat(type, \"-annotation-label[rel='\").concat(index, \"']\"));\n      var elRect = this.addBackgroundToAnno(axesAnnoLabel, anno);\n      parent.insertBefore(elRect.node, axesAnnoLabel);\n\n      if (pushToMemory) {\n        w.globals.memory.methodsToExec.push({\n          context: me,\n          method: contextMethod,\n          params: params\n        });\n      }\n\n      return context;\n    }\n  }]);\n\n  return Annotations;\n}();\n\n/**\n * DateTime Class to manipulate datetime values.\n *\n * @module DateTime\n **/\n\nvar DateTime =\n/*#__PURE__*/\nfunction () {\n  function DateTime(ctx) {\n    _classCallCheck(this, DateTime);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.months31 = [1, 3, 5, 7, 8, 10, 12];\n    this.months30 = [2, 4, 6, 9, 11];\n    this.daysCntOfYear = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  }\n\n  _createClass(DateTime, [{\n    key: \"isValidDate\",\n    value: function isValidDate(date) {\n      return !isNaN(this.parseDate(date));\n    }\n  }, {\n    key: \"getUTCTimeStamp\",\n    value: function getUTCTimeStamp(dateStr) {\n      if (!Date.parse(dateStr)) {\n        return dateStr;\n      }\n\n      return new Date(new Date(dateStr).toISOString().substr(0, 25)).getTime();\n    }\n  }, {\n    key: \"parseDate\",\n    value: function parseDate(dateStr) {\n      var parsed = Date.parse(dateStr);\n\n      if (!isNaN(parsed)) {\n        return this.getUTCTimeStamp(dateStr);\n      }\n\n      var output = Date.parse(dateStr.replace(/-/g, '/').replace(/[a-z]+/gi, ' '));\n      output = this.getUTCTimeStamp(output);\n      return output;\n    } // https://stackoverflow.com/a/11252167/6495043\n\n  }, {\n    key: \"treatAsUtc\",\n    value: function treatAsUtc(dateStr) {\n      var result = new Date(dateStr);\n      result.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n      return result;\n    } // http://stackoverflow.com/questions/14638018/current-time-formatting-with-javascript#answer-14638191\n\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(date, format) {\n      var utc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var convertToUTC = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var locale = this.w.globals.locale;\n      var MMMM = ['\\x00'].concat(_toConsumableArray(locale.months));\n      var MMM = ['\\x01'].concat(_toConsumableArray(locale.shortMonths));\n      var dddd = ['\\x02'].concat(_toConsumableArray(locale.days));\n      var ddd = ['\\x03'].concat(_toConsumableArray(locale.shortDays));\n\n      function ii(i, len) {\n        var s = i + '';\n        len = len || 2;\n\n        while (s.length < len) {\n          s = '0' + s;\n        }\n\n        return s;\n      }\n\n      if (convertToUTC) {\n        date = this.treatAsUtc(date);\n      }\n\n      var y = utc ? date.getUTCFullYear() : date.getFullYear();\n      format = format.replace(/(^|[^\\\\])yyyy+/g, '$1' + y);\n      format = format.replace(/(^|[^\\\\])yy/g, '$1' + y.toString().substr(2, 2));\n      format = format.replace(/(^|[^\\\\])y/g, '$1' + y);\n      var M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n      format = format.replace(/(^|[^\\\\])MMMM+/g, '$1' + MMMM[0]);\n      format = format.replace(/(^|[^\\\\])MMM/g, '$1' + MMM[0]);\n      format = format.replace(/(^|[^\\\\])MM/g, '$1' + ii(M));\n      format = format.replace(/(^|[^\\\\])M/g, '$1' + M);\n      var d = utc ? date.getUTCDate() : date.getDate();\n      format = format.replace(/(^|[^\\\\])dddd+/g, '$1' + dddd[0]);\n      format = format.replace(/(^|[^\\\\])ddd/g, '$1' + ddd[0]);\n      format = format.replace(/(^|[^\\\\])dd/g, '$1' + ii(d));\n      format = format.replace(/(^|[^\\\\])d/g, '$1' + d);\n      var H = utc ? date.getUTCHours() : date.getHours();\n      format = format.replace(/(^|[^\\\\])HH+/g, '$1' + ii(H));\n      format = format.replace(/(^|[^\\\\])H/g, '$1' + H);\n      var h = H > 12 ? H - 12 : H === 0 ? 12 : H;\n      format = format.replace(/(^|[^\\\\])hh+/g, '$1' + ii(h));\n      format = format.replace(/(^|[^\\\\])h/g, '$1' + h);\n      var m = utc ? date.getUTCMinutes() : date.getMinutes();\n      format = format.replace(/(^|[^\\\\])mm+/g, '$1' + ii(m));\n      format = format.replace(/(^|[^\\\\])m/g, '$1' + m);\n      var s = utc ? date.getUTCSeconds() : date.getSeconds();\n      format = format.replace(/(^|[^\\\\])ss+/g, '$1' + ii(s));\n      format = format.replace(/(^|[^\\\\])s/g, '$1' + s);\n      var f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n      format = format.replace(/(^|[^\\\\])fff+/g, '$1' + ii(f, 3));\n      f = Math.round(f / 10);\n      format = format.replace(/(^|[^\\\\])ff/g, '$1' + ii(f));\n      f = Math.round(f / 10);\n      format = format.replace(/(^|[^\\\\])f/g, '$1' + f);\n      var T = H < 12 ? 'AM' : 'PM';\n      format = format.replace(/(^|[^\\\\])TT+/g, '$1' + T);\n      format = format.replace(/(^|[^\\\\])T/g, '$1' + T.charAt(0));\n      var t = T.toLowerCase();\n      format = format.replace(/(^|[^\\\\])tt+/g, '$1' + t);\n      format = format.replace(/(^|[^\\\\])t/g, '$1' + t.charAt(0));\n      var tz = -date.getTimezoneOffset();\n      var K = utc || !tz ? 'Z' : tz > 0 ? '+' : '-';\n\n      if (!utc) {\n        tz = Math.abs(tz);\n        var tzHrs = Math.floor(tz / 60);\n        var tzMin = tz % 60;\n        K += ii(tzHrs) + ':' + ii(tzMin);\n      }\n\n      format = format.replace(/(^|[^\\\\])K/g, '$1' + K);\n      var day = (utc ? date.getUTCDay() : date.getDay()) + 1;\n      format = format.replace(new RegExp(dddd[0], 'g'), dddd[day]);\n      format = format.replace(new RegExp(ddd[0], 'g'), ddd[day]);\n      format = format.replace(new RegExp(MMMM[0], 'g'), MMMM[M]);\n      format = format.replace(new RegExp(MMM[0], 'g'), MMM[M]);\n      format = format.replace(/\\\\(.)/g, '$1');\n      return format;\n    }\n  }, {\n    key: \"getTimeUnitsfromTimestamp\",\n    value: function getTimeUnitsfromTimestamp(minX, maxX) {\n      var w = this.w;\n\n      if (w.config.xaxis.min !== undefined) {\n        minX = w.config.xaxis.min;\n      }\n\n      if (w.config.xaxis.max !== undefined) {\n        maxX = w.config.xaxis.max;\n      }\n\n      var minYear = new Date(minX).getFullYear();\n      var maxYear = new Date(maxX).getFullYear();\n      var minMonth = new Date(minX).getMonth();\n      var maxMonth = new Date(maxX).getMonth();\n      var minDate = new Date(minX).getDate();\n      var maxDate = new Date(maxX).getDate();\n      var minHour = new Date(minX).getHours();\n      var maxHour = new Date(maxX).getHours();\n      var minMinute = new Date(minX).getMinutes();\n      var maxMinute = new Date(maxX).getMinutes();\n      return {\n        minMinute: minMinute,\n        maxMinute: maxMinute,\n        minHour: minHour,\n        maxHour: maxHour,\n        minDate: minDate,\n        maxDate: maxDate,\n        minMonth: minMonth,\n        maxMonth: maxMonth,\n        minYear: minYear,\n        maxYear: maxYear\n      };\n    }\n  }, {\n    key: \"isLeapYear\",\n    value: function isLeapYear(year) {\n      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    }\n  }, {\n    key: \"calculcateLastDaysOfMonth\",\n    value: function calculcateLastDaysOfMonth(month, year, subtract) {\n      var days = this.determineDaysOfMonths(month, year); // whatever days we get, subtract the number of days asked\n\n      return days - subtract;\n    }\n  }, {\n    key: \"determineDaysOfYear\",\n    value: function determineDaysOfYear(year) {\n      var days = 365;\n\n      if (this.isLeapYear(year)) {\n        days = 366;\n      }\n\n      return days;\n    }\n  }, {\n    key: \"determineRemainingDaysOfYear\",\n    value: function determineRemainingDaysOfYear(year, month, date) {\n      var dayOfYear = this.daysCntOfYear[month] + date;\n      if (month > 1 && this.isLeapYear()) dayOfYear++;\n      return dayOfYear;\n    }\n  }, {\n    key: \"determineDaysOfMonths\",\n    value: function determineDaysOfMonths(month, year) {\n      var days = 30;\n      month = Utils.monthMod(month);\n\n      switch (true) {\n        case this.months30.indexOf(month) > -1:\n          if (month === 2) {\n            if (this.isLeapYear(year)) {\n              days = 29;\n            } else {\n              days = 28;\n            }\n          }\n\n          break;\n\n        case this.months31.indexOf(month) > -1:\n          days = 31;\n          break;\n\n        default:\n          days = 31;\n          break;\n      }\n\n      return days;\n    }\n  }]);\n\n  return DateTime;\n}();\n\n/**\n * ApexCharts Default Class for setting default options for all chart types.\n *\n * @module Defaults\n **/\n\nvar Defaults =\n/*#__PURE__*/\nfunction () {\n  function Defaults(opts) {\n    _classCallCheck(this, Defaults);\n\n    this.opts = opts;\n  }\n\n  _createClass(Defaults, [{\n    key: \"line\",\n    value: function line() {\n      return {\n        chart: {\n          animations: {\n            easing: 'swing'\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          width: 5,\n          curve: 'straight'\n        },\n        markers: {\n          size: 0,\n          hover: {\n            sizeOffset: 6\n          }\n        },\n        xaxis: {\n          crosshairs: {\n            width: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"sparkline\",\n    value: function sparkline(defaults) {\n      this.opts.yaxis[0].labels.show = false;\n      this.opts.yaxis[0].floating = true;\n      var ret = {\n        grid: {\n          show: false,\n          padding: {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n          }\n        },\n        legend: {\n          show: false\n        },\n        xaxis: {\n          labels: {\n            show: false\n          },\n          tooltip: {\n            enabled: false\n          },\n          axisBorder: {\n            show: false\n          }\n        },\n        chart: {\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        }\n      };\n      return Utils.extend(defaults, ret);\n    }\n  }, {\n    key: \"bar\",\n    value: function bar() {\n      return {\n        chart: {\n          stacked: false,\n          animations: {\n            easing: 'swing'\n          }\n        },\n        plotOptions: {\n          bar: {\n            dataLabels: {\n              position: 'center'\n            }\n          }\n        },\n        dataLabels: {\n          style: {\n            colors: ['#fff']\n          }\n        },\n        stroke: {\n          width: 0\n        },\n        fill: {\n          opacity: 0.85\n        },\n        legend: {\n          markers: {\n            shape: 'square',\n            radius: 2,\n            size: 8\n          }\n        },\n        tooltip: {\n          shared: false\n        },\n        xaxis: {\n          tooltip: {\n            enabled: false\n          },\n          crosshairs: {\n            width: 'barWidth',\n            position: 'back',\n            fill: {\n              type: 'gradient'\n            },\n            dropShadow: {\n              enabled: false\n            },\n            stroke: {\n              width: 0\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"candlestick\",\n    value: function candlestick() {\n      return {\n        stroke: {\n          width: 1,\n          colors: ['#333']\n        },\n        dataLabels: {\n          enabled: false\n        },\n        tooltip: {\n          shared: true,\n          custom: function custom(_ref) {\n            var seriesIndex = _ref.seriesIndex,\n                dataPointIndex = _ref.dataPointIndex,\n                w = _ref.w;\n            var o = w.globals.seriesCandleO[seriesIndex][dataPointIndex];\n            var h = w.globals.seriesCandleH[seriesIndex][dataPointIndex];\n            var l = w.globals.seriesCandleL[seriesIndex][dataPointIndex];\n            var c = w.globals.seriesCandleC[seriesIndex][dataPointIndex];\n            return '<div class=\"apexcharts-tooltip-candlestick\">' + '<div>Open: <span class=\"value\">' + o + '</span></div>' + '<div>High: <span class=\"value\">' + h + '</span></div>' + '<div>Low: <span class=\"value\">' + l + '</span></div>' + '<div>Close: <span class=\"value\">' + c + '</span></div>' + '</div>';\n          }\n        },\n        states: {\n          active: {\n            filter: {\n              type: 'none'\n            }\n          }\n        },\n        xaxis: {\n          crosshairs: {\n            width: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"rangeBar\",\n    value: function rangeBar() {\n      return {\n        stroke: {\n          width: 0\n        },\n        tooltip: {\n          shared: false,\n          followCursor: true,\n          custom: function custom(_ref2) {\n            var ctx = _ref2.ctx,\n                seriesIndex = _ref2.seriesIndex,\n                dataPointIndex = _ref2.dataPointIndex,\n                w = _ref2.w;\n            var start = w.globals.seriesRangeStart[seriesIndex][dataPointIndex];\n            var end = w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];\n            var startVal = '';\n            var endVal = '';\n            var color = w.globals.colors[seriesIndex];\n\n            if (w.config.tooltip.x.formatter === undefined) {\n              var datetimeObj = new DateTime(ctx);\n              startVal = datetimeObj.formatDate(new Date(start), w.config.tooltip.x.format, true, true);\n              endVal = datetimeObj.formatDate(new Date(end), w.config.tooltip.x.format, true, true);\n            } else {\n              startVal = w.config.tooltip.x.formatter(start);\n              endVal = w.config.tooltip.x.formatter(end);\n            }\n\n            var ylabel = w.globals.labels[dataPointIndex];\n            return '<div class=\"apexcharts-tooltip-rangebar\">' + '<div> <span class=\"series-name\" style=\"color: ' + color + '\">' + (w.config.series[seriesIndex].name ? w.config.series[seriesIndex].name : '') + '</span></div>' + '<div> <span class=\"category\">' + ylabel + ': </span> <span class=\"value start-value\">' + startVal + '</span> <span class=\"separator\">-</span> <span class=\"value end-value\">' + endVal + '</span></div>' + '</div>';\n          }\n        },\n        xaxis: {\n          tooltip: {\n            enabled: false\n          },\n          crosshairs: {\n            stroke: {\n              width: 0\n            }\n          }\n        }\n      };\n    }\n  }, {\n    key: \"area\",\n    value: function area() {\n      return {\n        stroke: {\n          width: 4\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            inverseColors: false,\n            shade: 'light',\n            type: 'vertical',\n            opacityFrom: 0.65,\n            opacityTo: 0.5,\n            stops: [0, 100, 100]\n          }\n        },\n        markers: {\n          size: 0,\n          hover: {\n            sizeOffset: 6\n          }\n        },\n        tooltip: {\n          followCursor: false\n        }\n      };\n    }\n  }, {\n    key: \"brush\",\n    value: function brush(defaults) {\n      var ret = {\n        chart: {\n          toolbar: {\n            autoSelected: 'selection',\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          width: 1\n        },\n        tooltip: {\n          enabled: false\n        },\n        xaxis: {\n          tooltip: {\n            enabled: false\n          }\n        }\n      };\n      return Utils.extend(defaults, ret);\n    }\n  }, {\n    key: \"stacked100\",\n    value: function stacked100() {\n      var _this = this;\n\n      this.opts.dataLabels = this.opts.dataLabels || {};\n      this.opts.dataLabels.formatter = this.opts.dataLabels.formatter || undefined;\n      var existingDataLabelFormatter = this.opts.dataLabels.formatter;\n      this.opts.yaxis.forEach(function (yaxe, index) {\n        _this.opts.yaxis[index].min = 0;\n        _this.opts.yaxis[index].max = 100;\n      });\n      var isBar = this.opts.chart.type === 'bar';\n\n      if (isBar) {\n        this.opts.dataLabels.formatter = existingDataLabelFormatter || function (val) {\n          if (typeof val === 'number') {\n            return val ? val.toFixed(0) + '%' : val;\n          }\n\n          return val;\n        };\n      }\n    } // This function removes the left and right spacing in chart for line/area/scatter if xaxis type = category for those charts by converting xaxis = numeric. Numeric/Datetime xaxis prevents the unnecessary spacing in the left/right of the chart area\n\n  }, {\n    key: \"bubble\",\n    value: function bubble() {\n      return {\n        dataLabels: {\n          style: {\n            colors: ['#fff']\n          }\n        },\n        tooltip: {\n          shared: false,\n          intersect: true\n        },\n        xaxis: {\n          crosshairs: {\n            width: 0\n          }\n        },\n        fill: {\n          type: 'solid',\n          gradient: {\n            shade: 'light',\n            inverse: true,\n            shadeIntensity: 0.55,\n            opacityFrom: 0.4,\n            opacityTo: 0.8\n          }\n        }\n      };\n    }\n  }, {\n    key: \"scatter\",\n    value: function scatter() {\n      return {\n        dataLabels: {\n          enabled: false\n        },\n        tooltip: {\n          shared: false,\n          intersect: true\n        },\n        markers: {\n          size: 6,\n          strokeWidth: 2,\n          hover: {\n            sizeOffset: 2\n          }\n        }\n      };\n    }\n  }, {\n    key: \"heatmap\",\n    value: function heatmap() {\n      return {\n        chart: {\n          stacked: false,\n          zoom: {\n            enabled: false\n          }\n        },\n        fill: {\n          opacity: 1\n        },\n        dataLabels: {\n          style: {\n            colors: ['#fff']\n          }\n        },\n        stroke: {\n          colors: ['#fff']\n        },\n        tooltip: {\n          followCursor: true,\n          marker: {\n            show: false\n          },\n          x: {\n            show: false\n          }\n        },\n        legend: {\n          position: 'top',\n          markers: {\n            shape: 'square',\n            size: 10,\n            offsetY: 2\n          }\n        },\n        grid: {\n          padding: {\n            right: 20\n          }\n        }\n      };\n    }\n  }, {\n    key: \"pie\",\n    value: function pie() {\n      return {\n        chart: {\n          toolbar: {\n            show: false\n          }\n        },\n        plotOptions: {\n          pie: {\n            donut: {\n              labels: {\n                show: false\n              }\n            }\n          }\n        },\n        dataLabels: {\n          formatter: function formatter(val) {\n            return val.toFixed(1) + '%';\n          },\n          style: {\n            colors: ['#fff']\n          },\n          dropShadow: {\n            enabled: true\n          }\n        },\n        stroke: {\n          colors: ['#fff']\n        },\n        fill: {\n          opacity: 1,\n          gradient: {\n            shade: 'dark',\n            shadeIntensity: 0.35,\n            inverseColors: false,\n            stops: [0, 100, 100]\n          }\n        },\n        padding: {\n          right: 0,\n          left: 0\n        },\n        tooltip: {\n          theme: 'dark',\n          fillSeriesColor: true\n        },\n        legend: {\n          position: 'right'\n        }\n      };\n    }\n  }, {\n    key: \"donut\",\n    value: function donut() {\n      return {\n        chart: {\n          toolbar: {\n            show: false\n          }\n        },\n        dataLabels: {\n          formatter: function formatter(val) {\n            return val.toFixed(1) + '%';\n          },\n          style: {\n            colors: ['#fff']\n          },\n          dropShadow: {\n            enabled: true\n          }\n        },\n        stroke: {\n          colors: ['#fff']\n        },\n        fill: {\n          opacity: 1,\n          gradient: {\n            shade: 'dark',\n            shadeIntensity: 0.4,\n            inverseColors: false,\n            type: 'vertical',\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [70, 98, 100]\n          }\n        },\n        padding: {\n          right: 0,\n          left: 0\n        },\n        tooltip: {\n          theme: 'dark',\n          fillSeriesColor: true\n        },\n        legend: {\n          position: 'right'\n        }\n      };\n    }\n  }, {\n    key: \"radar\",\n    value: function radar() {\n      this.opts.yaxis[0].labels.style.fontSize = '13px';\n      this.opts.yaxis[0].labels.offsetY = 6;\n      return {\n        dataLabels: {\n          enabled: true,\n          style: {\n            colors: ['#a8a8a8'],\n            fontSize: '11px'\n          }\n        },\n        stroke: {\n          width: 2\n        },\n        markers: {\n          size: 3,\n          strokeWidth: 1,\n          strokeOpacity: 1\n        },\n        fill: {\n          opacity: 0.2\n        },\n        tooltip: {\n          shared: false,\n          intersect: true,\n          followCursor: true\n        },\n        grid: {\n          show: false\n        },\n        xaxis: {\n          tooltip: {\n            enabled: false\n          },\n          crosshairs: {\n            show: false\n          }\n        }\n      };\n    }\n  }, {\n    key: \"radialBar\",\n    value: function radialBar() {\n      return {\n        chart: {\n          animations: {\n            dynamicAnimation: {\n              enabled: true,\n              speed: 800\n            }\n          },\n          toolbar: {\n            show: false\n          }\n        },\n        fill: {\n          gradient: {\n            shade: 'dark',\n            shadeIntensity: 0.4,\n            inverseColors: false,\n            type: 'diagonal2',\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [70, 98, 100]\n          }\n        },\n        padding: {\n          right: 0,\n          left: 0\n        },\n        legend: {\n          show: false,\n          position: 'right'\n        },\n        tooltip: {\n          enabled: false,\n          fillSeriesColor: true\n        }\n      };\n    }\n  }], [{\n    key: \"convertCatToNumeric\",\n    value: function convertCatToNumeric(opts) {\n      opts.xaxis.type = 'numeric';\n      opts.xaxis.convertedCatToNumeric = true;\n      opts.xaxis.labels = opts.xaxis.labels || {};\n\n      opts.xaxis.labels.formatter = opts.xaxis.labels.formatter || function (val) {\n        return val;\n      };\n\n      opts.chart = opts.chart || {};\n      opts.chart.zoom = opts.chart.zoom || window.Apex.chart && window.Apex.chart.zoom || {};\n      var defaultFormatter = opts.xaxis.labels.formatter;\n      var labels = opts.xaxis.categories && opts.xaxis.categories.length ? opts.xaxis.categories : opts.labels;\n\n      if (labels && labels.length) {\n        opts.xaxis.labels.formatter = function (val) {\n          return defaultFormatter(labels[val - 1]);\n        };\n      }\n\n      opts.xaxis.categories = [];\n      opts.labels = [];\n      opts.chart.zoom.enabled = opts.chart.zoom.enabled || false;\n      return opts;\n    }\n  }]);\n\n  return Defaults;\n}();\n\n/*\n ** Util functions which are dependent on ApexCharts instance\n */\nvar CoreUtils =\n/*#__PURE__*/\nfunction () {\n  function CoreUtils(ctx) {\n    _classCallCheck(this, CoreUtils);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(CoreUtils, [{\n    key: \"getStackedSeriesTotals\",\n\n    /**\n     * @memberof CoreUtils\n     * returns the sum of all individual values in a multiple stacked series\n     * Eg. w.globals.series = [[32,33,43,12], [2,3,5,1]]\n     *  @return [34,36,48,13]\n     **/\n    value: function getStackedSeriesTotals() {\n      var w = this.w;\n      var total = [];\n\n      for (var i = 0; i < w.globals.series[w.globals.maxValsInArrayIndex].length; i++) {\n        var t = 0;\n\n        for (var j = 0; j < w.globals.series.length; j++) {\n          t += w.globals.series[j][i];\n        }\n\n        total.push(t);\n      }\n\n      w.globals.stackedSeriesTotals = total;\n      return total;\n    } // get total of the all values inside all series\n\n  }, {\n    key: \"getSeriesTotalByIndex\",\n    value: function getSeriesTotalByIndex() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (index === null) {\n        // non-plot chart types - pie / donut / circle\n        return this.w.config.series.reduce(function (acc, cur) {\n          return acc + cur;\n        }, 0);\n      } else {\n        // axis charts - supporting multiple series\n        return this.w.globals.series[index].reduce(function (acc, cur) {\n          return acc + cur;\n        }, 0);\n      }\n    }\n  }, {\n    key: \"isSeriesNull\",\n    value: function isSeriesNull() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var r = [];\n\n      if (index === null) {\n        // non-plot chart types - pie / donut / circle\n        r = this.w.config.series.filter(function (d) {\n          return d !== null;\n        });\n      } else {\n        // axis charts - supporting multiple series\n        r = this.w.globals.series[index].filter(function (d) {\n          return d !== null;\n        });\n      }\n\n      return r.length === 0;\n    }\n  }, {\n    key: \"seriesHaveSameValues\",\n    value: function seriesHaveSameValues(index) {\n      return this.w.globals.series[index].every(function (val, i, arr) {\n        return val === arr[0];\n      });\n    } // maxValsInArrayIndex is the index of series[] which has the largest number of items\n\n  }, {\n    key: \"getLargestSeries\",\n    value: function getLargestSeries() {\n      var w = this.w;\n      w.globals.maxValsInArrayIndex = w.globals.series.map(function (a) {\n        return a.length;\n      }).indexOf(Math.max.apply(Math, w.globals.series.map(function (a) {\n        return a.length;\n      })));\n    }\n  }, {\n    key: \"getLargestMarkerSize\",\n    value: function getLargestMarkerSize() {\n      var w = this.w;\n      var size = 0;\n      w.globals.markers.size.forEach(function (m) {\n        size = Math.max(size, m);\n      });\n      w.globals.markers.largestSize = size;\n      return size;\n    }\n    /**\n     * @memberof Core\n     * returns the sum of all values in a series\n     * Eg. w.globals.series = [[32,33,43,12], [2,3,5,1]]\n     *  @return [120, 11]\n     **/\n\n  }, {\n    key: \"getSeriesTotals\",\n    value: function getSeriesTotals() {\n      var w = this.w;\n      w.globals.seriesTotals = w.globals.series.map(function (ser, index) {\n        var total = 0;\n\n        if (Array.isArray(ser)) {\n          for (var j = 0; j < ser.length; j++) {\n            total += ser[j];\n          }\n        } else {\n          // for pie/donuts/gauges\n          total += ser;\n        }\n\n        return total;\n      });\n    }\n  }, {\n    key: \"getSeriesTotalsXRange\",\n    value: function getSeriesTotalsXRange(minX, maxX) {\n      var w = this.w;\n      var seriesTotalsXRange = w.globals.series.map(function (ser, index) {\n        var total = 0;\n\n        for (var j = 0; j < ser.length; j++) {\n          if (w.globals.seriesX[index][j] > minX && w.globals.seriesX[index][j] < maxX) {\n            total += ser[j];\n          }\n        }\n\n        return total;\n      });\n      return seriesTotalsXRange;\n    }\n    /**\n     * @memberof CoreUtils\n     * returns the percentage value of all individual values which can be used in a 100% stacked series\n     * Eg. w.globals.series = [[32, 33, 43, 12], [2, 3, 5, 1]]\n     *  @return [[94.11, 91.66, 89.58, 92.30], [5.88, 8.33, 10.41, 7.7]]\n     **/\n\n  }, {\n    key: \"getPercentSeries\",\n    value: function getPercentSeries() {\n      var w = this.w;\n      w.globals.seriesPercent = w.globals.series.map(function (ser, index) {\n        var seriesPercent = [];\n\n        if (Array.isArray(ser)) {\n          for (var j = 0; j < ser.length; j++) {\n            var total = w.globals.stackedSeriesTotals[j];\n            var percent = 100 * ser[j] / total;\n            seriesPercent.push(percent);\n          }\n        } else {\n          var _total = w.globals.seriesTotals.reduce(function (acc, val) {\n            return acc + val;\n          }, 0);\n\n          var _percent = 100 * ser / _total;\n\n          seriesPercent.push(_percent);\n        }\n\n        return seriesPercent;\n      });\n    }\n  }, {\n    key: \"getCalculatedRatios\",\n    value: function getCalculatedRatios() {\n      var gl = this.w.globals;\n      var yRatio = [];\n      var invertedYRatio = 0;\n      var xRatio = 0;\n      var initialXRatio = 0;\n      var invertedXRatio = 0;\n      var zRatio = 0;\n      var baseLineY = [];\n      var baseLineInvertedY = 0.1;\n      var baseLineX = 0;\n      gl.yRange = [];\n\n      if (gl.isMultipleYAxis) {\n        for (var i = 0; i < gl.minYArr.length; i++) {\n          gl.yRange.push(Math.abs(gl.minYArr[i] - gl.maxYArr[i]));\n          baseLineY.push(0);\n        }\n      } else {\n        gl.yRange.push(Math.abs(gl.minY - gl.maxY));\n      }\n\n      gl.xRange = Math.abs(gl.maxX - gl.minX);\n      gl.zRange = Math.abs(gl.maxZ - gl.minZ); // multiple y axis\n\n      for (var _i = 0; _i < gl.yRange.length; _i++) {\n        yRatio.push(gl.yRange[_i] / gl.gridHeight);\n      }\n\n      xRatio = gl.xRange / gl.gridWidth;\n      initialXRatio = Math.abs(gl.initialmaxX - gl.initialminX) / gl.gridWidth;\n      invertedYRatio = gl.yRange / gl.gridWidth;\n      invertedXRatio = gl.xRange / gl.gridHeight;\n      zRatio = gl.zRange / gl.gridHeight * 16;\n\n      if (gl.minY !== Number.MIN_VALUE && Math.abs(gl.minY) !== 0) {\n        // Negative numbers present in series\n        gl.hasNegs = true;\n      }\n\n      if (gl.isMultipleYAxis) {\n        baseLineY = []; // baseline variables is the 0 of the yaxis which will be needed when there are negatives\n\n        for (var _i2 = 0; _i2 < yRatio.length; _i2++) {\n          baseLineY.push(-gl.minYArr[_i2] / yRatio[_i2]);\n        }\n      } else {\n        baseLineY.push(-gl.minY / yRatio[0]);\n\n        if (gl.minY !== Number.MIN_VALUE && Math.abs(gl.minY) !== 0) {\n          baseLineInvertedY = -gl.minY / invertedYRatio; // this is for bar chart\n\n          baseLineX = gl.minX / xRatio;\n        }\n      }\n\n      return {\n        yRatio: yRatio,\n        invertedYRatio: invertedYRatio,\n        zRatio: zRatio,\n        xRatio: xRatio,\n        initialXRatio: initialXRatio,\n        invertedXRatio: invertedXRatio,\n        baseLineInvertedY: baseLineInvertedY,\n        baseLineY: baseLineY,\n        baseLineX: baseLineX\n      };\n    }\n  }, {\n    key: \"getLogSeries\",\n    value: function getLogSeries(series) {\n      var w = this.w;\n      w.globals.seriesLog = series.map(function (s, i) {\n        if (w.config.yaxis[i] && w.config.yaxis[i].logarithmic) {\n          return s.map(function (d) {\n            if (d === null) return null;\n            var logVal = (Math.log(d) - Math.log(w.globals.minYArr[i])) / (Math.log(w.globals.maxYArr[i]) - Math.log(w.globals.minYArr[i]));\n            return logVal;\n          });\n        } else {\n          return s;\n        }\n      });\n      return w.globals.seriesLog;\n    }\n  }, {\n    key: \"getLogYRatios\",\n    value: function getLogYRatios(yRatio) {\n      var _this = this;\n\n      var w = this.w;\n      var gl = this.w.globals;\n      gl.yLogRatio = yRatio.slice();\n      gl.logYRange = gl.yRange.map(function (yRange, i) {\n        if (w.config.yaxis[i] && _this.w.config.yaxis[i].logarithmic) {\n          var maxY = -Number.MAX_VALUE;\n          var minY = Number.MIN_VALUE;\n          var range = 1;\n          gl.seriesLog.forEach(function (s, si) {\n            s.forEach(function (v) {\n              if (w.config.yaxis[si] && w.config.yaxis[si].logarithmic) {\n                maxY = Math.max(v, maxY);\n                minY = Math.min(v, minY);\n              }\n            });\n          });\n          range = Math.pow(gl.yRange[i], Math.abs(minY - maxY) / gl.yRange[i]);\n          gl.yLogRatio[i] = range / gl.gridHeight;\n          return range;\n        }\n      });\n      return gl.yLogRatio;\n    } // Some config objects can be array - and we need to extend them correctly\n\n  }], [{\n    key: \"checkComboSeries\",\n    value: function checkComboSeries(series) {\n      var comboCharts = false;\n      var comboChartsHasBars = false; // if user specified a type in series too, turn on comboCharts flag\n\n      if (series.length && typeof series[0].type !== 'undefined') {\n        comboCharts = true;\n        series.forEach(function (s) {\n          if (s.type === 'bar' || s.type === 'column') {\n            comboChartsHasBars = true;\n          }\n        });\n      }\n\n      return {\n        comboCharts: comboCharts,\n        comboChartsHasBars: comboChartsHasBars\n      };\n    }\n  }, {\n    key: \"extendArrayProps\",\n    value: function extendArrayProps(configInstance, options) {\n      if (options.yaxis) {\n        options = configInstance.extendYAxis(options);\n      }\n\n      if (options.annotations) {\n        if (options.annotations.yaxis) {\n          options = configInstance.extendYAxisAnnotations(options);\n        }\n\n        if (options.annotations.xaxis) {\n          options = configInstance.extendXAxisAnnotations(options);\n        }\n\n        if (options.annotations.points) {\n          options = configInstance.extendPointAnnotations(options);\n        }\n      }\n\n      return options;\n    }\n  }]);\n\n  return CoreUtils;\n}();\n\n/**\n * ApexCharts Config Class for extending user options with pre-defined ApexCharts config.\n *\n * @module Config\n **/\n\nvar Config =\n/*#__PURE__*/\nfunction () {\n  function Config(opts) {\n    _classCallCheck(this, Config);\n\n    this.opts = opts;\n  }\n\n  _createClass(Config, [{\n    key: \"init\",\n    value: function init() {\n      var opts = this.opts;\n      var options = new Options();\n      var defaults = new Defaults(opts);\n      this.chartType = opts.chart.type;\n\n      if (this.chartType === 'histogram') {\n        // technically, a histogram can be drawn by a column chart with no spaces in between\n        opts.chart.type = 'bar';\n        opts = Utils.extend({\n          plotOptions: {\n            bar: {\n              columnWidth: '99.99%'\n            }\n          }\n        }, opts);\n      }\n\n      opts.series = this.checkEmptySeries(opts.series);\n      opts = this.extendYAxis(opts);\n      opts = this.extendAnnotations(opts);\n      var config = options.init();\n      var newDefaults = {};\n\n      if (opts && _typeof(opts) === 'object') {\n        var chartDefaults = {};\n\n        switch (this.chartType) {\n          case 'line':\n            chartDefaults = defaults.line();\n            break;\n\n          case 'area':\n            chartDefaults = defaults.area();\n            break;\n\n          case 'bar':\n            chartDefaults = defaults.bar();\n            break;\n\n          case 'candlestick':\n            chartDefaults = defaults.candlestick();\n            break;\n\n          case 'rangeBar':\n            chartDefaults = defaults.rangeBar();\n            break;\n\n          case 'histogram':\n            chartDefaults = defaults.bar();\n            break;\n\n          case 'bubble':\n            chartDefaults = defaults.bubble();\n            break;\n\n          case 'scatter':\n            chartDefaults = defaults.scatter();\n            break;\n\n          case 'heatmap':\n            chartDefaults = defaults.heatmap();\n            break;\n\n          case 'pie':\n            chartDefaults = defaults.pie();\n            break;\n\n          case 'donut':\n            chartDefaults = defaults.donut();\n            break;\n\n          case 'radar':\n            chartDefaults = defaults.radar();\n            break;\n\n          case 'radialBar':\n            chartDefaults = defaults.radialBar();\n            break;\n\n          default:\n            chartDefaults = defaults.line();\n        }\n\n        if (opts.chart.brush && opts.chart.brush.enabled) {\n          chartDefaults = defaults.brush(chartDefaults);\n        }\n\n        if (opts.chart.stacked && opts.chart.stackType === '100%') {\n          defaults.stacked100();\n        } // If user has specified a dark theme, make the tooltip dark too\n\n\n        this.checkForDarkTheme(window.Apex); // check global window Apex options\n\n        this.checkForDarkTheme(opts); // check locally passed options\n\n        opts.xaxis = opts.xaxis || window.Apex.xaxis || {};\n        var combo = CoreUtils.checkComboSeries(opts.series);\n\n        if ((opts.chart.type === 'line' || opts.chart.type === 'area' || opts.chart.type === 'scatter') && !combo.comboChartsHasBars && opts.xaxis.type !== 'datetime' && opts.xaxis.type !== 'numeric' && opts.xaxis.tickPlacement !== 'between') {\n          opts = Defaults.convertCatToNumeric(opts);\n        }\n\n        if (opts.chart.sparkline && opts.chart.sparkline.enabled || window.Apex.chart && window.Apex.chart.sparkline && window.Apex.chart.sparkline.enabled) {\n          chartDefaults = defaults.sparkline(chartDefaults);\n        }\n\n        newDefaults = Utils.extend(config, chartDefaults);\n      } // config should cascade in this fashion\n      // default-config < global-apex-variable-config < user-defined-config\n      // get GLOBALLY defined options and merge with the default config\n\n\n      var mergedWithDefaultConfig = Utils.extend(newDefaults, window.Apex); // get the merged config and extend with user defined config\n\n      config = Utils.extend(mergedWithDefaultConfig, opts); // some features are not supported. those mismatches should be handled\n\n      config = this.handleUserInputErrors(config);\n      return config;\n    }\n  }, {\n    key: \"extendYAxis\",\n    value: function extendYAxis(opts) {\n      var options = new Options();\n\n      if (typeof opts.yaxis === 'undefined') {\n        opts.yaxis = {};\n      } // extend global yaxis config (only if object is provided / not an array)\n\n\n      if (opts.yaxis.constructor !== Array && window.Apex.yaxis && window.Apex.yaxis.constructor !== Array) {\n        opts.yaxis = Utils.extend(opts.yaxis, window.Apex.yaxis);\n      } // as we can't extend nested object's array with extend, we need to do it first\n      // user can provide either an array or object in yaxis config\n\n\n      if (opts.yaxis.constructor !== Array) {\n        // convert the yaxis to array if user supplied object\n        opts.yaxis = [Utils.extend(options.yAxis, opts.yaxis)];\n      } else {\n        opts.yaxis = Utils.extendArray(opts.yaxis, options.yAxis);\n      }\n\n      return opts;\n    } // annotations also accepts array, so we need to extend them manually\n\n  }, {\n    key: \"extendAnnotations\",\n    value: function extendAnnotations(opts) {\n      if (typeof opts.annotations === 'undefined') {\n        opts.annotations = {};\n        opts.annotations.yaxis = [];\n        opts.annotations.xaxis = [];\n        opts.annotations.points = [];\n      }\n\n      opts = this.extendYAxisAnnotations(opts);\n      opts = this.extendXAxisAnnotations(opts);\n      opts = this.extendPointAnnotations(opts);\n      return opts;\n    }\n  }, {\n    key: \"extendYAxisAnnotations\",\n    value: function extendYAxisAnnotations(opts) {\n      var options = new Options();\n      opts.annotations.yaxis = Utils.extendArray(typeof opts.annotations.yaxis !== 'undefined' ? opts.annotations.yaxis : [], options.yAxisAnnotation);\n      return opts;\n    }\n  }, {\n    key: \"extendXAxisAnnotations\",\n    value: function extendXAxisAnnotations(opts) {\n      var options = new Options();\n      opts.annotations.xaxis = Utils.extendArray(typeof opts.annotations.xaxis !== 'undefined' ? opts.annotations.xaxis : [], options.xAxisAnnotation);\n      return opts;\n    }\n  }, {\n    key: \"extendPointAnnotations\",\n    value: function extendPointAnnotations(opts) {\n      var options = new Options();\n      opts.annotations.points = Utils.extendArray(typeof opts.annotations.points !== 'undefined' ? opts.annotations.points : [], options.pointAnnotation);\n      return opts;\n    }\n  }, {\n    key: \"checkForDarkTheme\",\n    value: function checkForDarkTheme(opts) {\n      if (opts.theme && opts.theme.mode === 'dark') {\n        if (!opts.tooltip) {\n          opts.tooltip = {};\n        }\n\n        if (opts.tooltip.theme !== 'light') {\n          opts.tooltip.theme = 'dark';\n        }\n\n        if (!opts.chart.foreColor) {\n          opts.chart.foreColor = '#f6f7f8';\n        }\n\n        if (!opts.theme.palette) {\n          opts.theme.palette = 'palette4';\n        }\n      }\n    }\n  }, {\n    key: \"checkEmptySeries\",\n    value: function checkEmptySeries(ser) {\n      if (ser.length === 0) {\n        return [{\n          data: []\n        }];\n      }\n\n      return ser;\n    }\n  }, {\n    key: \"handleUserInputErrors\",\n    value: function handleUserInputErrors(opts) {\n      var config = opts; // conflicting tooltip option. intersect makes sure to focus on 1 point at a time. Shared cannot be used along with it\n\n      if (config.tooltip.shared && config.tooltip.intersect) {\n        throw new Error('tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false.');\n      }\n\n      if (config.chart.scroller) {\n        console.warn('Scroller has been deprecated since v2.0.0. Please remove the configuration for chart.scroller');\n      }\n\n      if ((config.chart.type === 'bar' || config.chart.type === 'rangeBar') && config.plotOptions.bar.horizontal) {\n        // No multiple yaxis for bars\n        if (config.yaxis.length > 1) {\n          throw new Error('Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false');\n        } // if yaxis is reversed in horizontal bar chart, you should draw the y-axis on right side\n\n\n        if (config.yaxis[0].reversed) {\n          config.yaxis[0].opposite = true;\n        }\n\n        config.xaxis.tooltip.enabled = false; // no xaxis tooltip for horizontal bar\n\n        config.yaxis[0].tooltip.enabled = false; // no xaxis tooltip for horizontal bar\n\n        config.chart.zoom.enabled = false; // no zooming for horz bars\n      }\n\n      if (config.chart.type === 'bar' || config.chart.type === 'rangeBar') {\n        if (config.tooltip.shared) {\n          if (config.xaxis.crosshairs.width === 'barWidth' && config.series.length > 1) {\n            console.warn('crosshairs.width = \"barWidth\" is only supported in single series, not in a multi-series barChart.');\n            config.xaxis.crosshairs.width = 'tickWidth';\n          }\n\n          if (config.plotOptions.bar.horizontal) {\n            config.states.hover.type = 'none';\n            config.tooltip.shared = false;\n          }\n\n          if (!config.tooltip.followCursor) {\n            console.warn('followCursor option in shared columns cannot be turned off. Please set %ctooltip.followCursor: true', 'color: blue;');\n            config.tooltip.followCursor = true;\n          }\n        }\n      }\n\n      if (config.chart.type === 'candlestick') {\n        if (config.yaxis[0].reversed) {\n          console.warn('Reversed y-axis in candlestick chart is not supported.');\n          config.yaxis[0].reversed = false;\n        }\n      }\n\n      if (config.chart.group && config.yaxis[0].labels.minWidth === 0) {\n        console.warn('It looks like you have multiple charts in synchronization. You must provide yaxis.labels.minWidth which must be EQUAL for all grouped charts to prevent incorrect behaviour.');\n      } // if user supplied array for stroke width, it will only be applicable to line/area charts, for any other charts, revert back to Number\n\n\n      if (Array.isArray(config.stroke.width)) {\n        if (config.chart.type !== 'line' && config.chart.type !== 'area') {\n          console.warn('stroke.width option accepts array only for line and area charts. Reverted back to Number');\n          config.stroke.width = config.stroke.width[0];\n        }\n      }\n\n      return config;\n    }\n  }]);\n\n  return Config;\n}();\n\nvar Globals =\n/*#__PURE__*/\nfunction () {\n  function Globals() {\n    _classCallCheck(this, Globals);\n  }\n\n  _createClass(Globals, [{\n    key: \"globalVars\",\n    value: function globalVars(config) {\n      return {\n        chartID: null,\n        // chart ID - apexcharts-cuid\n        cuid: null,\n        // chart ID - random numbers excluding \"apexcharts\" part\n        events: {\n          beforeMount: [],\n          mounted: [],\n          updated: [],\n          clicked: [],\n          selection: [],\n          dataPointSelection: [],\n          zoomed: [],\n          scrolled: []\n        },\n        colors: [],\n        clientX: null,\n        clientY: null,\n        fill: {\n          colors: []\n        },\n        stroke: {\n          colors: []\n        },\n        dataLabels: {\n          style: {\n            colors: []\n          }\n        },\n        radarPolygons: {\n          fill: {\n            colors: []\n          }\n        },\n        markers: {\n          colors: [],\n          size: config.markers.size,\n          largestSize: 0\n        },\n        animationEnded: false,\n        isTouchDevice: 'ontouchstart' in window || navigator.msMaxTouchPoints,\n        isDirty: false,\n        // chart has been updated after the initial render. This is different than dataChanged property. isDirty means user manually called some method to update\n        initialConfig: null,\n        // we will store the first config user has set to go back when user finishes interactions like zooming and come out of it\n        lastXAxis: [],\n        lastYAxis: [],\n        series: [],\n        // the MAIN series array (y values)\n        seriesRangeStart: [],\n        // the clone of series becomes the start in range\n        seriesRangeEnd: [],\n        // the end values in range chart\n        seriesPercent: [],\n        // the percentage values of the given series\n        seriesTotals: [],\n        stackedSeriesTotals: [],\n        seriesX: [],\n        // store the numeric x values in this array (x values)\n        seriesZ: [],\n        // The 3rd \"Z\" dimension for bubbles chart (z values)\n        labels: [],\n        // store the text to draw on x axis\n        // Don't mutate the labels, many things including tooltips depends on it!\n        timelineLabels: [],\n        // store the timeline Labels in another variable\n        invertedTimelineLabels: [],\n        // for rangebar timeline\n        seriesNames: [],\n        // same as labels, used in non axis charts\n        noLabelsProvided: false,\n        // if user didn't provide any categories/labels or x values, fallback to 1,2,3,4...\n        allSeriesCollapsed: false,\n        collapsedSeries: [],\n        // when user collapses a series, it goes into this array\n        collapsedSeriesIndices: [],\n        // this stores the index of the collapsedSeries instead of whole object for quick access\n        ancillaryCollapsedSeries: [],\n        // when user collapses an \"alwaysVisible\" series, it goes into this array\n        ancillaryCollapsedSeriesIndices: [],\n        // this stores the index of the collapsedSeries whose y-axis is always visible\n        risingSeries: [],\n        // when user re-opens a collapsed series, it goes here\n        dataFormatXNumeric: false,\n        // boolean value to indicate user has passed numeric x values\n        selectedDataPoints: [],\n        ignoreYAxisIndexes: [],\n        // when series are being collapsed in multiple y axes, ignore certain index\n        padHorizontal: 0,\n        maxValsInArrayIndex: 0,\n        zoomEnabled: config.chart.toolbar.autoSelected === 'zoom' && config.chart.toolbar.tools.zoom && config.chart.zoom.enabled,\n        panEnabled: config.chart.toolbar.autoSelected === 'pan' && config.chart.toolbar.tools.pan,\n        selectionEnabled: config.chart.toolbar.autoSelected === 'selection' && config.chart.toolbar.tools.selection,\n        yaxis: null,\n        minY: Number.MIN_VALUE,\n        //  is 5e-324, i.e. the smallest positive number\n        // NOTE: If there are multiple y axis, the first yaxis array element will be considered for all y values calculations. Rest all will be calculated based on that\n        maxY: -Number.MAX_VALUE,\n        // is -1.7976931348623157e+308\n        // NOTE: The above note for minY applies here as well\n        minYArr: [],\n        maxYArr: [],\n        maxX: -Number.MAX_VALUE,\n        // is -1.7976931348623157e+308\n        initialmaxX: -Number.MAX_VALUE,\n        minX: Number.MIN_VALUE,\n        //  is 5e-324, i.e. the smallest positive number\n        initialminX: Number.MIN_VALUE,\n        minZ: Number.MIN_VALUE,\n        // Max Z value in charts with Z axis\n        maxZ: -Number.MAX_VALUE,\n        // Max Z value in charts with Z axis\n        minXDiff: Number.MAX_VALUE,\n        mousedown: false,\n        lastClientPosition: {},\n        // don't reset this variable this the chart is destroyed. It is used to detect right or left mousemove in panning\n        visibleXRange: undefined,\n        yRange: [],\n        // this property is the absolute sum of positive and negative values [eg (-100 + 200 = 300)] - yAxis\n        zRange: 0,\n        // zAxis Range (for bubble charts)\n        xRange: 0,\n        // xAxis range\n        yValueDecimal: 0,\n        // are there floating numbers in the series. If yes, this represent the len of the decimals\n        total: 0,\n        SVGNS: 'http://www.w3.org/2000/svg',\n        // svg namespace\n        svgWidth: 0,\n        // the whole svg width\n        svgHeight: 0,\n        // the whole svg height\n        noData: false,\n        // whether there is any data to display or not\n        locale: {},\n        // the current locale values will be preserved here for global access\n        dom: {},\n        // for storing all dom nodes in this particular property\n        // elWrap: null, // the element that wraps everything\n        // elGraphical: null, // this contains lines/areas/bars/pies\n        // elGridRect: null, // paths going outside this area will be clipped\n        // elGridRectMask: null, // clipping will happen with this mask\n        // elGridRectMarkerMask: null, // clipping will happen with this mask\n        // elLegendWrap: null, // the whole legend area\n        // elDefs: null, // [defs] element\n        memory: {\n          methodsToExec: []\n        },\n        shouldAnimate: true,\n        delayedElements: [],\n        // element which appear after animation has finished\n        axisCharts: true,\n        // chart type = line or area or bar\n        // (refer them also as plot charts in the code)\n        isXNumeric: false,\n        // bool: data was provided in a {[x,y], [x,y]} pattern\n        isDataXYZ: false,\n        // bool: data was provided in a {[x,y,z]} pattern\n        resized: false,\n        // bool: user has resized\n        resizeTimer: null,\n        // timeout function to make a small delay before\n        // drawing when user resized\n        comboCharts: false,\n        // bool: whether it's a combination of line/column\n        comboChartsHasBars: false,\n        // bool: whether it's a combination of line/column\n        dataChanged: false,\n        // bool: has data changed dynamically\n        previousPaths: [],\n        // array: when data is changed, it will animate from\n        // previous paths\n        seriesXvalues: [],\n        // we will need this in tooltip (it's x position)\n        // when we will have unequal x values, we will need\n        // some way to get x value depending on mouse pointer\n        seriesYvalues: [],\n        // we will need this when deciding which series\n        // user hovered on\n        seriesCandleO: [],\n        // candle stick open values\n        seriesCandleH: [],\n        // candle stick high values\n        seriesCandleL: [],\n        // candle stick low values\n        seriesCandleC: [],\n        // candle stick close values\n        allSeriesHasEqualX: true,\n        dataPoints: 0,\n        // the longest series length\n        pointsArray: [],\n        // store the points positions here to draw later on hover\n        // format is - [[x,y],[x,y]... [x,y]]\n        dataLabelsRects: [],\n        // store the positions of datalabels to prevent collision\n        lastDrawnDataLabelsIndexes: [],\n        hasNullValues: false,\n        // bool: whether series contains null values\n        easing: null,\n        // function: animation effect to apply\n        zoomed: false,\n        // whether user has zoomed or not\n        gridWidth: 0,\n        // drawable width of actual graphs (series paths)\n        gridHeight: 0,\n        // drawable height of actual graphs (series paths)\n        yAxisScale: [],\n        xAxisScale: null,\n        xAxisTicksPositions: [],\n        timescaleTicks: [],\n        rotateXLabels: false,\n        defaultLabels: false,\n        xLabelFormatter: undefined,\n        // formatter for x axis labels\n        yLabelFormatters: [],\n        xaxisTooltipFormatter: undefined,\n        // formatter for x axis tooltip\n        ttKeyFormatter: undefined,\n        ttVal: undefined,\n        ttZFormatter: undefined,\n        LINE_HEIGHT_RATIO: 1.618,\n        xAxisLabelsHeight: 0,\n        yAxisLabelsWidth: 0,\n        scaleX: 1,\n        scaleY: 1,\n        translateX: 0,\n        translateY: 0,\n        translateYAxisX: [],\n        yLabelsCoords: [],\n        yTitleCoords: [],\n        yAxisWidths: [],\n        translateXAxisY: 0,\n        translateXAxisX: 0,\n        tooltip: null,\n        tooltipOpts: null\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(config) {\n      var globals = this.globalVars(config);\n      globals.initialConfig = Utils.extend({}, config);\n      globals.initialSeries = JSON.parse(JSON.stringify(globals.initialConfig.series));\n      globals.lastXAxis = JSON.parse(JSON.stringify(globals.initialConfig.xaxis));\n      globals.lastYAxis = JSON.parse(JSON.stringify(globals.initialConfig.yaxis));\n      return globals;\n    }\n  }]);\n\n  return Globals;\n}();\n\n/**\n * ApexCharts Base Class for extending user options with pre-defined ApexCharts config.\n *\n * @module Base\n **/\n\nvar Base =\n/*#__PURE__*/\nfunction () {\n  function Base(opts) {\n    _classCallCheck(this, Base);\n\n    this.opts = opts;\n  }\n\n  _createClass(Base, [{\n    key: \"init\",\n    value: function init() {\n      var config = new Config(this.opts).init();\n      var globals = new Globals().init(config);\n      var w = {\n        config: config,\n        globals: globals\n      };\n      return w;\n    }\n  }]);\n\n  return Base;\n}();\n\n/**\n * ApexCharts Fill Class for setting fill options of the paths.\n *\n * @module Fill\n **/\n\nvar Fill =\n/*#__PURE__*/\nfunction () {\n  function Fill(ctx) {\n    _classCallCheck(this, Fill);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.opts = null;\n    this.seriesIndex = 0;\n  }\n\n  _createClass(Fill, [{\n    key: \"clippedImgArea\",\n    value: function clippedImgArea(params) {\n      var w = this.w;\n      var cnf = w.config;\n      var svgW = parseInt(w.globals.gridWidth);\n      var svgH = parseInt(w.globals.gridHeight);\n      var size = svgW > svgH ? svgW : svgH;\n      var fillImg = params.image;\n      var imgWidth = 0;\n      var imgHeight = 0;\n\n      if (typeof params.width === 'undefined' && typeof params.height === 'undefined') {\n        if (cnf.fill.image.width !== undefined && cnf.fill.image.height !== undefined) {\n          imgWidth = cnf.fill.image.width + 1;\n          imgHeight = cnf.fill.image.height;\n        } else {\n          imgWidth = size + 1;\n          imgHeight = size;\n        }\n      } else {\n        imgWidth = params.width;\n        imgHeight = params.height;\n      }\n\n      var elPattern = document.createElementNS(w.globals.SVGNS, 'pattern');\n      Graphics.setAttrs(elPattern, {\n        id: params.patternID,\n        patternUnits: params.patternUnits ? params.patternUnits : 'userSpaceOnUse',\n        width: imgWidth + 'px',\n        height: imgHeight + 'px'\n      });\n      var elImage = document.createElementNS(w.globals.SVGNS, 'image');\n      elPattern.appendChild(elImage);\n      elImage.setAttributeNS('http://www.w3.org/1999/xlink', 'href', fillImg);\n      Graphics.setAttrs(elImage, {\n        x: 0,\n        y: 0,\n        preserveAspectRatio: 'none',\n        width: imgWidth + 'px',\n        height: imgHeight + 'px'\n      });\n      elImage.style.opacity = params.opacity;\n      w.globals.dom.elDefs.node.appendChild(elPattern);\n    }\n  }, {\n    key: \"getSeriesIndex\",\n    value: function getSeriesIndex(opts) {\n      var w = this.w;\n\n      if (w.config.chart.type === 'bar' && w.config.plotOptions.bar.distributed || w.config.chart.type === 'heatmap') {\n        this.seriesIndex = opts.seriesNumber;\n      } else {\n        this.seriesIndex = opts.seriesNumber % w.globals.series.length;\n      }\n\n      return this.seriesIndex;\n    }\n  }, {\n    key: \"fillPath\",\n    value: function fillPath(opts) {\n      var w = this.w;\n      this.opts = opts;\n      var cnf = this.w.config;\n      var pathFill;\n      var patternFill, gradientFill;\n      this.seriesIndex = this.getSeriesIndex(opts);\n      var fillColors = this.getFillColors();\n      var fillColor = fillColors[this.seriesIndex];\n      var fillType = this.getFillType(this.seriesIndex);\n      var fillOpacity = Array.isArray(cnf.fill.opacity) ? cnf.fill.opacity[this.seriesIndex] : cnf.fill.opacity;\n      var defaultColor = fillColor;\n\n      if (opts.color) {\n        fillColor = opts.color;\n      }\n\n      if (fillColor.indexOf('rgb') === -1) {\n        defaultColor = Utils.hexToRgba(fillColor, fillOpacity);\n      } else {\n        if (fillColor.indexOf('rgba') > -1) {\n          fillOpacity = 0 + '.' + Utils.getOpacityFromRGBA(fillColors[this.seriesIndex]);\n        }\n      }\n\n      if (fillType === 'pattern') {\n        patternFill = this.handlePatternFill(patternFill, fillColor, fillOpacity, defaultColor);\n      }\n\n      if (fillType === 'gradient') {\n        gradientFill = this.handleGradientFill(gradientFill, fillColor, fillOpacity, this.seriesIndex);\n      }\n\n      if (cnf.fill.image.src.length > 0 && fillType === 'image') {\n        if (opts.seriesNumber < cnf.fill.image.src.length) {\n          this.clippedImgArea({\n            opacity: fillOpacity,\n            image: cnf.fill.image.src[opts.seriesNumber],\n            patternUnits: opts.patternUnits,\n            patternID: \"pattern\".concat(w.globals.cuid).concat(opts.seriesNumber + 1)\n          });\n          pathFill = \"url(#pattern\".concat(w.globals.cuid).concat(opts.seriesNumber + 1, \")\");\n        } else {\n          pathFill = defaultColor;\n        }\n      } else if (fillType === 'gradient') {\n        pathFill = gradientFill;\n      } else if (fillType === 'pattern') {\n        pathFill = patternFill;\n      } else {\n        pathFill = defaultColor;\n      } // override pattern/gradient if opts.solid is true\n\n\n      if (opts.solid) {\n        pathFill = defaultColor;\n      }\n\n      return pathFill;\n    }\n  }, {\n    key: \"getFillType\",\n    value: function getFillType(seriesIndex) {\n      var w = this.w;\n\n      if (Array.isArray(w.config.fill.type)) {\n        return w.config.fill.type[seriesIndex];\n      } else {\n        return w.config.fill.type;\n      }\n    }\n  }, {\n    key: \"getFillColors\",\n    value: function getFillColors() {\n      var w = this.w;\n      var cnf = w.config;\n      var opts = this.opts;\n      var fillColors = [];\n\n      if (w.globals.comboCharts) {\n        if (w.config.series[this.seriesIndex].type === 'line') {\n          if (w.globals.stroke.colors instanceof Array) {\n            fillColors = w.globals.stroke.colors;\n          } else {\n            fillColors.push(w.globals.stroke.colors);\n          }\n        } else {\n          if (w.globals.fill.colors instanceof Array) {\n            fillColors = w.globals.fill.colors;\n          } else {\n            fillColors.push(w.globals.fill.colors);\n          }\n        }\n      } else {\n        if (cnf.chart.type === 'line') {\n          if (w.globals.stroke.colors instanceof Array) {\n            fillColors = w.globals.stroke.colors;\n          } else {\n            fillColors.push(w.globals.stroke.colors);\n          }\n        } else {\n          if (w.globals.fill.colors instanceof Array) {\n            fillColors = w.globals.fill.colors;\n          } else {\n            fillColors.push(w.globals.fill.colors);\n          }\n        }\n      } // colors passed in arguments\n\n\n      if (typeof opts.fillColors !== 'undefined') {\n        fillColors = [];\n\n        if (opts.fillColors instanceof Array) {\n          fillColors = opts.fillColors.slice();\n        } else {\n          fillColors.push(opts.fillColors);\n        }\n      }\n\n      return fillColors;\n    }\n  }, {\n    key: \"handlePatternFill\",\n    value: function handlePatternFill(patternFill, fillColor, fillOpacity, defaultColor) {\n      var cnf = this.w.config;\n      var opts = this.opts;\n      var graphics = new Graphics(this.ctx);\n      var patternStrokeWidth = cnf.fill.pattern.strokeWidth === undefined ? Array.isArray(cnf.stroke.width) ? cnf.stroke.width[this.seriesIndex] : cnf.stroke.width : Array.isArray(cnf.fill.pattern.strokeWidth) ? cnf.fill.pattern.strokeWidth[this.seriesIndex] : cnf.fill.pattern.strokeWidth;\n      var patternLineColor = fillColor;\n\n      if (cnf.fill.pattern.style instanceof Array) {\n        if (typeof cnf.fill.pattern.style[opts.seriesNumber] !== 'undefined') {\n          var pf = graphics.drawPattern(cnf.fill.pattern.style[opts.seriesNumber], cnf.fill.pattern.width, cnf.fill.pattern.height, patternLineColor, patternStrokeWidth, fillOpacity);\n          patternFill = pf;\n        } else {\n          patternFill = defaultColor;\n        }\n      } else {\n        patternFill = graphics.drawPattern(cnf.fill.pattern.style, cnf.fill.pattern.width, cnf.fill.pattern.height, patternLineColor, patternStrokeWidth, fillOpacity);\n      }\n\n      return patternFill;\n    }\n  }, {\n    key: \"handleGradientFill\",\n    value: function handleGradientFill(gradientFill, fillColor, fillOpacity, i) {\n      var cnf = this.w.config;\n      var opts = this.opts;\n      var graphics = new Graphics(this.ctx);\n      var utils = new Utils();\n      var type = cnf.fill.gradient.type;\n      var gradientFrom, gradientTo;\n      var opacityFrom = cnf.fill.gradient.opacityFrom === undefined ? fillOpacity : Array.isArray(cnf.fill.gradient.opacityFrom) ? cnf.fill.gradient.opacityFrom[i] : cnf.fill.gradient.opacityFrom;\n      var opacityTo = cnf.fill.gradient.opacityTo === undefined ? fillOpacity : Array.isArray(cnf.fill.gradient.opacityTo) ? cnf.fill.gradient.opacityTo[i] : cnf.fill.gradient.opacityTo;\n      gradientFrom = fillColor;\n\n      if (cnf.fill.gradient.gradientToColors === undefined || cnf.fill.gradient.gradientToColors.length === 0) {\n        if (cnf.fill.gradient.shade === 'dark') {\n          gradientTo = utils.shadeColor(parseFloat(cnf.fill.gradient.shadeIntensity) * -1, fillColor);\n        } else {\n          gradientTo = utils.shadeColor(parseFloat(cnf.fill.gradient.shadeIntensity), fillColor);\n        }\n      } else {\n        gradientTo = cnf.fill.gradient.gradientToColors[opts.seriesNumber];\n      }\n\n      if (cnf.fill.gradient.inverseColors) {\n        var t = gradientFrom;\n        gradientFrom = gradientTo;\n        gradientTo = t;\n      }\n\n      gradientFill = graphics.drawGradient(type, gradientFrom, gradientTo, opacityFrom, opacityTo, opts.size, cnf.fill.gradient.stops, cnf.fill.gradient.colorStops, i);\n      return gradientFill;\n    }\n  }]);\n\n  return Fill;\n}();\n\n/**\n * ApexCharts Markers Class for drawing points on y values in axes charts.\n *\n * @module Markers\n **/\n\nvar Markers =\n/*#__PURE__*/\nfunction () {\n  function Markers(ctx, opts) {\n    _classCallCheck(this, Markers);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(Markers, [{\n    key: \"setGlobalMarkerSize\",\n    value: function setGlobalMarkerSize() {\n      var w = this.w;\n      w.globals.markers.size = Array.isArray(w.config.markers.size) ? w.config.markers.size : [w.config.markers.size];\n\n      if (w.globals.markers.size.length > 0) {\n        if (w.globals.markers.size.length < w.globals.series.length + 1) {\n          for (var i = 0; i <= w.globals.series.length; i++) {\n            if (typeof w.globals.markers.size[i] === 'undefined') {\n              w.globals.markers.size.push(w.globals.markers.size[0]);\n            }\n          }\n        }\n      } else {\n        w.globals.markers.size = w.config.series.map(function (s) {\n          return w.config.markers.size;\n        });\n      }\n    }\n  }, {\n    key: \"plotChartMarkers\",\n    value: function plotChartMarkers(pointsPos, seriesIndex, j) {\n      var _this = this;\n\n      var w = this.w;\n      var i = seriesIndex;\n      var p = pointsPos;\n      var elPointsWrap = null;\n      var graphics = new Graphics(this.ctx);\n      var point;\n\n      if (w.globals.markers.size[seriesIndex] > 0) {\n        elPointsWrap = graphics.group({\n          class: 'apexcharts-series-markers'\n        });\n        elPointsWrap.attr('clip-path', \"url(#gridRectMarkerMask\".concat(w.globals.cuid, \")\"));\n      }\n\n      if (p.x instanceof Array) {\n        var _loop = function _loop(q) {\n          var dataPointIndex = j; // a small hack as we have 2 points for the first val to connect it\n\n          if (j === 1 && q === 0) dataPointIndex = 0;\n          if (j === 1 && q === 1) dataPointIndex = 1;\n          var PointClasses = 'apexcharts-marker';\n\n          if ((w.config.chart.type === 'line' || w.config.chart.type === 'area') && !w.globals.comboCharts && !w.config.tooltip.intersect) {\n            PointClasses += ' no-pointer-events';\n          }\n\n          var shouldMarkerDraw = Array.isArray(w.config.markers.size) ? w.globals.markers.size[seriesIndex] > 0 : w.config.markers.size > 0;\n\n          if (shouldMarkerDraw) {\n            if (Utils.isNumber(p.y[q])) {\n              PointClasses += \" w\".concat((Math.random() + 1).toString(36).substring(4));\n            } else {\n              PointClasses = 'apexcharts-nullpoint';\n            }\n\n            var opts = _this.getMarkerConfig(PointClasses, seriesIndex); // discrete markers is an option where user can specify a particular marker with different size and color\n\n\n            w.config.markers.discrete.map(function (marker) {\n              if (marker.seriesIndex === seriesIndex && marker.dataPointIndex === dataPointIndex) {\n                opts.pointStrokeColor = marker.strokeColor;\n                opts.pointFillColor = marker.fillColor;\n                opts.pSize = marker.size;\n              }\n            });\n\n            if (w.config.series[i].data[j]) {\n              if (w.config.series[i].data[j].fillColor) {\n                opts.pointFillColor = w.config.series[i].data[j].fillColor;\n              }\n\n              if (w.config.series[i].data[j].strokeColor) {\n                opts.pointStrokeColor = w.config.series[i].data[j].strokeColor;\n              }\n            }\n\n            point = graphics.drawMarker(p.x[q], p.y[q], opts);\n            point.attr('rel', dataPointIndex);\n            point.attr('j', dataPointIndex);\n            point.attr('index', seriesIndex);\n            point.node.setAttribute('default-marker-size', opts.pSize);\n            var filters = new Filters(_this.ctx);\n            filters.setSelectionFilter(point, seriesIndex, dataPointIndex);\n\n            _this.addEvents(point);\n\n            if (elPointsWrap) {\n              elPointsWrap.add(point);\n            }\n          } else {\n            // dynamic array creation - multidimensional\n            if (typeof w.globals.pointsArray[seriesIndex] === 'undefined') w.globals.pointsArray[seriesIndex] = [];\n            w.globals.pointsArray[seriesIndex].push([p.x[q], p.y[q]]);\n          }\n        };\n\n        for (var q = 0; q < p.x.length; q++) {\n          _loop(q);\n        }\n      }\n\n      return elPointsWrap;\n    }\n  }, {\n    key: \"getMarkerConfig\",\n    value: function getMarkerConfig(cssClass, seriesIndex) {\n      var w = this.w;\n      var pStyle = this.getMarkerStyle(seriesIndex);\n      var pSize = w.globals.markers.size[seriesIndex];\n      return {\n        pSize: pSize,\n        pRadius: w.config.markers.radius,\n        pWidth: w.config.markers.strokeWidth,\n        pointStrokeColor: pStyle.pointStrokeColor,\n        pointFillColor: pStyle.pointFillColor,\n        shape: w.config.markers.shape instanceof Array ? w.config.markers.shape[seriesIndex] : w.config.markers.shape,\n        class: cssClass,\n        pointStrokeOpacity: w.config.markers.strokeOpacity,\n        pointFillOpacity: w.config.markers.fillOpacity,\n        seriesIndex: seriesIndex\n      };\n    }\n  }, {\n    key: \"addEvents\",\n    value: function addEvents(circle) {\n      var graphics = new Graphics(this.ctx);\n      circle.node.addEventListener('mouseenter', graphics.pathMouseEnter.bind(this.ctx, circle));\n      circle.node.addEventListener('mouseleave', graphics.pathMouseLeave.bind(this.ctx, circle));\n      circle.node.addEventListener('mousedown', graphics.pathMouseDown.bind(this.ctx, circle));\n      circle.node.addEventListener('touchstart', graphics.pathMouseDown.bind(this.ctx, circle), {\n        passive: true\n      });\n    }\n  }, {\n    key: \"getMarkerStyle\",\n    value: function getMarkerStyle(seriesIndex) {\n      var w = this.w;\n      var colors = w.globals.markers.colors;\n      var strokeColors = w.config.markers.strokeColor || w.config.markers.strokeColors;\n      var pointStrokeColor = strokeColors instanceof Array ? strokeColors[seriesIndex] : strokeColors;\n      var pointFillColor = colors instanceof Array ? colors[seriesIndex] : colors;\n      return {\n        pointStrokeColor: pointStrokeColor,\n        pointFillColor: pointFillColor\n      };\n    }\n  }]);\n\n  return Markers;\n}();\n\n/**\n * ApexCharts Scatter Class.\n * This Class also handles bubbles chart as currently there is no major difference in drawing them,\n * @module Scatter\n **/\n\nvar Scatter =\n/*#__PURE__*/\nfunction () {\n  function Scatter(ctx) {\n    _classCallCheck(this, Scatter);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.initialAnim = this.w.config.chart.animations.enabled;\n    this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled; // this array will help in centering the label in bubbles\n\n    this.radiusSizes = [];\n  }\n\n  _createClass(Scatter, [{\n    key: \"draw\",\n    value: function draw(elSeries, j, opts) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var realIndex = opts.realIndex;\n      var pointsPos = opts.pointsPos;\n      var zRatio = opts.zRatio;\n      var elPointsMain = opts.elParent;\n      var elPointsWrap = graphics.group({\n        class: \"apexcharts-series-markers apexcharts-series-\".concat(w.config.chart.type)\n      });\n      elPointsWrap.attr('clip-path', \"url(#gridRectMarkerMask\".concat(w.globals.cuid, \")\"));\n\n      if (pointsPos.x instanceof Array) {\n        for (var q = 0; q < pointsPos.x.length; q++) {\n          var dataPointIndex = j + 1;\n          var shouldDraw = true; // a small hack as we have 2 points for the first val to connect it\n\n          if (j === 0 && q === 0) dataPointIndex = 0;\n          if (j === 0 && q === 1) dataPointIndex = 1;\n          var radius = 0;\n          var finishRadius = w.globals.markers.size[realIndex];\n\n          if (zRatio !== Infinity) {\n            // means we have a bubble\n            finishRadius = w.globals.seriesZ[realIndex][dataPointIndex] / zRatio;\n\n            if (typeof this.radiusSizes[realIndex] === 'undefined') {\n              this.radiusSizes.push([]);\n            }\n\n            this.radiusSizes[realIndex].push(finishRadius);\n          }\n\n          if (!w.config.chart.animations.enabled) {\n            radius = finishRadius;\n          }\n\n          var x = pointsPos.x[q];\n          var y = pointsPos.y[q];\n          radius = radius || 0;\n\n          if (x === 0 && y === 0 || y === null || typeof w.globals.series[realIndex][dataPointIndex] === 'undefined') {\n            shouldDraw = false;\n          }\n\n          if (shouldDraw) {\n            var circle = this.drawPoint(x, y, radius, finishRadius, realIndex, dataPointIndex, j);\n            elPointsWrap.add(circle);\n          }\n\n          elPointsMain.add(elPointsWrap);\n        }\n      }\n    }\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(x, y, radius, finishRadius, realIndex, dataPointIndex, j) {\n      var w = this.w;\n      var i = realIndex;\n      var anim = new Animations(this.ctx);\n      var filters = new Filters(this.ctx);\n      var fill = new Fill(this.ctx);\n      var markers = new Markers(this.ctx);\n      var graphics = new Graphics(this.ctx);\n      var markerConfig = markers.getMarkerConfig('apexcharts-marker', i);\n      var pathFillCircle = fill.fillPath({\n        seriesNumber: realIndex,\n        patternUnits: 'objectBoundingBox'\n      });\n      var circle = graphics.drawCircle(radius);\n\n      if (w.config.series[i].data[dataPointIndex]) {\n        if (w.config.series[i].data[dataPointIndex].fillColor) {\n          pathFillCircle = w.config.series[i].data[dataPointIndex].fillColor;\n        }\n      }\n\n      circle.attr({\n        cx: x,\n        cy: y,\n        fill: pathFillCircle,\n        stroke: markerConfig.pointStrokeColor,\n        strokeWidth: markerConfig.pWidth\n      });\n\n      if (w.config.chart.dropShadow.enabled) {\n        filters.dropShadow(circle, {\n          top: w.config.chart.dropShadow.top,\n          left: w.config.chart.dropShadow.left,\n          blur: w.config.chart.dropShadow.blur,\n          color: w.config.chart.dropShadow.color,\n          opacity: w.config.chart.dropShadow.opacity\n        });\n      }\n\n      if (this.initialAnim && !w.globals.dataChanged) {\n        var speed = 1;\n\n        if (!w.globals.resized) {\n          speed = w.config.chart.animations.speed;\n        }\n\n        anim.animateCircleRadius(circle, 0, finishRadius, speed, w.globals.easing);\n      }\n\n      if (w.globals.dataChanged) {\n        if (this.dynamicAnim) {\n          var _speed = w.config.chart.animations.dynamicAnimation.speed;\n          var prevX, prevY, prevR;\n          var prevPathJ = null;\n          prevPathJ = w.globals.previousPaths[realIndex] && w.globals.previousPaths[realIndex][j];\n\n          if (typeof prevPathJ !== 'undefined' && prevPathJ !== null) {\n            // series containing less elements will ignore these values and revert to 0\n            prevX = prevPathJ.x;\n            prevY = prevPathJ.y;\n            prevR = typeof prevPathJ.r !== 'undefined' ? prevPathJ.r : finishRadius;\n          }\n\n          for (var cs = 0; cs < w.globals.collapsedSeries.length; cs++) {\n            if (w.globals.collapsedSeries[cs].index === realIndex) {\n              _speed = 1;\n              finishRadius = 0;\n            }\n          }\n\n          if (x === 0 && y === 0) finishRadius = 0;\n          anim.animateCircle(circle, {\n            cx: prevX,\n            cy: prevY,\n            r: prevR\n          }, {\n            cx: x,\n            cy: y,\n            r: finishRadius\n          }, _speed, w.globals.easing);\n        } else {\n          circle.attr({\n            r: finishRadius\n          });\n        }\n      }\n\n      circle.attr({\n        rel: dataPointIndex,\n        j: dataPointIndex,\n        index: realIndex,\n        'default-marker-size': finishRadius\n      });\n      filters.setSelectionFilter(circle, realIndex, dataPointIndex);\n      markers.addEvents(circle);\n      circle.node.classList.add('apexcharts-marker');\n      return circle;\n    }\n  }, {\n    key: \"centerTextInBubble\",\n    value: function centerTextInBubble(y) {\n      var w = this.w;\n      y = y + parseInt(w.config.dataLabels.style.fontSize) / 4;\n      return {\n        y: y\n      };\n    }\n  }]);\n\n  return Scatter;\n}();\n\n/**\n * ApexCharts DataLabels Class for drawing dataLabels on Axes based Charts.\n *\n * @module DataLabels\n **/\n\nvar DataLabels =\n/*#__PURE__*/\nfunction () {\n  function DataLabels(ctx) {\n    _classCallCheck(this, DataLabels);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  } // When there are many datalabels to be printed, and some of them overlaps each other in the same series, this method will take care of that\n  // Also, when datalabels exceeds the drawable area and get clipped off, we need to adjust and move some pixels to make them visible again\n\n\n  _createClass(DataLabels, [{\n    key: \"dataLabelsCorrection\",\n    value: function dataLabelsCorrection(x, y, val, i, dataPointIndex, alwaysDrawDataLabel, fontSize) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var drawnextLabel = false; //\n\n      var textRects = graphics.getTextRects(val, fontSize);\n      var width = textRects.width;\n      var height = textRects.height; // first value in series, so push an empty array\n\n      if (typeof w.globals.dataLabelsRects[i] === 'undefined') w.globals.dataLabelsRects[i] = []; // then start pushing actual rects in that sub-array\n\n      w.globals.dataLabelsRects[i].push({\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      });\n      var len = w.globals.dataLabelsRects[i].length - 2;\n      var lastDrawnIndex = typeof w.globals.lastDrawnDataLabelsIndexes[i] !== 'undefined' ? w.globals.lastDrawnDataLabelsIndexes[i][w.globals.lastDrawnDataLabelsIndexes[i].length - 1] : 0;\n\n      if (typeof w.globals.dataLabelsRects[i][len] !== 'undefined') {\n        var lastDataLabelRect = w.globals.dataLabelsRects[i][lastDrawnIndex];\n\n        if ( // next label forward and x not intersecting\n        x > lastDataLabelRect.x + lastDataLabelRect.width + 2 || y > lastDataLabelRect.y + lastDataLabelRect.height + 2 || x + width < lastDataLabelRect.x // next label is going to be drawn backwards\n        ) {\n            // the 2 indexes don't override, so OK to draw next label\n            drawnextLabel = true;\n          }\n      }\n\n      if (dataPointIndex === 0 || alwaysDrawDataLabel) {\n        drawnextLabel = true;\n      }\n\n      return {\n        x: x,\n        y: y,\n        drawnextLabel: drawnextLabel\n      };\n    }\n  }, {\n    key: \"drawDataLabel\",\n    value: function drawDataLabel(pos, i, j) {\n      var align = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'top';\n      // this method handles line, area, bubble, scatter charts as those charts contains markers/points which have pre-defined x/y positions\n      // all other charts like bars / heatmaps will define their own drawDataLabel routine\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var dataLabelsConfig = w.config.dataLabels;\n      var x = 0;\n      var y = 0;\n      var dataPointIndex = j;\n      var elDataLabelsWrap = null;\n\n      if (!dataLabelsConfig.enabled || pos.x instanceof Array !== true) {\n        return elDataLabelsWrap;\n      }\n\n      elDataLabelsWrap = graphics.group({\n        class: 'apexcharts-data-labels'\n      });\n      elDataLabelsWrap.attr('clip-path', \"url(#gridRectMarkerMask\".concat(w.globals.cuid, \")\"));\n\n      for (var q = 0; q < pos.x.length; q++) {\n        x = pos.x[q] + dataLabelsConfig.offsetX;\n        y = pos.y[q] + dataLabelsConfig.offsetY - w.globals.markers.size[i] - 5;\n\n        if (align === 'bottom') {\n          y = y + w.globals.markers.size[i] * 2 + parseInt(dataLabelsConfig.style.fontSize) * 1.4;\n        }\n\n        if (!isNaN(x)) {\n          // a small hack as we have 2 points for the first val to connect it\n          if (j === 1 && q === 0) dataPointIndex = 0;\n          if (j === 1 && q === 1) dataPointIndex = 1;\n          var val = w.globals.series[i][dataPointIndex];\n          var text = '';\n\n          if (w.config.chart.type === 'bubble') {\n            text = w.globals.seriesZ[i][dataPointIndex];\n            y = pos.y[q] + w.config.dataLabels.offsetY;\n            var scatter = new Scatter(this.ctx);\n            var centerTextInBubbleCoords = scatter.centerTextInBubble(y, i, dataPointIndex);\n            y = centerTextInBubbleCoords.y;\n          } else {\n            if (typeof val !== 'undefined') {\n              text = w.config.dataLabels.formatter(val, {\n                seriesIndex: i,\n                dataPointIndex: dataPointIndex,\n                w: w\n              });\n            }\n          }\n\n          if (text === null) text = '';\n          this.plotDataLabelsText({\n            x: x,\n            y: y,\n            text: text,\n            i: i,\n            j: dataPointIndex,\n            parent: elDataLabelsWrap,\n            offsetCorrection: true,\n            dataLabelsConfig: w.config.dataLabels\n          });\n        }\n      }\n\n      return elDataLabelsWrap;\n    }\n  }, {\n    key: \"plotDataLabelsText\",\n    value: function plotDataLabelsText(opts) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var x = opts.x,\n          y = opts.y,\n          i = opts.i,\n          j = opts.j,\n          text = opts.text,\n          textAnchor = opts.textAnchor,\n          parent = opts.parent,\n          dataLabelsConfig = opts.dataLabelsConfig,\n          alwaysDrawDataLabel = opts.alwaysDrawDataLabel,\n          offsetCorrection = opts.offsetCorrection;\n\n      if (Array.isArray(w.config.dataLabels.enabledOnSeries)) {\n        if (w.config.dataLabels.enabledOnSeries.indexOf(i) > -1) {\n          return;\n        }\n      }\n\n      var correctedLabels = {\n        x: x,\n        y: y,\n        drawnextLabel: true\n      };\n\n      if (offsetCorrection) {\n        correctedLabels = this.dataLabelsCorrection(x, y, text, i, j, alwaysDrawDataLabel, parseInt(dataLabelsConfig.style.fontSize));\n      } // when zoomed, we don't need to correct labels offsets,\n      // but if normally, labels get cropped, correct them\n\n\n      if (!w.globals.zoomed) {\n        x = correctedLabels.x;\n        y = correctedLabels.y;\n      }\n\n      if (correctedLabels.drawnextLabel) {\n        var dataLabelText = graphics.drawText({\n          width: 100,\n          height: parseInt(dataLabelsConfig.style.fontSize),\n          x: x,\n          y: y,\n          foreColor: w.globals.dataLabels.style.colors[i],\n          textAnchor: textAnchor || dataLabelsConfig.textAnchor,\n          text: text,\n          fontSize: dataLabelsConfig.style.fontSize,\n          fontFamily: dataLabelsConfig.style.fontFamily\n        });\n        dataLabelText.attr({\n          class: 'apexcharts-datalabel',\n          cx: x,\n          cy: y\n        });\n\n        if (dataLabelsConfig.dropShadow.enabled) {\n          var textShadow = dataLabelsConfig.dropShadow;\n          var filters = new Filters(this.ctx);\n          filters.dropShadow(dataLabelText, textShadow);\n        }\n\n        parent.add(dataLabelText);\n\n        if (typeof w.globals.lastDrawnDataLabelsIndexes[i] === 'undefined') {\n          w.globals.lastDrawnDataLabelsIndexes[i] = [];\n        }\n\n        w.globals.lastDrawnDataLabelsIndexes[i].push(j);\n      }\n    }\n  }]);\n\n  return DataLabels;\n}();\n\n/**\n * ApexCharts Bar Class responsible for drawing both Columns and Bars.\n *\n * @module Bar\n **/\n\nvar Bar =\n/*#__PURE__*/\nfunction () {\n  function Bar(ctx, xyRatios) {\n    _classCallCheck(this, Bar);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    var w = this.w;\n    this.barOptions = w.config.plotOptions.bar;\n    this.isHorizontal = this.barOptions.horizontal;\n    this.strokeWidth = w.config.stroke.width;\n    this.isNullValue = false;\n    this.xyRatios = xyRatios;\n\n    if (this.xyRatios !== null) {\n      this.xRatio = xyRatios.xRatio;\n      this.yRatio = xyRatios.yRatio;\n      this.invertedXRatio = xyRatios.invertedXRatio;\n      this.invertedYRatio = xyRatios.invertedYRatio;\n      this.baseLineY = xyRatios.baseLineY;\n      this.baseLineInvertedY = xyRatios.baseLineInvertedY;\n    }\n\n    this.yaxisIndex = 0;\n    this.seriesLen = 0;\n  }\n  /** primary draw method which is called on bar object\n   * @memberof Bar\n   * @param {array} series - user supplied series values\n   * @param {int} seriesIndex - the index by which series will be drawn on the svg\n   * @return {node} element which is supplied to parent chart draw method for appending\n   **/\n\n\n  _createClass(Bar, [{\n    key: \"draw\",\n    value: function draw(series, seriesIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var coreUtils = new CoreUtils(this.ctx, w);\n      series = coreUtils.getLogSeries(series);\n      this.series = series;\n      this.yRatio = coreUtils.getLogYRatios(this.yRatio);\n      this.initVariables(series);\n      var ret = graphics.group({\n        class: 'apexcharts-bar-series apexcharts-plot-series'\n      });\n\n      if (w.config.dataLabels.enabled) {\n        if (this.totalItems > w.config.plotOptions.bar.dataLabels.maxItems) {\n          console.warn('WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering.');\n        }\n      }\n\n      for (var i = 0, bc = 0; i < series.length; i++, bc++) {\n        var pathTo = void 0,\n            pathFrom = void 0;\n        var x = void 0,\n            y = void 0,\n            xDivision = void 0,\n            // xDivision is the GRIDWIDTH divided by number of datapoints (columns)\n        yDivision = void 0,\n            // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)\n        zeroH = void 0,\n            // zeroH is the baseline where 0 meets y axis\n        zeroW = void 0; // zeroW is the baseline where 0 meets x axis\n\n        var yArrj = []; // hold y values of current iterating series\n\n        var xArrj = []; // hold x values of current iterating series\n\n        var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn\n\n        var elSeries = graphics.group({\n          class: \"apexcharts-series \".concat(Utils.escapeString(w.globals.seriesNames[realIndex])),\n          rel: i + 1,\n          'data:realIndex': realIndex\n        });\n        this.ctx.series.addCollapsedClassToSeries(elSeries, realIndex);\n\n        if (series[i].length > 0) {\n          this.visibleI = this.visibleI + 1;\n        }\n\n        var strokeWidth = 0;\n        var barHeight = 0;\n        var barWidth = 0;\n\n        if (this.yRatio.length > 1) {\n          this.yaxisIndex = realIndex;\n        }\n\n        this.isReversed = w.config.yaxis[this.yaxisIndex] && w.config.yaxis[this.yaxisIndex].reversed;\n        var initPositions = this.initialPositions();\n        y = initPositions.y;\n        barHeight = initPositions.barHeight;\n        yDivision = initPositions.yDivision;\n        zeroW = initPositions.zeroW;\n        x = initPositions.x;\n        barWidth = initPositions.barWidth;\n        xDivision = initPositions.xDivision;\n        zeroH = initPositions.zeroH;\n\n        if (!this.horizontal) {\n          xArrj.push(x + barWidth / 2);\n        } // eldatalabels\n\n\n        var elDataLabelsWrap = graphics.group({\n          class: 'apexcharts-datalabels'\n        });\n\n        for (var j = 0, tj = w.globals.dataPoints; j < w.globals.dataPoints; j++, tj--) {\n          if (typeof this.series[i][j] === 'undefined' || series[i][j] === null) {\n            this.isNullValue = true;\n          } else {\n            this.isNullValue = false;\n          }\n\n          if (w.config.stroke.show) {\n            if (this.isNullValue) {\n              strokeWidth = 0;\n            } else {\n              strokeWidth = Array.isArray(this.strokeWidth) ? this.strokeWidth[realIndex] : this.strokeWidth;\n            }\n          }\n\n          var paths = null;\n\n          if (this.isHorizontal) {\n            paths = this.drawBarPaths({\n              indexes: {\n                i: i,\n                j: j,\n                realIndex: realIndex,\n                bc: bc\n              },\n              barHeight: barHeight,\n              strokeWidth: strokeWidth,\n              pathTo: pathTo,\n              pathFrom: pathFrom,\n              zeroW: zeroW,\n              x: x,\n              y: y,\n              yDivision: yDivision,\n              elSeries: elSeries\n            });\n          } else {\n            paths = this.drawColumnPaths({\n              indexes: {\n                i: i,\n                j: j,\n                realIndex: realIndex,\n                bc: bc\n              },\n              x: x,\n              y: y,\n              xDivision: xDivision,\n              pathTo: pathTo,\n              pathFrom: pathFrom,\n              barWidth: barWidth,\n              zeroH: zeroH,\n              strokeWidth: strokeWidth,\n              elSeries: elSeries\n            });\n          }\n\n          pathTo = paths.pathTo;\n          pathFrom = paths.pathFrom;\n          y = paths.y;\n          x = paths.x; // push current X\n\n          if (j > 0) {\n            xArrj.push(x + barWidth / 2);\n          }\n\n          yArrj.push(y);\n          var pathFill = this.getPathFillColor(series, i, j, realIndex);\n          elSeries = this.renderSeries({\n            realIndex: realIndex,\n            pathFill: pathFill,\n            j: j,\n            i: i,\n            pathFrom: pathFrom,\n            pathTo: pathTo,\n            strokeWidth: strokeWidth,\n            elSeries: elSeries,\n            x: x,\n            y: y,\n            series: series,\n            barHeight: barHeight,\n            barWidth: barWidth,\n            elDataLabelsWrap: elDataLabelsWrap,\n            visibleSeries: this.visibleI,\n            type: 'bar'\n          });\n        } // push all x val arrays into main xArr\n\n\n        w.globals.seriesXvalues[realIndex] = xArrj;\n        w.globals.seriesYvalues[realIndex] = yArrj;\n        ret.add(elSeries);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"getPathFillColor\",\n    value: function getPathFillColor(series, i, j, realIndex) {\n      var w = this.w;\n      var fill = new Fill(this.ctx);\n      var fillColor = null;\n      var seriesNumber = this.barOptions.distributed ? j : i;\n\n      if (this.barOptions.colors.ranges.length > 0) {\n        var colorRange = this.barOptions.colors.ranges;\n        colorRange.map(function (range) {\n          if (series[i][j] >= range.from && series[i][j] <= range.to) {\n            fillColor = range.color;\n          }\n        });\n      }\n\n      if (w.config.series[i].data[j] && w.config.series[i].data[j].fillColor) {\n        fillColor = w.config.series[i].data[j].fillColor;\n      }\n\n      var pathFill = fill.fillPath({\n        seriesNumber: this.barOptions.distributed ? seriesNumber : realIndex,\n        color: fillColor\n      });\n      return pathFill;\n    }\n  }, {\n    key: \"renderSeries\",\n    value: function renderSeries(_ref) {\n      var realIndex = _ref.realIndex,\n          pathFill = _ref.pathFill,\n          lineFill = _ref.lineFill,\n          j = _ref.j,\n          i = _ref.i,\n          pathFrom = _ref.pathFrom,\n          pathTo = _ref.pathTo,\n          strokeWidth = _ref.strokeWidth,\n          elSeries = _ref.elSeries,\n          x = _ref.x,\n          y = _ref.y,\n          series = _ref.series,\n          barHeight = _ref.barHeight,\n          barWidth = _ref.barWidth,\n          elDataLabelsWrap = _ref.elDataLabelsWrap,\n          visibleSeries = _ref.visibleSeries,\n          type = _ref.type;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n\n      if (!lineFill) {\n        /* fix apexcharts#341 */\n        lineFill = this.barOptions.distributed ? w.globals.stroke.colors[j] : w.globals.stroke.colors[realIndex];\n      }\n\n      if (w.config.series[i].data[j] && w.config.series[i].data[j].strokeColor) {\n        lineFill = w.config.series[i].data[j].strokeColor;\n      }\n\n      if (this.isNullValue) {\n        pathFill = 'none';\n      }\n\n      var delay = j / w.config.chart.animations.animateGradually.delay * (w.config.chart.animations.speed / w.globals.dataPoints) / 2.4;\n      var renderedPath = graphics.renderPaths({\n        i: i,\n        j: j,\n        realIndex: realIndex,\n        pathFrom: pathFrom,\n        pathTo: pathTo,\n        stroke: lineFill,\n        strokeWidth: strokeWidth,\n        strokeLineCap: w.config.stroke.lineCap,\n        fill: pathFill,\n        animationDelay: delay,\n        initialSpeed: w.config.chart.animations.speed,\n        dataChangeSpeed: w.config.chart.animations.dynamicAnimation.speed,\n        className: \"apexcharts-\".concat(type, \"-area\"),\n        id: \"apexcharts-\".concat(type, \"-area\")\n      });\n      renderedPath.attr('clip-path', \"url(#gridRectMask\".concat(w.globals.cuid, \")\"));\n      var filters = new Filters(this.ctx);\n      filters.setSelectionFilter(renderedPath, realIndex, j);\n      elSeries.add(renderedPath);\n      var dataLabels = this.calculateDataLabelsPos({\n        x: x,\n        y: y,\n        i: i,\n        j: j,\n        series: series,\n        realIndex: realIndex,\n        barHeight: barHeight,\n        barWidth: barWidth,\n        renderedPath: renderedPath,\n        visibleSeries: visibleSeries\n      });\n\n      if (dataLabels !== null) {\n        elDataLabelsWrap.add(dataLabels);\n      }\n\n      elSeries.add(elDataLabelsWrap);\n      return elSeries;\n    }\n  }, {\n    key: \"initVariables\",\n    value: function initVariables(series) {\n      var w = this.w;\n      this.series = series;\n      this.totalItems = 0;\n      this.seriesLen = 0;\n      this.visibleI = -1;\n      this.visibleItems = 1; // number of visible bars after user zoomed in/out\n\n      for (var sl = 0; sl < series.length; sl++) {\n        if (series[sl].length > 0) {\n          this.seriesLen = this.seriesLen + 1;\n          this.totalItems += series[sl].length;\n        }\n\n        if (w.globals.isXNumeric) {\n          // get max visible items\n          for (var j = 0; j < series[sl].length; j++) {\n            if (w.globals.seriesX[sl][j] > w.globals.minX && w.globals.seriesX[sl][j] < w.globals.maxX) {\n              this.visibleItems++;\n            }\n          }\n        } else {\n          this.visibleItems = w.globals.dataPoints;\n        }\n      }\n\n      if (this.seriesLen === 0) {\n        // A small adjustment when combo charts are used\n        this.seriesLen = 1;\n      }\n    }\n  }, {\n    key: \"initialPositions\",\n    value: function initialPositions() {\n      var w = this.w;\n      var x, y, yDivision, xDivision, barHeight, barWidth, zeroH, zeroW;\n\n      if (this.isHorizontal) {\n        // height divided into equal parts\n        yDivision = w.globals.gridHeight / w.globals.dataPoints;\n        barHeight = yDivision / this.seriesLen;\n\n        if (w.globals.isXNumeric) {\n          yDivision = w.globals.gridHeight / this.totalItems;\n          barHeight = yDivision / this.seriesLen;\n        }\n\n        barHeight = barHeight * parseInt(this.barOptions.barHeight) / 100;\n        zeroW = this.baseLineInvertedY + w.globals.padHorizontal + (this.isReversed ? w.globals.gridWidth : 0) - (this.isReversed ? this.baseLineInvertedY * 2 : 0);\n        y = (yDivision - barHeight * this.seriesLen) / 2;\n      } else {\n        // width divided into equal parts\n        xDivision = w.globals.gridWidth / this.visibleItems;\n        barWidth = xDivision / this.seriesLen * parseInt(this.barOptions.columnWidth) / 100;\n\n        if (w.globals.isXNumeric) {\n          // max barwidth should be equal to minXDiff to avoid overlap\n          xDivision = w.globals.minXDiff / this.xRatio;\n          barWidth = xDivision / this.seriesLen * parseInt(this.barOptions.columnWidth) / 100;\n        }\n\n        zeroH = w.globals.gridHeight - this.baseLineY[this.yaxisIndex] - (this.isReversed ? w.globals.gridHeight : 0) + (this.isReversed ? this.baseLineY[this.yaxisIndex] * 2 : 0);\n        x = w.globals.padHorizontal + (xDivision - barWidth * this.seriesLen) / 2;\n      }\n\n      return {\n        x: x,\n        y: y,\n        yDivision: yDivision,\n        xDivision: xDivision,\n        barHeight: barHeight,\n        barWidth: barWidth,\n        zeroH: zeroH,\n        zeroW: zeroW\n      };\n    }\n  }, {\n    key: \"drawBarPaths\",\n    value: function drawBarPaths(_ref2) {\n      var indexes = _ref2.indexes,\n          barHeight = _ref2.barHeight,\n          strokeWidth = _ref2.strokeWidth,\n          pathTo = _ref2.pathTo,\n          pathFrom = _ref2.pathFrom,\n          zeroW = _ref2.zeroW,\n          x = _ref2.x,\n          y = _ref2.y,\n          yDivision = _ref2.yDivision,\n          elSeries = _ref2.elSeries;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var i = indexes.i;\n      var j = indexes.j;\n      var realIndex = indexes.realIndex;\n      var bc = indexes.bc;\n\n      if (w.globals.isXNumeric) {\n        y = (w.globals.seriesX[i][j] - w.globals.minX) / this.invertedXRatio - barHeight;\n      }\n\n      var barYPosition = y + barHeight * this.visibleI;\n      pathTo = graphics.move(zeroW, barYPosition);\n      pathFrom = graphics.move(zeroW, barYPosition);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.getPathFrom(realIndex, j);\n      }\n\n      if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {\n        x = zeroW;\n      } else {\n        x = zeroW + this.series[i][j] / this.invertedYRatio - (this.isReversed ? this.series[i][j] / this.invertedYRatio : 0) * 2;\n      }\n\n      var endingShapeOpts = {\n        barHeight: barHeight,\n        strokeWidth: strokeWidth,\n        barYPosition: barYPosition,\n        x: x,\n        zeroW: zeroW\n      };\n      var endingShape = this.barEndingShape(w, endingShapeOpts, this.series, i, j);\n      pathTo = pathTo + graphics.line(endingShape.newX, barYPosition) + endingShape.path + graphics.line(zeroW, barYPosition + barHeight - strokeWidth) + graphics.line(zeroW, barYPosition);\n      pathFrom = pathFrom + graphics.line(zeroW, barYPosition) + endingShape.ending_p_from + graphics.line(zeroW, barYPosition + barHeight - strokeWidth) + graphics.line(zeroW, barYPosition + barHeight - strokeWidth) + graphics.line(zeroW, barYPosition);\n\n      if (!w.globals.isXNumeric) {\n        y = y + yDivision;\n      }\n\n      if (this.barOptions.colors.backgroundBarColors.length > 0 && i === 0) {\n        if (bc >= this.barOptions.colors.backgroundBarColors.length) {\n          bc = 0;\n        }\n\n        var bcolor = this.barOptions.colors.backgroundBarColors[bc];\n        var rect = graphics.drawRect(0, barYPosition - barHeight * this.visibleI, w.globals.gridWidth, barHeight * this.seriesLen, 0, bcolor, this.barOptions.colors.backgroundBarOpacity);\n        elSeries.add(rect);\n        rect.node.classList.add('apexcharts-backgroundBar');\n      }\n\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: x,\n        y: y,\n        barYPosition: barYPosition\n      };\n    }\n  }, {\n    key: \"drawColumnPaths\",\n    value: function drawColumnPaths(_ref3) {\n      var indexes = _ref3.indexes,\n          x = _ref3.x,\n          y = _ref3.y,\n          xDivision = _ref3.xDivision,\n          pathTo = _ref3.pathTo,\n          pathFrom = _ref3.pathFrom,\n          barWidth = _ref3.barWidth,\n          zeroH = _ref3.zeroH,\n          strokeWidth = _ref3.strokeWidth,\n          elSeries = _ref3.elSeries;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var i = indexes.i;\n      var j = indexes.j;\n      var realIndex = indexes.realIndex;\n      var bc = indexes.bc;\n\n      if (w.globals.isXNumeric) {\n        x = (w.globals.seriesX[i][j] - w.globals.minX) / this.xRatio - barWidth / 2;\n      }\n\n      var barXPosition = x + barWidth * this.visibleI;\n      pathTo = graphics.move(barXPosition, zeroH);\n      pathFrom = graphics.move(barXPosition, zeroH);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.getPathFrom(realIndex, j);\n      }\n\n      if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {\n        y = zeroH;\n      } else {\n        y = zeroH - this.series[i][j] / this.yRatio[this.yaxisIndex] + (this.isReversed ? this.series[i][j] / this.yRatio[this.yaxisIndex] : 0) * 2;\n      }\n\n      var endingShapeOpts = {\n        barWidth: barWidth,\n        strokeWidth: strokeWidth,\n        barXPosition: barXPosition,\n        y: y,\n        zeroH: zeroH\n      };\n      var endingShape = this.barEndingShape(w, endingShapeOpts, this.series, i, j);\n      pathTo = pathTo + graphics.line(barXPosition, endingShape.newY) + endingShape.path + graphics.line(barXPosition + barWidth - strokeWidth, zeroH) + graphics.line(barXPosition - strokeWidth / 2, zeroH);\n      pathFrom = pathFrom + graphics.line(barXPosition, zeroH) + endingShape.ending_p_from + graphics.line(barXPosition + barWidth - strokeWidth, zeroH) + graphics.line(barXPosition + barWidth - strokeWidth, zeroH) + graphics.line(barXPosition - strokeWidth / 2, zeroH);\n\n      if (!w.globals.isXNumeric) {\n        x = x + xDivision;\n      }\n\n      if (this.barOptions.colors.backgroundBarColors.length > 0 && i === 0) {\n        if (bc >= this.barOptions.colors.backgroundBarColors.length) {\n          bc = 0;\n        }\n\n        var bcolor = this.barOptions.colors.backgroundBarColors[bc];\n        var rect = graphics.drawRect(barXPosition - barWidth * this.visibleI, 0, barWidth * this.seriesLen, w.globals.gridHeight, 0, bcolor, this.barOptions.colors.backgroundBarOpacity);\n        elSeries.add(rect);\n        rect.node.classList.add('apexcharts-backgroundBar');\n      }\n\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: x,\n        y: y,\n        barXPosition: barXPosition\n      };\n    }\n    /** getPathFrom is a common function for bars/columns which is used to get previous paths when data changes.\n     * @memberof Bar\n     * @param {int} realIndex - current iterating i\n     * @param {int} j - current iterating series's j index\n     * @return {string} pathFrom is the string which will be appended in animations\n     **/\n\n  }, {\n    key: \"getPathFrom\",\n    value: function getPathFrom(realIndex, j) {\n      var w = this.w;\n      var pathFrom;\n\n      for (var pp = 0; pp < w.globals.previousPaths.length; pp++) {\n        var gpp = w.globals.previousPaths[pp];\n\n        if (gpp.paths.length > 0 && parseInt(gpp.realIndex) === parseInt(realIndex)) {\n          if (typeof w.globals.previousPaths[pp].paths[j] !== 'undefined') {\n            pathFrom = w.globals.previousPaths[pp].paths[j].d;\n          }\n        }\n      }\n\n      return pathFrom;\n    }\n    /** calculateBarDataLabels is used to calculate the positions for the data-labels\n     * It also sets the element's data attr for bars and calls drawCalculatedBarDataLabels()\n     * @memberof Bar\n     * @param {object} {barProps} most of the bar properties used throughout the bar\n     * drawing function\n     * @return {object} dataLabels node-element which you can append later\n     **/\n\n  }, {\n    key: \"calculateDataLabelsPos\",\n    value: function calculateDataLabelsPos(_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y,\n          i = _ref4.i,\n          j = _ref4.j,\n          realIndex = _ref4.realIndex,\n          series = _ref4.series,\n          barHeight = _ref4.barHeight,\n          barWidth = _ref4.barWidth,\n          visibleSeries = _ref4.visibleSeries,\n          renderedPath = _ref4.renderedPath;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var strokeWidth = Array.isArray(this.strokeWidth) ? this.strokeWidth[realIndex] : this.strokeWidth;\n      var bcx = x + parseFloat(barWidth * visibleSeries);\n      var bcy = y + parseFloat(barHeight * visibleSeries);\n\n      if (w.globals.isXNumeric) {\n        bcx = x + parseFloat(barWidth * (visibleSeries + 1)) - strokeWidth;\n        bcy = y + parseFloat(barHeight * (visibleSeries + 1)) - strokeWidth;\n      }\n\n      var dataLabels = null;\n      var dataLabelsX = x;\n      var dataLabelsY = y;\n      var dataLabelsPos = {};\n      var dataLabelsConfig = w.config.dataLabels;\n      var barDataLabelsConfig = this.barOptions.dataLabels;\n      var offX = dataLabelsConfig.offsetX;\n      var offY = dataLabelsConfig.offsetY;\n      var textRects = {\n        width: 0,\n        height: 0\n      };\n\n      if (w.config.dataLabels.enabled) {\n        textRects = graphics.getTextRects(w.globals.yLabelFormatters[0](w.globals.maxY), parseInt(dataLabelsConfig.style.fontSize));\n      }\n\n      if (this.isHorizontal) {\n        dataLabelsPos = this.calculateBarsDataLabelsPosition({\n          x: x,\n          y: y,\n          i: i,\n          j: j,\n          renderedPath: renderedPath,\n          bcy: bcy,\n          barHeight: barHeight,\n          textRects: textRects,\n          strokeWidth: strokeWidth,\n          dataLabelsX: dataLabelsX,\n          dataLabelsY: dataLabelsY,\n          barDataLabelsConfig: barDataLabelsConfig,\n          offX: offX,\n          offY: offY\n        });\n      } else {\n        dataLabelsPos = this.calculateColumnsDataLabelsPosition({\n          x: x,\n          y: y,\n          i: i,\n          j: j,\n          renderedPath: renderedPath,\n          realIndex: realIndex,\n          bcx: bcx,\n          bcy: bcy,\n          barHeight: barHeight,\n          barWidth: barWidth,\n          textRects: textRects,\n          strokeWidth: strokeWidth,\n          dataLabelsY: dataLabelsY,\n          barDataLabelsConfig: barDataLabelsConfig,\n          offX: offX,\n          offY: offY\n        });\n      }\n\n      renderedPath.attr({\n        cy: dataLabelsPos.bcy,\n        cx: dataLabelsPos.bcx,\n        j: j,\n        val: series[i][j],\n        barHeight: barHeight,\n        barWidth: barWidth\n      });\n      dataLabels = this.drawCalculatedDataLabels({\n        x: dataLabelsPos.dataLabelsX,\n        y: dataLabelsPos.dataLabelsY,\n        val: series[i][j],\n        i: realIndex,\n        j: j,\n        barWidth: barWidth,\n        barHeight: barHeight,\n        textRects: textRects,\n        dataLabelsConfig: dataLabelsConfig\n      });\n      return dataLabels;\n    }\n  }, {\n    key: \"calculateColumnsDataLabelsPosition\",\n    value: function calculateColumnsDataLabelsPosition(opts) {\n      var w = this.w;\n      var i = opts.i,\n          j = opts.j,\n          y = opts.y,\n          bcx = opts.bcx,\n          barWidth = opts.barWidth,\n          textRects = opts.textRects,\n          dataLabelsY = opts.dataLabelsY,\n          barDataLabelsConfig = opts.barDataLabelsConfig,\n          strokeWidth = opts.strokeWidth,\n          offX = opts.offX,\n          offY = opts.offY;\n      var dataLabelsX;\n      var barHeight = this.series[i][j] / this.yRatio[this.yaxisIndex];\n      var dataPointsDividedWidth = w.globals.gridWidth / w.globals.dataPoints;\n      bcx = bcx - strokeWidth / 2;\n\n      if (w.globals.isXNumeric) {\n        dataLabelsX = bcx - barWidth / 2 + offX;\n      } else {\n        dataLabelsX = bcx - dataPointsDividedWidth + barWidth / 2 + offX;\n      }\n\n      var valIsNegative = this.series[i][j] <= 0;\n\n      if (this.isReversed) {\n        y = y - barHeight;\n      }\n\n      switch (barDataLabelsConfig.position) {\n        case 'center':\n          if (valIsNegative) {\n            dataLabelsY = y + barHeight / 2 + textRects.height / 2 + offY;\n          } else {\n            dataLabelsY = y + barHeight / 2 + textRects.height / 2 - offY;\n          }\n\n          break;\n\n        case 'bottom':\n          if (valIsNegative) {\n            dataLabelsY = y + barHeight + textRects.height + strokeWidth + offY;\n          } else {\n            dataLabelsY = y + barHeight - textRects.height / 2 + strokeWidth - offY;\n          }\n\n          break;\n\n        case 'top':\n          if (valIsNegative) {\n            dataLabelsY = y - textRects.height / 2 - offY;\n          } else {\n            dataLabelsY = y + textRects.height + offY;\n          }\n\n          break;\n      }\n\n      return {\n        bcx: bcx,\n        bcy: y,\n        dataLabelsX: dataLabelsX,\n        dataLabelsY: dataLabelsY\n      };\n    }\n  }, {\n    key: \"calculateBarsDataLabelsPosition\",\n    value: function calculateBarsDataLabelsPosition(opts) {\n      var w = this.w;\n      var x = opts.x,\n          i = opts.i,\n          j = opts.j,\n          bcy = opts.bcy,\n          barHeight = opts.barHeight,\n          textRects = opts.textRects,\n          dataLabelsX = opts.dataLabelsX,\n          strokeWidth = opts.strokeWidth,\n          barDataLabelsConfig = opts.barDataLabelsConfig,\n          offX = opts.offX,\n          offY = opts.offY;\n      var dataPointsDividedHeight = w.globals.gridHeight / w.globals.dataPoints;\n      var dataLabelsY = bcy - dataPointsDividedHeight + barHeight / 2 + textRects.height / 2 + offY - 3;\n      var barWidth = this.series[i][j] / this.invertedYRatio;\n      var valIsNegative = this.series[i][j] <= 0;\n\n      if (this.isReversed) {\n        x = x + barWidth;\n      }\n\n      switch (barDataLabelsConfig.position) {\n        case 'center':\n          if (valIsNegative) {\n            dataLabelsX = x - barWidth / 2 - offX;\n          } else {\n            dataLabelsX = x - barWidth / 2 + offX;\n          }\n\n          break;\n\n        case 'bottom':\n          if (valIsNegative) {\n            dataLabelsX = x - barWidth - strokeWidth - Math.round(textRects.width / 2) - offX;\n          } else {\n            dataLabelsX = x - barWidth + strokeWidth + Math.round(textRects.width / 2) + offX;\n          }\n\n          break;\n\n        case 'top':\n          if (valIsNegative) {\n            dataLabelsX = x - strokeWidth + Math.round(textRects.width / 2) - offX;\n          } else {\n            dataLabelsX = x - strokeWidth - Math.round(textRects.width / 2) + offX;\n          }\n\n          break;\n      } // commenting below lines as this causes overlaps over other labels\n      // if (dataLabelsX < 0) {\n      //   dataLabelsX = textRects.width + strokeWidth\n      // } else if (dataLabelsX + textRects.width / 2 > w.globals.gridWidth) {\n      //   dataLabelsX = dataLabelsX - textRects.width - strokeWidth\n      // }\n\n\n      return {\n        bcx: x,\n        bcy: bcy,\n        dataLabelsX: dataLabelsX,\n        dataLabelsY: dataLabelsY\n      };\n    }\n  }, {\n    key: \"drawCalculatedDataLabels\",\n    value: function drawCalculatedDataLabels(_ref5) {\n      var x = _ref5.x,\n          y = _ref5.y,\n          val = _ref5.val,\n          i = _ref5.i,\n          j = _ref5.j,\n          textRects = _ref5.textRects,\n          barHeight = _ref5.barHeight,\n          barWidth = _ref5.barWidth,\n          dataLabelsConfig = _ref5.dataLabelsConfig;\n      var w = this.w;\n      var dataLabels = new DataLabels(this.ctx);\n      var graphics = new Graphics(this.ctx);\n      var formatter = dataLabelsConfig.formatter;\n      var elDataLabelsWrap = null;\n      var isSeriesNotCollapsed = w.globals.collapsedSeriesIndices.indexOf(i) > -1;\n\n      if (dataLabelsConfig.enabled && !isSeriesNotCollapsed) {\n        elDataLabelsWrap = graphics.group({\n          class: 'apexcharts-data-labels'\n        });\n        var text = '';\n\n        if (typeof val !== 'undefined' && val !== null) {\n          text = formatter(val, {\n            seriesIndex: i,\n            dataPointIndex: j,\n            w: w\n          });\n        }\n\n        if (this.isHorizontal) {\n          barWidth = this.series[i][j] / this.yRatio[this.yaxisIndex];\n        } else {\n          barHeight = this.series[i][j] / this.yRatio[this.yaxisIndex];\n        }\n\n        if (textRects.width / 1.6 > barWidth || textRects.height > barHeight) {\n          text = '';\n        }\n\n        dataLabels.plotDataLabelsText({\n          x: x,\n          y: y,\n          text: text,\n          i: i,\n          j: j,\n          parent: elDataLabelsWrap,\n          dataLabelsConfig: dataLabelsConfig,\n          alwaysDrawDataLabel: true,\n          offsetCorrection: true\n        });\n      }\n\n      return elDataLabelsWrap;\n    }\n    /** barEndingShape draws the various shapes on top of bars/columns\n     * @memberof Bar\n     * @param {object} w - chart context\n     * @param {object} opts - consists several properties like barHeight/barWidth\n     * @param {array} series - global primary series\n     * @param {int} i - current iterating series's index\n     * @param {int} j - series's j of i\n     * @return {object} path - ending shape whether round/arrow\n     *         ending_p_from - similar to pathFrom\n     *         newY - which is calculated from existing y and new shape's top\n     **/\n\n  }, {\n    key: \"barEndingShape\",\n    value: function barEndingShape(w, opts, series, i, j) {\n      var graphics = new Graphics(this.ctx);\n\n      if (this.isHorizontal) {\n        var endingShape = null;\n        var endingShapeFrom = '';\n        var x = opts.x;\n\n        if (typeof series[i][j] !== 'undefined' || series[i][j] !== null) {\n          var inverse = series[i][j] < 0;\n          var eX = opts.barHeight / 2 - opts.strokeWidth;\n          if (inverse) eX = -opts.barHeight / 2 - opts.strokeWidth;\n\n          if (!w.config.chart.stacked) {\n            if (this.barOptions.endingShape === 'rounded') {\n              x = opts.x - eX / 2;\n            }\n          }\n\n          switch (this.barOptions.endingShape) {\n            case 'flat':\n              endingShape = graphics.line(x, opts.barYPosition + opts.barHeight - opts.strokeWidth);\n              break;\n\n            case 'rounded':\n              endingShape = graphics.quadraticCurve(x + eX, opts.barYPosition + (opts.barHeight - opts.strokeWidth) / 2, x, opts.barYPosition + opts.barHeight - opts.strokeWidth);\n              break;\n          }\n        }\n\n        return {\n          path: endingShape,\n          ending_p_from: endingShapeFrom,\n          newX: x\n        };\n      } else {\n        var _endingShape = null;\n        var _endingShapeFrom = '';\n        var y = opts.y;\n\n        if (typeof series[i][j] !== 'undefined' || series[i][j] !== null) {\n          var _inverse = series[i][j] < 0;\n\n          var eY = opts.barWidth / 2 - opts.strokeWidth;\n          if (_inverse) eY = -opts.barWidth / 2 - opts.strokeWidth;\n\n          if (!w.config.chart.stacked) {\n            // the shape exceeds the chart height, hence reduce y\n            if (this.barOptions.endingShape === 'rounded') {\n              y = y + eY / 2;\n            }\n          }\n\n          switch (this.barOptions.endingShape) {\n            case 'flat':\n              _endingShape = graphics.line(opts.barXPosition + opts.barWidth - opts.strokeWidth, y);\n              break;\n\n            case 'rounded':\n              _endingShape = graphics.quadraticCurve(opts.barXPosition + (opts.barWidth - opts.strokeWidth) / 2, y - eY, opts.barXPosition + opts.barWidth - opts.strokeWidth, y);\n              break;\n          }\n        }\n\n        return {\n          path: _endingShape,\n          ending_p_from: _endingShapeFrom,\n          newY: y\n        };\n      }\n    }\n  }]);\n\n  return Bar;\n}();\n\n/**\n * ApexCharts BarStacked Class responsible for drawing both Stacked Columns and Bars.\n *\n * @module BarStacked\n * The whole calculation for stacked bar/column is different from normal bar/column,\n * hence it makes sense to derive a new class for it extending most of the props of Parent Bar\n **/\n\nvar BarStacked =\n/*#__PURE__*/\nfunction (_Bar) {\n  _inherits(BarStacked, _Bar);\n\n  function BarStacked() {\n    _classCallCheck(this, BarStacked);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BarStacked).apply(this, arguments));\n  }\n\n  _createClass(BarStacked, [{\n    key: \"draw\",\n    value: function draw(series, seriesIndex) {\n      var w = this.w;\n      this.graphics = new Graphics(this.ctx);\n      this.fill = new Fill(this.ctx);\n      this.bar = new Bar(this.ctx, this.xyRatios);\n      var coreUtils = new CoreUtils(this.ctx, w);\n      series = coreUtils.getLogSeries(series);\n      this.yRatio = coreUtils.getLogYRatios(this.yRatio);\n      this.initVariables(series);\n\n      if (w.config.chart.stackType === '100%') {\n        series = w.globals.seriesPercent.slice();\n      }\n\n      this.series = series;\n      this.totalItems = 0;\n      this.prevY = []; // y position on chart\n\n      this.prevX = []; // x position on chart\n\n      this.prevYF = []; // y position including shapes on chart\n\n      this.prevXF = []; // x position including shapes on chart\n\n      this.prevYVal = []; // y values (series[i][j]) in columns\n\n      this.prevXVal = []; // x values (series[i][j]) in bars\n\n      this.xArrj = []; // xj indicates x position on graph in bars\n\n      this.xArrjF = []; // xjF indicates bar's x position + endingshape's positions in bars\n\n      this.xArrjVal = []; // x val means the actual series's y values in horizontal/bars\n\n      this.yArrj = []; // yj indicates y position on graph in columns\n\n      this.yArrjF = []; // yjF indicates bar's y position + endingshape's positions in columns\n\n      this.yArrjVal = []; // y val means the actual series's y values in columns\n\n      for (var sl = 0; sl < series.length; sl++) {\n        if (series[sl].length > 0) {\n          this.totalItems += series[sl].length;\n        }\n      }\n\n      var ret = this.graphics.group({\n        class: 'apexcharts-bar-series apexcharts-plot-series'\n      });\n      var x = 0;\n      var y = 0;\n\n      for (var i = 0, bc = 0; i < series.length; i++, bc++) {\n        var pathTo = void 0,\n            pathFrom = void 0;\n        var xDivision = void 0; // xDivision is the GRIDWIDTH divided by number of datapoints (columns)\n\n        var yDivision = void 0; // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)\n\n        var zeroH = void 0; // zeroH is the baseline where 0 meets y axis\n\n        var zeroW = void 0; // zeroW is the baseline where 0 meets x axis\n\n        var xArrValues = [];\n        var yArrValues = [];\n        var realIndex = w.globals.comboCharts ? seriesIndex[i] : i;\n\n        if (this.yRatio.length > 1) {\n          this.yaxisIndex = realIndex;\n        }\n\n        this.isReversed = w.config.yaxis[this.yaxisIndex] && w.config.yaxis[this.yaxisIndex].reversed; // el to which series will be drawn\n\n        var elSeries = this.graphics.group({\n          class: \"apexcharts-series \".concat(Utils.escapeString(w.globals.seriesNames[realIndex])),\n          rel: i + 1,\n          'data:realIndex': realIndex\n        }); // eldatalabels\n\n        var elDataLabelsWrap = this.graphics.group({\n          class: 'apexcharts-datalabels'\n        });\n        var strokeWidth = 0;\n        var barHeight = 0;\n        var barWidth = 0;\n        var initPositions = this.initialPositions(x, y, xDivision, yDivision, zeroH, zeroW);\n        y = initPositions.y;\n        barHeight = initPositions.barHeight;\n        yDivision = initPositions.yDivision;\n        zeroW = initPositions.zeroW;\n        x = initPositions.x;\n        barWidth = initPositions.barWidth;\n        xDivision = initPositions.xDivision;\n        zeroH = initPositions.zeroH;\n        this.yArrj = [];\n        this.yArrjF = [];\n        this.yArrjVal = [];\n        this.xArrj = [];\n        this.xArrjF = [];\n        this.xArrjVal = []; // if (!this.horizontal) {\n        // this.xArrj.push(x + barWidth / 2)\n        // }\n\n        for (var j = 0; j < w.globals.dataPoints; j++) {\n          if (w.config.stroke.show) {\n            if (this.isNullValue) {\n              strokeWidth = 0;\n            } else {\n              strokeWidth = Array.isArray(this.strokeWidth) ? this.strokeWidth[realIndex] : this.strokeWidth;\n            }\n          }\n\n          var paths = null;\n\n          if (this.isHorizontal) {\n            paths = this.drawBarPaths({\n              indexes: {\n                i: i,\n                j: j,\n                realIndex: realIndex,\n                bc: bc\n              },\n              barHeight: barHeight,\n              strokeWidth: strokeWidth,\n              pathTo: pathTo,\n              pathFrom: pathFrom,\n              zeroW: zeroW,\n              x: x,\n              y: y,\n              yDivision: yDivision,\n              elSeries: elSeries\n            });\n          } else {\n            paths = this.drawColumnPaths({\n              indexes: {\n                i: i,\n                j: j,\n                realIndex: realIndex,\n                bc: bc\n              },\n              x: x,\n              y: y,\n              xDivision: xDivision,\n              pathTo: pathTo,\n              pathFrom: pathFrom,\n              barWidth: barWidth,\n              zeroH: zeroH,\n              strokeWidth: strokeWidth,\n              elSeries: elSeries\n            });\n          }\n\n          pathTo = paths.pathTo;\n          pathFrom = paths.pathFrom;\n          y = paths.y;\n          x = paths.x;\n          xArrValues.push(x);\n          yArrValues.push(y);\n          var pathFill = this.bar.getPathFillColor(series, i, j, realIndex);\n          elSeries = this.renderSeries({\n            realIndex: realIndex,\n            pathFill: pathFill,\n            j: j,\n            i: i,\n            pathFrom: pathFrom,\n            pathTo: pathTo,\n            strokeWidth: strokeWidth,\n            elSeries: elSeries,\n            x: x,\n            y: y,\n            series: series,\n            barHeight: barHeight,\n            barWidth: barWidth,\n            elDataLabelsWrap: elDataLabelsWrap,\n            type: 'bar',\n            visibleSeries: 0\n          });\n        } // push all x val arrays into main xArr\n\n\n        w.globals.seriesXvalues[realIndex] = xArrValues;\n        w.globals.seriesYvalues[realIndex] = yArrValues; // push all current y values array to main PrevY Array\n\n        this.prevY.push(this.yArrj);\n        this.prevYF.push(this.yArrjF);\n        this.prevYVal.push(this.yArrjVal);\n        this.prevX.push(this.xArrj);\n        this.prevXF.push(this.xArrjF);\n        this.prevXVal.push(this.xArrjVal);\n        ret.add(elSeries);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"initialPositions\",\n    value: function initialPositions(x, y, xDivision, yDivision, zeroH, zeroW) {\n      var w = this.w;\n      var barHeight, barWidth;\n\n      if (this.isHorizontal) {\n        // height divided into equal parts\n        yDivision = w.globals.gridHeight / w.globals.dataPoints;\n        barHeight = yDivision;\n        barHeight = barHeight * parseInt(w.config.plotOptions.bar.barHeight) / 100;\n        zeroW = this.baseLineInvertedY + w.globals.padHorizontal + (this.isReversed ? w.globals.gridWidth : 0) - (this.isReversed ? this.baseLineInvertedY * 2 : 0); // initial y position is half of barHeight * half of number of Bars\n\n        y = (yDivision - barHeight) / 2;\n      } else {\n        // width divided into equal parts\n        xDivision = w.globals.gridWidth / w.globals.dataPoints;\n        barWidth = xDivision;\n\n        if (w.globals.isXNumeric) {\n          xDivision = w.globals.minXDiff / this.xRatio;\n          barWidth = xDivision * parseInt(this.barOptions.columnWidth) / 100;\n        } else {\n          barWidth = barWidth * parseInt(w.config.plotOptions.bar.columnWidth) / 100;\n        }\n\n        zeroH = this.baseLineY[this.yaxisIndex] + (this.isReversed ? w.globals.gridHeight : 0) - (this.isReversed ? this.baseLineY[this.yaxisIndex] * 2 : 0); // initial x position is one third of barWidth\n\n        x = w.globals.padHorizontal + (xDivision - barWidth) / 2;\n      }\n\n      return {\n        x: x,\n        y: y,\n        yDivision: yDivision,\n        xDivision: xDivision,\n        barHeight: barHeight,\n        barWidth: barWidth,\n        zeroH: zeroH,\n        zeroW: zeroW\n      };\n    }\n  }, {\n    key: \"drawBarPaths\",\n    value: function drawBarPaths(_ref) {\n      var indexes = _ref.indexes,\n          barHeight = _ref.barHeight,\n          strokeWidth = _ref.strokeWidth,\n          pathTo = _ref.pathTo,\n          pathFrom = _ref.pathFrom,\n          zeroW = _ref.zeroW,\n          x = _ref.x,\n          y = _ref.y,\n          yDivision = _ref.yDivision,\n          elSeries = _ref.elSeries;\n      var w = this.w;\n      var barYPosition = y;\n      var barXPosition;\n      var i = indexes.i;\n      var j = indexes.j;\n      var realIndex = indexes.realIndex;\n      var bc = indexes.bc;\n      var prevBarW = 0;\n\n      for (var k = 0; k < this.prevXF.length; k++) {\n        prevBarW = prevBarW + this.prevXF[k][j];\n      }\n\n      if (i > 0) {\n        var bXP = zeroW;\n\n        if (this.prevXVal[i - 1][j] < 0) {\n          if (this.series[i][j] >= 0) {\n            bXP = this.prevX[i - 1][j] + prevBarW - (this.isReversed ? prevBarW : 0) * 2;\n          } else {\n            bXP = this.prevX[i - 1][j];\n          }\n        } else if (this.prevXVal[i - 1][j] >= 0) {\n          if (this.series[i][j] >= 0) {\n            bXP = this.prevX[i - 1][j];\n          } else {\n            bXP = this.prevX[i - 1][j] - prevBarW + (this.isReversed ? prevBarW : 0) * 2;\n          }\n        }\n\n        barXPosition = bXP;\n      } else {\n        // the first series will not have prevX values\n        barXPosition = zeroW;\n      }\n\n      if (this.series[i][j] === null) {\n        x = barXPosition;\n      } else {\n        x = barXPosition + this.series[i][j] / this.invertedYRatio - (this.isReversed ? this.series[i][j] / this.invertedYRatio : 0) * 2;\n      }\n\n      var endingShapeOpts = {\n        barHeight: barHeight,\n        strokeWidth: strokeWidth,\n        invertedYRatio: this.invertedYRatio,\n        barYPosition: barYPosition,\n        x: x\n      };\n      var endingShape = this.bar.barEndingShape(w, endingShapeOpts, this.series, i, j);\n\n      if (this.series.length > 1 && i !== this.endingShapeOnSeriesNumber) {\n        // revert back to flat shape if not last series\n        endingShape.path = this.graphics.line(endingShape.newX, barYPosition + barHeight - strokeWidth);\n      }\n\n      this.xArrj.push(endingShape.newX);\n      this.xArrjF.push(Math.abs(barXPosition - endingShape.newX));\n      this.xArrjVal.push(this.series[i][j]);\n      pathTo = this.graphics.move(barXPosition, barYPosition);\n      pathFrom = this.graphics.move(barXPosition, barYPosition);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.bar.getPathFrom(realIndex, j, false);\n      }\n\n      pathTo = pathTo + this.graphics.line(endingShape.newX, barYPosition) + endingShape.path + this.graphics.line(barXPosition, barYPosition + barHeight - strokeWidth) + this.graphics.line(barXPosition, barYPosition);\n      pathFrom = pathFrom + this.graphics.line(barXPosition, barYPosition) + this.graphics.line(barXPosition, barYPosition + barHeight - strokeWidth) + this.graphics.line(barXPosition, barYPosition + barHeight - strokeWidth) + this.graphics.line(barXPosition, barYPosition + barHeight - strokeWidth) + this.graphics.line(barXPosition, barYPosition);\n\n      if (w.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && i === 0) {\n        if (bc >= w.config.plotOptions.bar.colors.backgroundBarColors.length) {\n          bc = 0;\n        }\n\n        var bcolor = w.config.plotOptions.bar.colors.backgroundBarColors[bc];\n        var rect = this.graphics.drawRect(0, barYPosition, w.globals.gridWidth, barHeight, 0, bcolor, w.config.plotOptions.bar.colors.backgroundBarOpacity);\n        elSeries.add(rect);\n        rect.node.classList.add('apexcharts-backgroundBar');\n      }\n\n      y = y + yDivision;\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"drawColumnPaths\",\n    value: function drawColumnPaths(_ref2) {\n      var indexes = _ref2.indexes,\n          x = _ref2.x,\n          y = _ref2.y,\n          xDivision = _ref2.xDivision,\n          pathTo = _ref2.pathTo,\n          pathFrom = _ref2.pathFrom,\n          barWidth = _ref2.barWidth,\n          zeroH = _ref2.zeroH,\n          strokeWidth = _ref2.strokeWidth,\n          elSeries = _ref2.elSeries;\n      var w = this.w;\n      var i = indexes.i;\n      var j = indexes.j;\n      var realIndex = indexes.realIndex;\n      var bc = indexes.bc;\n\n      if (w.globals.isXNumeric) {\n        var seriesVal = w.globals.seriesX[i][j];\n        if (!seriesVal) seriesVal = 0;\n        x = (seriesVal - w.globals.minX) / this.xRatio - barWidth / 2;\n      }\n\n      var barXPosition = x;\n      var barYPosition;\n      var prevBarH = 0;\n\n      for (var k = 0; k < this.prevYF.length; k++) {\n        prevBarH = prevBarH + this.prevYF[k][j];\n      }\n\n      if (i > 0 && !w.globals.isXNumeric || i > 0 && w.globals.isXNumeric && w.globals.seriesX[i - 1][j] === w.globals.seriesX[i][j]) {\n        var bYP;\n        var prevYValue = this.prevY[i - 1][j];\n\n        if (this.prevYVal[i - 1][j] < 0) {\n          if (this.series[i][j] >= 0) {\n            bYP = prevYValue - prevBarH + (this.isReversed ? prevBarH : 0) * 2;\n          } else {\n            bYP = prevYValue;\n          }\n        } else {\n          if (this.series[i][j] >= 0) {\n            bYP = prevYValue;\n          } else {\n            bYP = prevYValue + prevBarH - (this.isReversed ? prevBarH : 0) * 2;\n          }\n        }\n\n        barYPosition = bYP;\n      } else {\n        // the first series will not have prevY values, also if the prev index's series X doesn't matches the current index's series X, then start from zero\n        barYPosition = w.globals.gridHeight - zeroH;\n      }\n\n      y = barYPosition - this.series[i][j] / this.yRatio[this.yaxisIndex] + (this.isReversed ? this.series[i][j] / this.yRatio[this.yaxisIndex] : 0) * 2;\n      var endingShapeOpts = {\n        barWidth: barWidth,\n        strokeWidth: strokeWidth,\n        yRatio: this.yRatio[this.yaxisIndex],\n        barXPosition: barXPosition,\n        y: y\n      };\n      var endingShape = this.bar.barEndingShape(w, endingShapeOpts, this.series, i, j);\n      this.yArrj.push(endingShape.newY);\n      this.yArrjF.push(Math.abs(barYPosition - endingShape.newY));\n      this.yArrjVal.push(this.series[i][j]);\n      pathTo = this.graphics.move(barXPosition, barYPosition);\n      pathFrom = this.graphics.move(barXPosition, barYPosition);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.bar.getPathFrom(realIndex, j, false);\n      }\n\n      pathTo = pathTo + this.graphics.line(barXPosition, endingShape.newY) + endingShape.path + this.graphics.line(barXPosition + barWidth - strokeWidth, barYPosition) + this.graphics.line(barXPosition - strokeWidth / 2, barYPosition);\n      pathFrom = pathFrom + this.graphics.line(barXPosition, barYPosition) + this.graphics.line(barXPosition + barWidth - strokeWidth, barYPosition) + this.graphics.line(barXPosition + barWidth - strokeWidth, barYPosition) + this.graphics.line(barXPosition + barWidth - strokeWidth, barYPosition) + this.graphics.line(barXPosition - strokeWidth / 2, barYPosition);\n\n      if (w.config.plotOptions.bar.colors.backgroundBarColors.length > 0 && i === 0) {\n        if (bc >= w.config.plotOptions.bar.colors.backgroundBarColors.length) {\n          bc = 0;\n        }\n\n        var bcolor = w.config.plotOptions.bar.colors.backgroundBarColors[bc];\n        var rect = this.graphics.drawRect(barXPosition, 0, barWidth, w.globals.gridHeight, 0, bcolor, w.config.plotOptions.bar.colors.backgroundBarOpacity);\n        elSeries.add(rect);\n        rect.node.classList.add('apexcharts-backgroundBar');\n      }\n\n      x = x + xDivision;\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: w.globals.isXNumeric ? x - xDivision : x,\n        y: y\n      };\n    }\n    /*\n     * When user clicks on legends, the collapsed series will be filled with [0,0,0,...,0]\n     * We need to make sure, that the last series is not [0,0,0,...,0]\n     * as we need to draw shapes on the last series (for stacked bars/columns only)\n     * Hence, we are collecting all inner arrays in series which has [0,0,0...,0]\n     **/\n\n  }, {\n    key: \"checkZeroSeries\",\n    value: function checkZeroSeries(_ref3) {\n      var series = _ref3.series;\n      var w = this.w;\n\n      for (var zs = 0; zs < series.length; zs++) {\n        var total = 0;\n\n        for (var zsj = 0; zsj < series[w.globals.maxValsInArrayIndex].length; zsj++) {\n          total += series[zs][zsj];\n        }\n\n        if (total === 0) {\n          this.zeroSerieses.push(zs);\n        }\n      } // After getting all zeroserieses, we need to ensure whether endingshapeonSeries is not in that zeroseries array\n\n\n      for (var s = series.length - 1; s >= 0; s--) {\n        if (this.zeroSerieses.indexOf(s) > -1 && s === this.endingShapeOnSeriesNumber) {\n          this.endingShapeOnSeriesNumber -= 1;\n        }\n      }\n    }\n  }]);\n\n  return BarStacked;\n}(Bar);\n\n/**\n * ApexCharts CandleStick Class responsible for drawing both Stacked Columns and Bars.\n *\n * @module CandleStick\n **/\n\nvar CandleStick =\n/*#__PURE__*/\nfunction (_Bar) {\n  _inherits(CandleStick, _Bar);\n\n  function CandleStick() {\n    _classCallCheck(this, CandleStick);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CandleStick).apply(this, arguments));\n  }\n\n  _createClass(CandleStick, [{\n    key: \"draw\",\n    value: function draw(series, seriesIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var fill = new Fill(this.ctx);\n      this.candlestickOptions = this.w.config.plotOptions.candlestick;\n      var coreUtils = new CoreUtils(this.ctx, w);\n      series = coreUtils.getLogSeries(series);\n      this.series = series;\n      this.yRatio = coreUtils.getLogYRatios(this.yRatio);\n      this.initVariables(series);\n      var ret = graphics.group({\n        class: 'apexcharts-candlestick-series apexcharts-plot-series'\n      });\n\n      for (var i = 0, bc = 0; i < series.length; i++, bc++) {\n        var pathTo = void 0,\n            pathFrom = void 0;\n        var x = void 0,\n            y = void 0,\n            xDivision = void 0,\n            // xDivision is the GRIDWIDTH divided by number of datapoints (columns)\n        zeroH = void 0; // zeroH is the baseline where 0 meets y axis\n\n        var yArrj = []; // hold y values of current iterating series\n\n        var xArrj = []; // hold x values of current iterating series\n\n        var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn\n\n        var elSeries = graphics.group({\n          class: \"apexcharts-series \".concat(Utils.escapeString(w.globals.seriesNames[realIndex])),\n          rel: i + 1,\n          'data:realIndex': realIndex\n        });\n\n        if (series[i].length > 0) {\n          this.visibleI = this.visibleI + 1;\n        }\n\n        var strokeWidth = 0;\n        var barHeight = 0;\n        var barWidth = 0;\n\n        if (this.yRatio.length > 1) {\n          this.yaxisIndex = realIndex;\n        }\n\n        var initPositions = this.initialPositions();\n        y = initPositions.y;\n        barHeight = initPositions.barHeight;\n        x = initPositions.x;\n        barWidth = initPositions.barWidth;\n        xDivision = initPositions.xDivision;\n        zeroH = initPositions.zeroH;\n        xArrj.push(x + barWidth / 2); // eldatalabels\n\n        var elDataLabelsWrap = graphics.group({\n          class: 'apexcharts-datalabels'\n        });\n\n        for (var j = 0, tj = w.globals.dataPoints; j < w.globals.dataPoints; j++, tj--) {\n          if (typeof this.series[i][j] === 'undefined' || series[i][j] === null) {\n            this.isNullValue = true;\n          } else {\n            this.isNullValue = false;\n          }\n\n          if (w.config.stroke.show) {\n            if (this.isNullValue) {\n              strokeWidth = 0;\n            } else {\n              strokeWidth = Array.isArray(this.strokeWidth) ? this.strokeWidth[realIndex] : this.strokeWidth;\n            }\n          }\n\n          var color = void 0;\n          var paths = this.drawCandleStickPaths({\n            indexes: {\n              i: i,\n              j: j,\n              realIndex: realIndex,\n              bc: bc\n            },\n            x: x,\n            y: y,\n            xDivision: xDivision,\n            pathTo: pathTo,\n            pathFrom: pathFrom,\n            barWidth: barWidth,\n            zeroH: zeroH,\n            strokeWidth: strokeWidth,\n            elSeries: elSeries\n          });\n          pathTo = paths.pathTo;\n          pathFrom = paths.pathFrom;\n          y = paths.y;\n          x = paths.x;\n          color = paths.color; // push current X\n\n          if (j > 0) {\n            xArrj.push(x + barWidth / 2);\n          }\n\n          yArrj.push(y);\n          var pathFill = fill.fillPath({\n            seriesNumber: realIndex,\n            color: color\n          });\n          var lineFill = this.candlestickOptions.wick.useFillColor ? color : undefined;\n          elSeries = this.renderSeries({\n            realIndex: realIndex,\n            pathFill: pathFill,\n            lineFill: lineFill,\n            j: j,\n            i: i,\n            pathFrom: pathFrom,\n            pathTo: pathTo,\n            strokeWidth: strokeWidth,\n            elSeries: elSeries,\n            x: x,\n            y: y,\n            series: series,\n            barHeight: barHeight,\n            barWidth: barWidth,\n            elDataLabelsWrap: elDataLabelsWrap,\n            visibleSeries: this.visibleI,\n            type: 'candlestick'\n          });\n        } // push all x val arrays into main xArr\n\n\n        w.globals.seriesXvalues[realIndex] = xArrj;\n        w.globals.seriesYvalues[realIndex] = yArrj;\n        ret.add(elSeries);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"drawCandleStickPaths\",\n    value: function drawCandleStickPaths(_ref) {\n      var indexes = _ref.indexes,\n          x = _ref.x,\n          y = _ref.y,\n          xDivision = _ref.xDivision,\n          pathTo = _ref.pathTo,\n          pathFrom = _ref.pathFrom,\n          barWidth = _ref.barWidth,\n          zeroH = _ref.zeroH,\n          strokeWidth = _ref.strokeWidth;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var i = indexes.i;\n      var j = indexes.j;\n      var isPositive = true;\n      var colorPos = w.config.plotOptions.candlestick.colors.upward;\n      var colorNeg = w.config.plotOptions.candlestick.colors.downward;\n      var yRatio = this.yRatio[this.yaxisIndex];\n      var realIndex = indexes.realIndex;\n      var ohlc = this.getOHLCValue(realIndex, j);\n      var l1 = zeroH;\n      var l2 = zeroH;\n\n      if (ohlc.o > ohlc.c) {\n        isPositive = false;\n      }\n\n      var y1 = Math.min(ohlc.o, ohlc.c);\n      var y2 = Math.max(ohlc.o, ohlc.c);\n\n      if (w.globals.isXNumeric) {\n        x = (w.globals.seriesX[i][j] - w.globals.minX) / this.xRatio - barWidth / 2;\n      }\n\n      var barXPosition = x + barWidth * this.visibleI;\n      pathTo = graphics.move(barXPosition, zeroH);\n      pathFrom = graphics.move(barXPosition, zeroH);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.getPathFrom(realIndex, j, true);\n      }\n\n      if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {\n        y1 = zeroH;\n      } else {\n        y1 = zeroH - y1 / yRatio;\n        y2 = zeroH - y2 / yRatio;\n        l1 = zeroH - ohlc.h / yRatio;\n        l2 = zeroH - ohlc.l / yRatio;\n      }\n\n      pathTo = graphics.move(barXPosition, y2) + graphics.line(barXPosition + barWidth / 2, y2) + graphics.line(barXPosition + barWidth / 2, l1) + graphics.line(barXPosition + barWidth / 2, y2) + graphics.line(barXPosition + barWidth, y2) + graphics.line(barXPosition + barWidth, y1) + graphics.line(barXPosition + barWidth / 2, y1) + graphics.line(barXPosition + barWidth / 2, l2) + graphics.line(barXPosition + barWidth / 2, y1) + graphics.line(barXPosition, y1) + graphics.line(barXPosition, y2 - strokeWidth / 2);\n\n      if (!w.globals.isXNumeric) {\n        x = x + xDivision;\n      }\n\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: x,\n        y: y2,\n        barXPosition: barXPosition,\n        color: isPositive ? colorPos : colorNeg\n      };\n    }\n  }, {\n    key: \"getOHLCValue\",\n    value: function getOHLCValue(i, j) {\n      var w = this.w;\n      return {\n        o: w.globals.seriesCandleO[i][j],\n        h: w.globals.seriesCandleH[i][j],\n        l: w.globals.seriesCandleL[i][j],\n        c: w.globals.seriesCandleC[i][j]\n      };\n    }\n  }]);\n\n  return CandleStick;\n}(Bar);\n\nvar Crosshairs =\n/*#__PURE__*/\nfunction () {\n  function Crosshairs(ctx) {\n    _classCallCheck(this, Crosshairs);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(Crosshairs, [{\n    key: \"drawXCrosshairs\",\n    value: function drawXCrosshairs() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var filters = new Filters(this.ctx);\n      var crosshairGradient = w.config.xaxis.crosshairs.fill.gradient;\n      var crosshairShadow = w.config.xaxis.crosshairs.dropShadow;\n      var fillType = w.config.xaxis.crosshairs.fill.type;\n      var gradientFrom = crosshairGradient.colorFrom;\n      var gradientTo = crosshairGradient.colorTo;\n      var opacityFrom = crosshairGradient.opacityFrom;\n      var opacityTo = crosshairGradient.opacityTo;\n      var stops = crosshairGradient.stops;\n      var shadow = 'none';\n      var dropShadow = crosshairShadow.enabled;\n      var shadowLeft = crosshairShadow.left;\n      var shadowTop = crosshairShadow.top;\n      var shadowBlur = crosshairShadow.blur;\n      var shadowColor = crosshairShadow.color;\n      var shadowOpacity = crosshairShadow.opacity;\n      var xcrosshairsFill = w.config.xaxis.crosshairs.fill.color;\n\n      if (w.config.xaxis.crosshairs.show) {\n        if (fillType === 'gradient') {\n          xcrosshairsFill = graphics.drawGradient('vertical', gradientFrom, gradientTo, opacityFrom, opacityTo, null, stops, null);\n        }\n\n        var xcrosshairs = graphics.drawRect();\n\n        if (w.config.xaxis.crosshairs.width === 1) {\n          // to prevent drawing 2 lines, convert rect to line\n          xcrosshairs = graphics.drawLine();\n        }\n\n        xcrosshairs.attr({\n          class: 'apexcharts-xcrosshairs',\n          x: 0,\n          y: 0,\n          y2: w.globals.gridHeight,\n          width: Utils.isNumber(w.config.xaxis.crosshairs.width) ? w.config.xaxis.crosshairs.width : 0,\n          height: w.globals.gridHeight,\n          fill: xcrosshairsFill,\n          filter: shadow,\n          'fill-opacity': w.config.xaxis.crosshairs.opacity,\n          stroke: w.config.xaxis.crosshairs.stroke.color,\n          'stroke-width': w.config.xaxis.crosshairs.stroke.width,\n          'stroke-dasharray': w.config.xaxis.crosshairs.stroke.dashArray\n        });\n\n        if (dropShadow) {\n          xcrosshairs = filters.dropShadow(xcrosshairs, {\n            left: shadowLeft,\n            top: shadowTop,\n            blur: shadowBlur,\n            color: shadowColor,\n            opacity: shadowOpacity\n          });\n        }\n\n        w.globals.dom.elGraphical.add(xcrosshairs);\n      }\n    }\n  }, {\n    key: \"drawYCrosshairs\",\n    value: function drawYCrosshairs() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var crosshair = w.config.yaxis[0].crosshairs;\n\n      if (w.config.yaxis[0].crosshairs.show) {\n        var ycrosshairs = graphics.drawLine(0, 0, w.globals.gridWidth, 0, crosshair.stroke.color, crosshair.stroke.dashArray, crosshair.stroke.width);\n        ycrosshairs.attr({\n          class: 'apexcharts-ycrosshairs'\n        });\n        w.globals.dom.elGraphical.add(ycrosshairs);\n      } // draw an invisible crosshair to help in positioning the yaxis tooltip\n\n\n      var ycrosshairsHidden = graphics.drawLine(0, 0, w.globals.gridWidth, 0, crosshair.stroke.color, 0, 0);\n      ycrosshairsHidden.attr({\n        class: 'apexcharts-ycrosshairs-hidden'\n      });\n      w.globals.dom.elGraphical.add(ycrosshairsHidden);\n    }\n  }]);\n\n  return Crosshairs;\n}();\n\n/**\n * ApexCharts HeatMap Class.\n * @module HeatMap\n **/\n\nvar HeatMap =\n/*#__PURE__*/\nfunction () {\n  function HeatMap(ctx, xyRatios) {\n    _classCallCheck(this, HeatMap);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.xRatio = xyRatios.xRatio;\n    this.yRatio = xyRatios.yRatio;\n    this.negRange = false;\n    this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation;\n    this.rectRadius = this.w.config.plotOptions.heatmap.radius;\n    this.strokeWidth = this.w.config.stroke.width;\n  }\n\n  _createClass(HeatMap, [{\n    key: \"draw\",\n    value: function draw(series) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var ret = graphics.group({\n        class: 'apexcharts-heatmap'\n      });\n      ret.attr('clip-path', \"url(#gridRectMask\".concat(w.globals.cuid, \")\")); // width divided into equal parts\n\n      var xDivision = w.globals.gridWidth / w.globals.dataPoints;\n      var yDivision = w.globals.gridHeight / w.globals.series.length;\n      var y1 = 0;\n      var rev = false;\n      this.checkColorRange();\n      var heatSeries = series.slice();\n\n      if (w.config.yaxis[0].reversed) {\n        rev = true;\n        heatSeries.reverse();\n      }\n\n      for (var i = rev ? 0 : heatSeries.length - 1; rev ? i < heatSeries.length : i >= 0; rev ? i++ : i--) {\n        // el to which series will be drawn\n        var elSeries = graphics.group({\n          class: \"apexcharts-series apexcharts-heatmap-series \".concat(Utils.escapeString(w.globals.seriesNames[i])),\n          rel: i + 1,\n          'data:realIndex': i\n        });\n\n        if (w.config.chart.dropShadow.enabled) {\n          var shadow = w.config.chart.dropShadow;\n          var filters = new Filters(this.ctx);\n          filters.dropShadow(elSeries, shadow);\n        }\n\n        var x1 = 0;\n\n        for (var j = 0; j < heatSeries[i].length; j++) {\n          var colorShadePercent = 1;\n          var heatColorProps = this.determineHeatColor(i, j);\n\n          if (w.globals.hasNegs || this.negRange) {\n            var shadeIntensity = w.config.plotOptions.heatmap.shadeIntensity;\n\n            if (heatColorProps.percent < 0) {\n              colorShadePercent = 1 - (1 + heatColorProps.percent / 100) * shadeIntensity;\n            } else {\n              colorShadePercent = (1 - heatColorProps.percent / 100) * shadeIntensity;\n            }\n          } else {\n            colorShadePercent = 1 - heatColorProps.percent / 100;\n          }\n\n          var color = heatColorProps.color;\n\n          if (w.config.plotOptions.heatmap.enableShades) {\n            var utils = new Utils();\n            color = Utils.hexToRgba(utils.shadeColor(colorShadePercent, heatColorProps.color), w.config.fill.opacity);\n          }\n\n          var radius = this.rectRadius;\n          var rect = graphics.drawRect(x1, y1, xDivision, yDivision, radius);\n          rect.attr({\n            cx: x1,\n            cy: y1\n          });\n          rect.node.classList.add('apexcharts-heatmap-rect');\n          elSeries.add(rect);\n          rect.attr({\n            fill: color,\n            i: i,\n            index: i,\n            j: j,\n            val: heatSeries[i][j],\n            'stroke-width': this.strokeWidth,\n            stroke: w.globals.stroke.colors[0],\n            color: color\n          });\n          rect.node.addEventListener('mouseenter', graphics.pathMouseEnter.bind(this, rect));\n          rect.node.addEventListener('mouseleave', graphics.pathMouseLeave.bind(this, rect));\n          rect.node.addEventListener('mousedown', graphics.pathMouseDown.bind(this, rect));\n\n          if (w.config.chart.animations.enabled && !w.globals.dataChanged) {\n            var speed = 1;\n\n            if (!w.globals.resized) {\n              speed = w.config.chart.animations.speed;\n            }\n\n            this.animateHeatMap(rect, x1, y1, xDivision, yDivision, speed);\n          }\n\n          if (w.globals.dataChanged) {\n            var _speed = 1;\n\n            if (this.dynamicAnim.enabled && w.globals.shouldAnimate) {\n              _speed = this.dynamicAnim.speed;\n              var colorFrom = w.globals.previousPaths[i] && w.globals.previousPaths[i][j] && w.globals.previousPaths[i][j].color;\n              if (!colorFrom) colorFrom = 'rgba(255, 255, 255, 0)';\n              this.animateHeatColor(rect, Utils.isColorHex(colorFrom) ? colorFrom : Utils.rgb2hex(colorFrom), Utils.isColorHex(color) ? color : Utils.rgb2hex(color), _speed);\n            }\n          }\n\n          var dataLabels = this.calculateHeatmapDataLabels({\n            x: x1,\n            y: y1,\n            i: i,\n            j: j,\n            series: heatSeries,\n            rectHeight: yDivision,\n            rectWidth: xDivision\n          });\n\n          if (dataLabels !== null) {\n            elSeries.add(dataLabels);\n          }\n\n          x1 = x1 + xDivision;\n        }\n\n        y1 = y1 + yDivision;\n        ret.add(elSeries);\n      } // adjust yaxis labels for heatmap\n\n\n      var yAxisScale = w.globals.yAxisScale[0].result.slice();\n\n      if (w.config.yaxis[0].reversed) {\n        yAxisScale.unshift('');\n      } else {\n        yAxisScale.push('');\n      }\n\n      w.globals.yAxisScale[0].result = yAxisScale;\n      var divisor = w.globals.gridHeight / w.globals.series.length;\n      w.config.yaxis[0].labels.offsetY = -(divisor / 2);\n      return ret;\n    }\n  }, {\n    key: \"checkColorRange\",\n    value: function checkColorRange() {\n      var _this = this;\n\n      var w = this.w;\n      var heatmap = w.config.plotOptions.heatmap;\n\n      if (heatmap.colorScale.ranges.length > 0) {\n        heatmap.colorScale.ranges.map(function (range, index) {\n          if (range.from < 0) {\n            _this.negRange = true;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"determineHeatColor\",\n    value: function determineHeatColor(i, j) {\n      var w = this.w;\n      var val = w.globals.series[i][j];\n      var heatmap = w.config.plotOptions.heatmap;\n      var seriesNumber = heatmap.colorScale.inverse ? j : i;\n      var color = w.globals.colors[seriesNumber];\n      var min = Math.min.apply(Math, _toConsumableArray(w.globals.series[i]));\n      var max = Math.max.apply(Math, _toConsumableArray(w.globals.series[i]));\n\n      if (!heatmap.distributed) {\n        min = w.globals.minY;\n        max = w.globals.maxY;\n      }\n\n      if (typeof heatmap.colorScale.min !== 'undefined') {\n        min = heatmap.colorScale.min < w.globals.minY ? heatmap.colorScale.min : w.globals.minY;\n        max = heatmap.colorScale.max > w.globals.maxY ? heatmap.colorScale.max : w.globals.maxY;\n      }\n\n      var total = Math.abs(max) + Math.abs(min);\n      var percent = 100 * val / (total === 0 ? total - 0.000001 : total);\n\n      if (heatmap.colorScale.ranges.length > 0) {\n        var colorRange = heatmap.colorScale.ranges;\n        colorRange.map(function (range, index) {\n          if (val >= range.from && val <= range.to) {\n            color = range.color;\n            min = range.from;\n            max = range.to;\n\n            var _total = Math.abs(max) + Math.abs(min);\n\n            percent = 100 * val / (_total === 0 ? _total - 0.000001 : _total);\n          }\n        });\n      }\n\n      return {\n        color: color,\n        percent: percent\n      };\n    }\n  }, {\n    key: \"calculateHeatmapDataLabels\",\n    value: function calculateHeatmapDataLabels(_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          i = _ref.i,\n          j = _ref.j,\n          series = _ref.series,\n          rectHeight = _ref.rectHeight,\n          rectWidth = _ref.rectWidth;\n      var w = this.w; // let graphics = new Graphics(this.ctx)\n\n      var dataLabelsConfig = w.config.dataLabels;\n      var graphics = new Graphics(this.ctx);\n      var dataLabels = new DataLabels(this.ctx);\n      var formatter = dataLabelsConfig.formatter;\n      var elDataLabelsWrap = null;\n\n      if (dataLabelsConfig.enabled) {\n        elDataLabelsWrap = graphics.group({\n          class: 'apexcharts-data-labels'\n        });\n        var offX = dataLabelsConfig.offsetX;\n        var offY = dataLabelsConfig.offsetY;\n        var dataLabelsX = x + rectWidth / 2 + offX;\n        var dataLabelsY = y + rectHeight / 2 + parseInt(dataLabelsConfig.style.fontSize) / 3 + offY;\n        var text = formatter(w.globals.series[i][j], {\n          seriesIndex: i,\n          dataPointIndex: j,\n          w: w\n        });\n        dataLabels.plotDataLabelsText({\n          x: dataLabelsX,\n          y: dataLabelsY,\n          text: text,\n          i: i,\n          j: j,\n          parent: elDataLabelsWrap,\n          dataLabelsConfig: dataLabelsConfig\n        });\n      }\n\n      return elDataLabelsWrap;\n    }\n  }, {\n    key: \"animateHeatMap\",\n    value: function animateHeatMap(el, x, y, width, height, speed) {\n      var _this2 = this;\n\n      var animations = new Animations(this.ctx);\n      animations.animateRect(el, {\n        x: x + width / 2,\n        y: y + height / 2,\n        width: 0,\n        height: 0\n      }, {\n        x: x,\n        y: y,\n        width: width,\n        height: height\n      }, speed, function () {\n        _this2.w.globals.animationEnded = true;\n      });\n    }\n  }, {\n    key: \"animateHeatColor\",\n    value: function animateHeatColor(el, colorFrom, colorTo, speed) {\n      el.attr({\n        fill: colorFrom\n      }).animate(speed).attr({\n        fill: colorTo\n      });\n    }\n  }]);\n\n  return HeatMap;\n}();\n\n/**\n * ApexCharts Pie Class for drawing Pie / Donut Charts.\n * @module Pie\n **/\n\nvar Pie =\n/*#__PURE__*/\nfunction () {\n  function Pie(ctx) {\n    _classCallCheck(this, Pie);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.chartType = this.w.config.chart.type;\n    this.initialAnim = this.w.config.chart.animations.enabled;\n    this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;\n    this.animBeginArr = [0];\n    this.animDur = 0;\n    this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels;\n    var w = this.w;\n    this.lineColorArr = w.globals.stroke.colors !== undefined ? w.globals.stroke.colors : w.globals.colors;\n    this.defaultSize = w.globals.svgHeight < w.globals.svgWidth ? w.globals.svgHeight - 35 : w.globals.gridWidth;\n    this.centerY = this.defaultSize / 2;\n    this.centerX = w.globals.gridWidth / 2;\n    this.fullAngle = 360;\n    this.size = 0;\n    this.donutSize = 0;\n    this.sliceLabels = [];\n    this.prevSectorAngleArr = []; // for dynamic animations\n  }\n\n  _createClass(Pie, [{\n    key: \"draw\",\n    value: function draw(series) {\n      var self = this;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var ret = graphics.group({\n        class: 'apexcharts-pie'\n      });\n      var total = 0;\n\n      for (var k = 0; k < series.length; k++) {\n        // CALCULATE THE TOTAL\n        total += Utils.negToZero(series[k]);\n      }\n\n      var sectorAngleArr = []; // el to which series will be drawn\n\n      var elSeries = graphics.group(); // prevent division by zero error if there is no data\n\n      if (total === 0) {\n        total = 0.00001;\n      }\n\n      for (var i = 0; i < series.length; i++) {\n        // CALCULATE THE ANGLES\n        var angle = this.fullAngle * Utils.negToZero(series[i]) / total;\n        sectorAngleArr.push(angle);\n      }\n\n      if (w.globals.dataChanged) {\n        var prevTotal = 0;\n\n        for (var _k = 0; _k < w.globals.previousPaths.length; _k++) {\n          // CALCULATE THE PREV TOTAL\n          prevTotal += Utils.negToZero(w.globals.previousPaths[_k]);\n        }\n\n        var previousAngle;\n\n        for (var _i = 0; _i < w.globals.previousPaths.length; _i++) {\n          // CALCULATE THE PREVIOUS ANGLES\n          previousAngle = this.fullAngle * Utils.negToZero(w.globals.previousPaths[_i]) / prevTotal;\n          this.prevSectorAngleArr.push(previousAngle);\n        }\n      }\n\n      this.size = this.defaultSize / 2.05 - w.config.stroke.width - w.config.chart.dropShadow.blur;\n\n      if (w.config.plotOptions.pie.size !== undefined) {\n        this.size = w.config.plotOptions.pie.size;\n      }\n\n      this.donutSize = this.size * parseInt(w.config.plotOptions.pie.donut.size) / 100;\n      var scaleSize = w.config.plotOptions.pie.customScale;\n      var halfW = w.globals.gridWidth / 2;\n      var halfH = w.globals.gridHeight / 2;\n      var translateX = halfW - w.globals.gridWidth / 2 * scaleSize;\n      var translateY = halfH - w.globals.gridHeight / 2 * scaleSize;\n\n      if (this.donutDataLabels.show) {\n        var dataLabels = this.renderInnerDataLabels(this.donutDataLabels, {\n          hollowSize: this.donutSize,\n          centerX: this.centerX,\n          centerY: this.centerY,\n          opacity: this.donutDataLabels.show,\n          translateX: translateX,\n          translateY: translateY\n        });\n        ret.add(dataLabels);\n      }\n\n      if (w.config.chart.type === 'donut') {\n        // draw the inner circle and add some text to it\n        var circle = graphics.drawCircle(this.donutSize);\n        circle.attr({\n          cx: this.centerX,\n          cy: this.centerY,\n          fill: w.config.plotOptions.pie.donut.background\n        });\n        elSeries.add(circle);\n      }\n\n      var elG = self.drawArcs(sectorAngleArr, series); // add slice dataLabels at the end\n\n      this.sliceLabels.forEach(function (s) {\n        elG.add(s);\n      });\n      elSeries.attr({\n        transform: \"translate(\".concat(translateX, \", \").concat(translateY - 5, \") scale(\").concat(scaleSize, \")\")\n      });\n      ret.attr({\n        'data:innerTranslateX': translateX,\n        'data:innerTranslateY': translateY - 25\n      });\n      elSeries.add(elG);\n      ret.add(elSeries);\n      return ret;\n    } // core function for drawing pie arcs\n\n  }, {\n    key: \"drawArcs\",\n    value: function drawArcs(sectorAngleArr, series) {\n      var w = this.w;\n      var filters = new Filters(this.ctx);\n      var graphics = new Graphics(this.ctx);\n      var fill = new Fill(this.ctx);\n      var g = graphics.group();\n      var startAngle = 0;\n      var prevStartAngle = 0;\n      var endAngle = 0;\n      var prevEndAngle = 0;\n      this.strokeWidth = w.config.stroke.show ? w.config.stroke.width : 0;\n\n      for (var i = 0; i < sectorAngleArr.length; i++) {\n        // if(sectorAngleArr[i]>0) {\n        var elPieArc = graphics.group({\n          class: \"apexcharts-series apexcharts-pie-series \".concat(Utils.escapeString(w.globals.seriesNames[i])),\n          id: 'apexcharts-series-' + i,\n          rel: i + 1\n        });\n        g.add(elPieArc);\n        startAngle = endAngle;\n        prevStartAngle = prevEndAngle;\n        endAngle = startAngle + sectorAngleArr[i];\n        prevEndAngle = prevStartAngle + this.prevSectorAngleArr[i];\n        var angle = endAngle - startAngle;\n        var pathFill = fill.fillPath({\n          seriesNumber: i,\n          size: this.size\n        }); // additionaly, pass size for gradient drawing in the fillPath function\n\n        var path = this.getChangedPath(prevStartAngle, prevEndAngle);\n        var elPath = graphics.drawPath({\n          d: path,\n          stroke: this.lineColorArr instanceof Array ? this.lineColorArr[i] : this.lineColorArr,\n          strokeWidth: this.strokeWidth,\n          fill: pathFill,\n          fillOpacity: w.config.fill.opacity,\n          classes: 'apexcharts-pie-area'\n        });\n        elPath.attr({\n          id: \"apexcharts-\".concat(w.config.chart.type, \"-slice-\").concat(i),\n          index: 0,\n          j: i\n        });\n\n        if (w.config.chart.dropShadow.enabled) {\n          var shadow = w.config.chart.dropShadow;\n          filters.dropShadow(elPath, shadow);\n        }\n\n        this.addListeners(elPath, this.donutDataLabels);\n        Graphics.setAttrs(elPath.node, {\n          'data:angle': angle,\n          'data:startAngle': startAngle,\n          'data:strokeWidth': this.strokeWidth,\n          'data:value': series[i]\n        });\n        var labelPosition = {\n          x: 0,\n          y: 0\n        };\n\n        if (w.config.chart.type === 'pie') {\n          labelPosition = Utils.polarToCartesian(this.centerX, this.centerY, this.size / 1.25 + w.config.plotOptions.pie.dataLabels.offset, startAngle + (endAngle - startAngle) / 2);\n        } else if (w.config.chart.type === 'donut') {\n          labelPosition = Utils.polarToCartesian(this.centerX, this.centerY, (this.size + this.donutSize) / 2 + w.config.plotOptions.pie.dataLabels.offset, startAngle + (endAngle - startAngle) / 2);\n        }\n\n        elPieArc.add(elPath); // Animation code starts\n\n        var dur = 0;\n\n        if (this.initialAnim && !w.globals.resized && !w.globals.dataChanged) {\n          dur = (endAngle - startAngle) / this.fullAngle * w.config.chart.animations.speed;\n          this.animDur = dur + this.animDur;\n          this.animBeginArr.push(this.animDur);\n        } else {\n          this.animBeginArr.push(0);\n        }\n\n        if (this.dynamicAnim && w.globals.dataChanged) {\n          this.animatePaths(elPath, {\n            endAngle: endAngle,\n            startAngle: startAngle,\n            prevStartAngle: prevStartAngle,\n            prevEndAngle: prevEndAngle,\n            animateStartingPos: true,\n            i: i,\n            animBeginArr: this.animBeginArr,\n            dur: w.config.chart.animations.dynamicAnimation.speed\n          });\n        } else {\n          this.animatePaths(elPath, {\n            endAngle: endAngle,\n            startAngle: startAngle,\n            i: i,\n            totalItems: sectorAngleArr.length - 1,\n            animBeginArr: this.animBeginArr,\n            dur: dur\n          });\n        } // animation code ends\n\n\n        if (w.config.plotOptions.pie.expandOnClick) {\n          elPath.click(this.pieClicked.bind(this, i));\n        }\n\n        if (w.config.dataLabels.enabled) {\n          var xPos = labelPosition.x;\n          var yPos = labelPosition.y;\n          var text = 100 * (endAngle - startAngle) / 360 + '%';\n\n          if (angle !== 0 && w.config.plotOptions.pie.dataLabels.minAngleToShowLabel < sectorAngleArr[i]) {\n            var formatter = w.config.dataLabels.formatter;\n\n            if (formatter !== undefined) {\n              text = formatter(w.globals.seriesPercent[i][0], {\n                seriesIndex: i,\n                w: w\n              });\n            }\n\n            var foreColor = w.globals.dataLabels.style.colors[i];\n            var elPieLabel = graphics.drawText({\n              x: xPos,\n              y: yPos,\n              text: text,\n              textAnchor: 'middle',\n              fontSize: w.config.dataLabels.style.fontSize,\n              fontFamily: w.config.dataLabels.style.fontFamily,\n              foreColor: foreColor\n            });\n\n            if (w.config.dataLabels.dropShadow.enabled) {\n              var textShadow = w.config.dataLabels.dropShadow;\n\n              var _filters = new Filters(this.ctx);\n\n              _filters.dropShadow(elPieLabel, textShadow);\n            }\n\n            elPieLabel.node.classList.add('apexcharts-pie-label');\n\n            if (w.config.chart.animations.animate && w.globals.resized === false) {\n              elPieLabel.node.classList.add('apexcharts-pie-label-delay');\n              elPieLabel.node.style.animationDelay = w.config.chart.animations.speed / 940 + 's';\n            }\n\n            this.sliceLabels.push(elPieLabel);\n          }\n        } // }\n\n      }\n\n      return g;\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners(elPath, dataLabels) {\n      var graphics = new Graphics(this.ctx); // append filters on mouseenter and mouseleave\n\n      elPath.node.addEventListener('mouseenter', graphics.pathMouseEnter.bind(this, elPath));\n      elPath.node.addEventListener('mouseenter', this.printDataLabelsInner.bind(this, elPath.node, dataLabels));\n      elPath.node.addEventListener('mouseleave', graphics.pathMouseLeave.bind(this, elPath));\n      elPath.node.addEventListener('mouseleave', this.revertDataLabelsInner.bind(this, elPath.node, dataLabels));\n      elPath.node.addEventListener('mousedown', graphics.pathMouseDown.bind(this, elPath));\n      elPath.node.addEventListener('mousedown', this.printDataLabelsInner.bind(this, elPath.node, dataLabels));\n    } // This function can be used for other circle charts too\n\n  }, {\n    key: \"animatePaths\",\n    value: function animatePaths(el, opts) {\n      var w = this.w;\n      var me = this;\n      var angle = opts.endAngle - opts.startAngle;\n      var prevAngle = angle;\n      var fromStartAngle = opts.startAngle;\n      var toStartAngle = opts.startAngle;\n\n      if (opts.prevStartAngle !== undefined && opts.prevEndAngle !== undefined) {\n        fromStartAngle = opts.prevEndAngle;\n        prevAngle = opts.prevEndAngle - opts.prevStartAngle;\n      }\n\n      if (opts.i === w.config.series.length - 1) {\n        // some adjustments for the last overlapping paths\n        if (angle + toStartAngle > this.fullAngle) {\n          opts.endAngle = opts.endAngle - (angle + toStartAngle);\n        } else if (angle + toStartAngle < this.fullAngle) {\n          opts.endAngle = opts.endAngle + (this.fullAngle - (angle + toStartAngle));\n        }\n      }\n\n      if (angle === this.fullAngle) angle = this.fullAngle - 0.01;\n      me.animateArc(el, fromStartAngle, toStartAngle, angle, prevAngle, opts);\n    }\n  }, {\n    key: \"animateArc\",\n    value: function animateArc(el, fromStartAngle, toStartAngle, angle, prevAngle, opts) {\n      var me = this;\n      var w = this.w;\n      var size = me.size;\n\n      if (!size) {\n        size = opts.size;\n      }\n\n      var path;\n\n      if (isNaN(fromStartAngle) || isNaN(prevAngle)) {\n        fromStartAngle = toStartAngle;\n        prevAngle = angle;\n        opts.dur = 0;\n      }\n\n      var currAngle = angle;\n      var startAngle = toStartAngle;\n      var fromAngle = fromStartAngle - toStartAngle;\n\n      if (w.globals.dataChanged && opts.shouldSetPrevPaths) {\n        // to avoid flickering, set prev path first and then we will animate from there\n        path = me.getPiePath({\n          me: me,\n          startAngle: startAngle,\n          angle: prevAngle,\n          size: size\n        });\n        el.attr({\n          d: path\n        });\n      }\n\n      if (opts.dur !== 0) {\n        el.animate(opts.dur, w.globals.easing, opts.animBeginArr[opts.i]).afterAll(function () {\n          if (w.config.chart.type === 'pie' || w.config.chart.type === 'donut') {\n            this.animate(300).attr({\n              'stroke-width': w.config.stroke.width\n            });\n          }\n\n          w.globals.animationEnded = true;\n        }).during(function (pos) {\n          currAngle = fromAngle + (angle - fromAngle) * pos;\n\n          if (opts.animateStartingPos) {\n            currAngle = prevAngle + (angle - prevAngle) * pos;\n            startAngle = fromStartAngle - prevAngle + (toStartAngle - (fromStartAngle - prevAngle)) * pos;\n          }\n\n          path = me.getPiePath({\n            me: me,\n            startAngle: startAngle,\n            angle: currAngle,\n            size: size\n          });\n          el.node.setAttribute('data:pathOrig', path);\n          el.attr({\n            d: path\n          });\n        });\n      } else {\n        path = me.getPiePath({\n          me: me,\n          startAngle: startAngle,\n          angle: angle,\n          size: size\n        });\n\n        if (!opts.isTrack) {\n          w.globals.animationEnded = true;\n        }\n\n        el.node.setAttribute('data:pathOrig', path);\n        el.attr({\n          d: path\n        });\n      }\n    }\n  }, {\n    key: \"pieClicked\",\n    value: function pieClicked(i) {\n      var w = this.w;\n      var me = this;\n      var path;\n      var size = me.size + 4;\n      var elPath = w.globals.dom.Paper.select(\"#apexcharts-\".concat(w.config.chart.type.toLowerCase(), \"-slice-\").concat(i)).members[0];\n      var pathFrom = elPath.attr('d');\n\n      if (elPath.attr('data:pieClicked') === 'true') {\n        elPath.attr({\n          'data:pieClicked': 'false'\n        });\n        var origPath = elPath.attr('data:pathOrig');\n        elPath.attr({\n          d: origPath\n        });\n        return;\n      } else {\n        // reset all elems\n        var allEls = w.globals.dom.baseEl.querySelectorAll('.apexcharts-pie-area');\n        Array.prototype.forEach.call(allEls, function (pieSlice) {\n          pieSlice.setAttribute('data:pieClicked', 'false');\n          var origPath = pieSlice.getAttribute('data:pathOrig');\n          pieSlice.setAttribute('d', origPath);\n        });\n        elPath.attr('data:pieClicked', 'true');\n      }\n\n      var startAngle = parseInt(elPath.attr('data:startAngle'));\n      var angle = parseInt(elPath.attr('data:angle'));\n      path = me.getPiePath({\n        me: me,\n        startAngle: startAngle,\n        angle: angle,\n        size: size\n      });\n      if (angle === 360) return;\n      elPath.plot(path).animate(1).plot(pathFrom).animate(100).plot(path);\n    }\n  }, {\n    key: \"getChangedPath\",\n    value: function getChangedPath(prevStartAngle, prevEndAngle) {\n      var path = '';\n\n      if (this.dynamicAnim && this.w.globals.dataChanged) {\n        path = this.getPiePath({\n          me: this,\n          startAngle: prevStartAngle,\n          angle: prevEndAngle - prevStartAngle,\n          size: this.size\n        });\n      }\n\n      return path;\n    }\n  }, {\n    key: \"getPiePath\",\n    value: function getPiePath(_ref) {\n      var me = _ref.me,\n          startAngle = _ref.startAngle,\n          angle = _ref.angle,\n          size = _ref.size;\n      var w = this.w;\n      var path;\n      var startDeg = startAngle;\n      var startRadians = Math.PI * (startDeg - 90) / 180;\n      var endDeg = angle + startAngle;\n      if (Math.ceil(endDeg) >= 360) endDeg = 359.99;\n      var endRadians = Math.PI * (endDeg - 90) / 180;\n      var x1 = me.centerX + size * Math.cos(startRadians);\n      var y1 = me.centerY + size * Math.sin(startRadians);\n      var x2 = me.centerX + size * Math.cos(endRadians);\n      var y2 = me.centerY + size * Math.sin(endRadians);\n      var startInner = Utils.polarToCartesian(me.centerX, me.centerY, me.donutSize, endDeg);\n      var endInner = Utils.polarToCartesian(me.centerX, me.centerY, me.donutSize, startDeg);\n      var largeArc = angle > 180 ? 1 : 0;\n\n      if (w.config.chart.type === 'donut') {\n        path = ['M', x1, y1, 'A', size, size, 0, largeArc, 1, x2, y2, 'L', startInner.x, startInner.y, 'A', me.donutSize, me.donutSize, 0, largeArc, 0, endInner.x, endInner.y, 'L', x1, y1, 'z'].join(' ');\n      } else if (w.config.chart.type === 'pie') {\n        path = ['M', x1, y1, 'A', size, size, 0, largeArc, 1, x2, y2, 'L', me.centerX, me.centerY, 'L', x1, y1].join(' ');\n      } else {\n        path = ['M', x1, y1, 'A', size, size, 0, largeArc, 1, x2, y2].join(' ');\n      }\n\n      return path;\n    }\n  }, {\n    key: \"renderInnerDataLabels\",\n    value: function renderInnerDataLabels(dataLabelsConfig, opts) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var g = graphics.group({\n        class: 'apexcharts-datalabels-group',\n        transform: \"translate(\".concat(opts.translateX ? opts.translateX : 0, \", \").concat(opts.translateY ? opts.translateY : 0, \")\")\n      });\n      var showTotal = dataLabelsConfig.total.show;\n      g.node.style.opacity = opts.opacity;\n      var x = opts.centerX;\n      var y = opts.centerY;\n      var labelColor, valueColor;\n\n      if (dataLabelsConfig.name.color === undefined) {\n        labelColor = w.globals.colors[0];\n      } else {\n        labelColor = dataLabelsConfig.name.color;\n      }\n\n      if (dataLabelsConfig.value.color === undefined) {\n        valueColor = w.config.chart.foreColor;\n      } else {\n        valueColor = dataLabelsConfig.value.color;\n      }\n\n      var lbFormatter = dataLabelsConfig.value.formatter;\n      var val = '';\n      var name = '';\n\n      if (showTotal) {\n        labelColor = dataLabelsConfig.total.color;\n        name = dataLabelsConfig.total.label;\n        val = dataLabelsConfig.total.formatter(w);\n      } else {\n        if (w.globals.series.length === 1) {\n          val = lbFormatter(w.globals.series[0], w);\n          name = w.globals.seriesNames[0];\n        }\n      }\n\n      if (dataLabelsConfig.name.show) {\n        var elLabel = graphics.drawText({\n          x: x,\n          y: y + parseInt(dataLabelsConfig.name.offsetY),\n          text: name,\n          textAnchor: 'middle',\n          foreColor: labelColor,\n          fontSize: dataLabelsConfig.name.fontSize,\n          fontFamily: dataLabelsConfig.name.fontFamily\n        });\n        elLabel.node.classList.add('apexcharts-datalabel-label');\n        g.add(elLabel);\n      }\n\n      if (dataLabelsConfig.value.show) {\n        var valOffset = dataLabelsConfig.name.show ? parseInt(dataLabelsConfig.value.offsetY) + 16 : dataLabelsConfig.value.offsetY;\n        var elValue = graphics.drawText({\n          x: x,\n          y: y + valOffset,\n          text: val,\n          textAnchor: 'middle',\n          foreColor: valueColor,\n          fontSize: dataLabelsConfig.value.fontSize,\n          fontFamily: dataLabelsConfig.value.fontFamily\n        });\n        elValue.node.classList.add('apexcharts-datalabel-value');\n        g.add(elValue);\n      } // for a multi-series circle chart, we need to show total value instead of first series labels\n\n\n      return g;\n    }\n    /**\n     *\n     * @param {string} name - The name of the series\n     * @param {string} val - The value of that series\n     * @param {object} el - Optional el (indicates which series was hovered/clicked). If this param is not present, means we need to show total\n     */\n\n  }, {\n    key: \"printInnerLabels\",\n    value: function printInnerLabels(labelsConfig, name, val, el) {\n      var w = this.w;\n      var labelColor;\n\n      if (el) {\n        if (labelsConfig.name.color === undefined) {\n          labelColor = w.globals.colors[parseInt(el.parentNode.getAttribute('rel')) - 1];\n        } else {\n          labelColor = labelsConfig.name.color;\n        }\n      } else {\n        if (w.globals.series.length > 1 && labelsConfig.total.show) {\n          labelColor = labelsConfig.total.color;\n        }\n      }\n\n      var elLabel = w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-label');\n      var elValue = w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-value');\n      var lbFormatter = labelsConfig.value.formatter;\n      val = lbFormatter(val, w); // we need to show Total Val - so get the formatter of it\n\n      if (!el && typeof labelsConfig.total.formatter === 'function') {\n        val = labelsConfig.total.formatter(w);\n      }\n\n      if (elLabel !== null) {\n        elLabel.textContent = name;\n      }\n\n      if (elValue !== null) {\n        elValue.textContent = val;\n      }\n\n      if (elLabel !== null) {\n        elLabel.style.fill = labelColor;\n      }\n    }\n  }, {\n    key: \"printDataLabelsInner\",\n    value: function printDataLabelsInner(el, dataLabelsConfig) {\n      var w = this.w;\n      var val = el.getAttribute('data:value');\n      var name = w.globals.seriesNames[parseInt(el.parentNode.getAttribute('rel')) - 1];\n\n      if (w.globals.series.length > 1) {\n        this.printInnerLabels(dataLabelsConfig, name, val, el);\n      }\n\n      var dataLabelsGroup = w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');\n\n      if (dataLabelsGroup !== null) {\n        dataLabelsGroup.style.opacity = 1;\n      }\n    }\n  }, {\n    key: \"revertDataLabelsInner\",\n    value: function revertDataLabelsInner(el, dataLabelsConfig) {\n      var w = this.w;\n      var dataLabelsGroup = w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');\n\n      if (dataLabelsConfig.total.show && w.globals.series.length > 1) {\n        var pie = new Pie(this.ctx);\n        pie.printInnerLabels(dataLabelsConfig, dataLabelsConfig.total.label, dataLabelsConfig.total.formatter(w));\n      } else {\n        if (w.globals.selectedDataPoints.length && w.globals.series.length > 1) {\n          if (w.globals.selectedDataPoints[0].length > 0) {\n            var index = w.globals.selectedDataPoints[0];\n\n            var _el = w.globals.dom.baseEl.querySelector(\"#apexcharts-\".concat(w.config.chart.type.toLowerCase(), \"-slice-\").concat(index));\n\n            this.printDataLabelsInner(_el, dataLabelsConfig);\n          } else if (dataLabelsGroup && w.globals.selectedDataPoints.length && w.globals.selectedDataPoints[0].length === 0) {\n            dataLabelsGroup.style.opacity = 0;\n          }\n        } else {\n          if (dataLabelsGroup && w.globals.series.length > 1) {\n            dataLabelsGroup.style.opacity = 0;\n          }\n        }\n      }\n    }\n  }]);\n\n  return Pie;\n}();\n\n/**\n * ApexCharts Radar Class for Spider/Radar Charts.\n * @module Radar\n **/\n\nvar Radar =\n/*#__PURE__*/\nfunction () {\n  function Radar(ctx) {\n    _classCallCheck(this, Radar);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.chartType = this.w.config.chart.type;\n    this.initialAnim = this.w.config.chart.animations.enabled;\n    this.dynamicAnim = this.initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;\n    this.animDur = 0;\n    var w = this.w;\n    this.graphics = new Graphics(this.ctx);\n    this.lineColorArr = w.globals.stroke.colors !== undefined ? w.globals.stroke.colors : w.globals.colors;\n    this.defaultSize = w.globals.svgHeight < w.globals.svgWidth ? w.globals.svgHeight - 35 : w.globals.gridWidth;\n    this.maxValue = this.w.globals.maxY;\n    this.polygons = w.config.plotOptions.radar.polygons;\n    this.maxLabelWidth = 20;\n    var longestLabel = w.globals.labels.slice().sort(function (a, b) {\n      return b.length - a.length;\n    })[0];\n    var labelWidth = this.graphics.getTextRects(longestLabel, w.config.dataLabels.style.fontSize);\n    this.size = this.defaultSize / 2.1 - w.config.stroke.width - w.config.chart.dropShadow.blur - labelWidth.width / 1.75;\n\n    if (w.config.plotOptions.radar.size !== undefined) {\n      this.size = w.config.plotOptions.radar.size;\n    }\n\n    this.dataRadiusOfPercent = [];\n    this.dataRadius = [];\n    this.angleArr = [];\n    this.yaxisLabelsTextsPos = [];\n  }\n\n  _createClass(Radar, [{\n    key: \"draw\",\n    value: function draw(series) {\n      var _this = this;\n\n      var w = this.w;\n      var fill = new Fill(this.ctx);\n      var allSeries = [];\n      this.dataPointsLen = series[w.globals.maxValsInArrayIndex].length;\n      this.disAngle = Math.PI * 2 / this.dataPointsLen;\n      var halfW = w.globals.gridWidth / 2;\n      var halfH = w.globals.gridHeight / 2;\n      var translateX = halfW;\n      var translateY = halfH;\n      var ret = this.graphics.group({\n        class: 'apexcharts-radar-series',\n        'data:innerTranslateX': translateX,\n        'data:innerTranslateY': translateY - 25,\n        transform: \"translate(\".concat(translateX || 0, \", \").concat(translateY || 0, \")\")\n      });\n      var dataPointsPos = [];\n      var elPointsMain = null;\n      this.yaxisLabels = this.graphics.group({\n        class: 'apexcharts-yaxis'\n      });\n      series.forEach(function (s, i) {\n        // el to which series will be drawn\n        var elSeries = _this.graphics.group().attr({\n          class: \"apexcharts-series \".concat(Utils.escapeString(w.globals.seriesNames[i])),\n          rel: i + 1,\n          'data:realIndex': i\n        });\n\n        _this.dataRadiusOfPercent[i] = [];\n        _this.dataRadius[i] = [];\n        _this.angleArr[i] = [];\n        s.forEach(function (dv, j) {\n          _this.dataRadiusOfPercent[i][j] = dv / _this.maxValue;\n          _this.dataRadius[i][j] = _this.dataRadiusOfPercent[i][j] * _this.size;\n          _this.angleArr[i][j] = j * _this.disAngle;\n        });\n        dataPointsPos = _this.getDataPointsPos(_this.dataRadius[i], _this.angleArr[i]);\n\n        var paths = _this.createPaths(dataPointsPos, {\n          x: 0,\n          y: 0\n        }); // points\n\n\n        elPointsMain = _this.graphics.group({\n          class: 'apexcharts-series-markers-wrap hidden'\n        });\n        w.globals.delayedElements.push({\n          el: elPointsMain.node,\n          index: i\n        });\n        var defaultRenderedPathOptions = {\n          i: i,\n          realIndex: i,\n          animationDelay: i,\n          initialSpeed: w.config.chart.animations.speed,\n          dataChangeSpeed: w.config.chart.animations.dynamicAnimation.speed,\n          className: \"apexcharts-radar\",\n          id: \"apexcharts-radar\",\n          shouldClipToGrid: false,\n          bindEventsOnPaths: false,\n          stroke: w.globals.stroke.colors[i],\n          strokeLineCap: w.config.stroke.lineCap\n        };\n        var pathFrom = null;\n\n        if (w.globals.previousPaths.length > 0) {\n          pathFrom = _this.getPathFrom(i);\n        }\n\n        for (var p = 0; p < paths.linePathsTo.length; p++) {\n          var renderedLinePath = _this.graphics.renderPaths(_objectSpread({}, defaultRenderedPathOptions, {\n            pathFrom: pathFrom === null ? paths.linePathsFrom[p] : pathFrom,\n            pathTo: paths.linePathsTo[p],\n            strokeWidth: Array.isArray(w.config.stroke.width) ? w.config.stroke.width[i] : w.config.stroke.width,\n            fill: 'none'\n          }));\n\n          elSeries.add(renderedLinePath);\n          var pathFill = fill.fillPath({\n            seriesNumber: i\n          });\n\n          var renderedAreaPath = _this.graphics.renderPaths(_objectSpread({}, defaultRenderedPathOptions, {\n            pathFrom: pathFrom === null ? paths.areaPathsFrom[p] : pathFrom,\n            pathTo: paths.areaPathsTo[p],\n            strokeWidth: 0,\n            fill: pathFill\n          }));\n\n          if (w.config.chart.dropShadow.enabled) {\n            var filters = new Filters(_this.ctx);\n            var shadow = w.config.chart.dropShadow;\n            filters.dropShadow(renderedAreaPath, _objectSpread({}, shadow, {\n              noUserSpaceOnUse: true\n            }));\n          }\n\n          elSeries.add(renderedAreaPath);\n        }\n\n        s.forEach(function (sj, j) {\n          var markers = new Markers(_this.ctx);\n          var opts = markers.getMarkerConfig('apexcharts-marker', i);\n\n          var point = _this.graphics.drawMarker(dataPointsPos[j].x, dataPointsPos[j].y, opts);\n\n          point.attr('rel', j);\n          point.attr('j', j);\n          point.attr('index', i);\n          point.node.setAttribute('default-marker-size', opts.pSize);\n\n          var elPointsWrap = _this.graphics.group({\n            class: 'apexcharts-series-markers'\n          });\n\n          if (elPointsWrap) {\n            elPointsWrap.add(point);\n          }\n\n          elPointsMain.add(elPointsWrap);\n          elSeries.add(elPointsMain);\n        });\n        allSeries.push(elSeries);\n      });\n      this.drawPolygons({\n        parent: ret\n      });\n\n      if (w.config.dataLabels.enabled) {\n        var dataLabels = this.drawLabels();\n        ret.add(dataLabels);\n      }\n\n      ret.add(this.yaxisLabels);\n      allSeries.forEach(function (elS) {\n        ret.add(elS);\n      });\n      return ret;\n    }\n  }, {\n    key: \"drawPolygons\",\n    value: function drawPolygons(opts) {\n      var _this2 = this;\n\n      var w = this.w;\n      var parent = opts.parent;\n      var yaxisTexts = w.globals.yAxisScale[0].result.reverse();\n      var layers = yaxisTexts.length;\n      var radiusSizes = [];\n      var layerDis = this.size / (layers - 1);\n\n      for (var i = 0; i < layers; i++) {\n        radiusSizes[i] = layerDis * i;\n      }\n\n      radiusSizes.reverse();\n      var polygonStrings = [];\n      var lines = [];\n      radiusSizes.forEach(function (radiusSize, r) {\n        var polygon = _this2.getPolygonPos(radiusSize);\n\n        var string = '';\n        polygon.forEach(function (p, i) {\n          if (r === 0) {\n            var line = _this2.graphics.drawLine(p.x, p.y, 0, 0, Array.isArray(_this2.polygons.connectorColors) ? _this2.polygons.connectorColors[i] : _this2.polygons.connectorColors);\n\n            lines.push(line);\n          }\n\n          if (i === 0) {\n            _this2.yaxisLabelsTextsPos.push({\n              x: p.x,\n              y: p.y\n            });\n          }\n\n          string += p.x + ',' + p.y + ' ';\n        });\n        polygonStrings.push(string);\n      });\n      polygonStrings.forEach(function (p, i) {\n        var strokeColors = _this2.polygons.strokeColors;\n\n        var polygon = _this2.graphics.drawPolygon(p, Array.isArray(strokeColors) ? strokeColors[i] : strokeColors, w.globals.radarPolygons.fill.colors[i]);\n\n        parent.add(polygon);\n      });\n      lines.forEach(function (l) {\n        parent.add(l);\n      });\n\n      if (w.config.yaxis[0].show) {\n        this.yaxisLabelsTextsPos.forEach(function (p, i) {\n          var yText = _this2.drawYAxisText(p.x, p.y, i, yaxisTexts[i]);\n\n          _this2.yaxisLabels.add(yText);\n        });\n      }\n    }\n  }, {\n    key: \"drawYAxisText\",\n    value: function drawYAxisText(x, y, i, text) {\n      var w = this.w;\n      var yaxisConfig = w.config.yaxis[0];\n      var formatter = w.globals.yLabelFormatters[0];\n      var yaxisLabel = this.graphics.drawText({\n        x: x + yaxisConfig.labels.offsetX,\n        y: y + yaxisConfig.labels.offsetY,\n        text: formatter(text, i),\n        textAnchor: 'middle',\n        fontSize: yaxisConfig.labels.style.fontSize,\n        fontFamily: yaxisConfig.labels.style.fontFamily,\n        foreColor: yaxisConfig.labels.style.color\n      });\n      return yaxisLabel;\n    }\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels() {\n      var _this3 = this;\n\n      var w = this.w;\n      var limit = 10;\n      var textAnchor = 'middle';\n      var dataLabelsConfig = w.config.dataLabels;\n      var elDataLabelsWrap = this.graphics.group({\n        class: 'apexcharts-datalabels'\n      });\n      var polygonPos = this.getPolygonPos(this.size);\n      var currPosX = 0;\n      var currPosY = 0;\n      w.globals.labels.forEach(function (label, i) {\n        var formatter = dataLabelsConfig.formatter;\n        var dataLabels = new DataLabels(_this3.ctx);\n\n        if (polygonPos[i]) {\n          currPosX = polygonPos[i].x;\n          currPosY = polygonPos[i].y;\n\n          if (Math.abs(polygonPos[i].x) >= limit) {\n            if (polygonPos[i].x > 0) {\n              textAnchor = 'start';\n              currPosX += 10;\n            } else if (polygonPos[i].x < 0) {\n              textAnchor = 'end';\n              currPosX -= 10;\n            }\n          } else {\n            textAnchor = 'middle';\n          }\n\n          if (Math.abs(polygonPos[i].y) >= _this3.size - limit) {\n            if (polygonPos[i].y < 0) {\n              currPosY -= 10;\n            } else if (polygonPos[i].y > 0) {\n              currPosY += 10;\n            }\n          }\n\n          var text = formatter(label, {\n            seriesIndex: -1,\n            dataPointIndex: i,\n            w: w\n          });\n          dataLabels.plotDataLabelsText({\n            x: currPosX,\n            y: currPosY,\n            text: text,\n            textAnchor: textAnchor,\n            i: i,\n            j: i,\n            parent: elDataLabelsWrap,\n            dataLabelsConfig: dataLabelsConfig,\n            offsetCorrection: false\n          });\n        }\n      });\n      return elDataLabelsWrap;\n    }\n  }, {\n    key: \"createPaths\",\n    value: function createPaths(pos, origin) {\n      var _this4 = this;\n\n      var linePathsTo = [];\n      var linePathsFrom = [];\n      var areaPathsTo = [];\n      var areaPathsFrom = [];\n\n      if (pos.length) {\n        linePathsFrom = [this.graphics.move(origin.x, origin.y)];\n        areaPathsFrom = [this.graphics.move(origin.x, origin.y)];\n        var linePathTo = this.graphics.move(pos[0].x, pos[0].y);\n        var areaPathTo = this.graphics.move(pos[0].x, pos[0].y);\n        pos.forEach(function (p, i) {\n          linePathTo += _this4.graphics.line(p.x, p.y);\n          areaPathTo += _this4.graphics.line(p.x, p.y);\n\n          if (i === pos.length - 1) {\n            linePathTo += 'Z';\n            areaPathTo += 'Z';\n          }\n        });\n        linePathsTo.push(linePathTo);\n        areaPathsTo.push(areaPathTo);\n      }\n\n      return {\n        linePathsFrom: linePathsFrom,\n        linePathsTo: linePathsTo,\n        areaPathsFrom: areaPathsFrom,\n        areaPathsTo: areaPathsTo\n      };\n    }\n  }, {\n    key: \"getPathFrom\",\n    value: function getPathFrom(realIndex) {\n      var w = this.w;\n      var pathFrom = null;\n\n      for (var pp = 0; pp < w.globals.previousPaths.length; pp++) {\n        var gpp = w.globals.previousPaths[pp];\n\n        if (gpp.paths.length > 0 && parseInt(gpp.realIndex) === parseInt(realIndex)) {\n          if (typeof w.globals.previousPaths[pp].paths[0] !== 'undefined') {\n            pathFrom = w.globals.previousPaths[pp].paths[0].d;\n          }\n        }\n      }\n\n      return pathFrom;\n    }\n  }, {\n    key: \"getDataPointsPos\",\n    value: function getDataPointsPos(dataRadiusArr, angleArr) {\n      var dataPointsLen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dataPointsLen;\n      dataRadiusArr = dataRadiusArr || [];\n      angleArr = angleArr || [];\n      var dataPointsPosArray = [];\n\n      for (var j = 0; j < dataPointsLen; j++) {\n        var curPointPos = {};\n        curPointPos.x = dataRadiusArr[j] * Math.sin(angleArr[j]);\n        curPointPos.y = -dataRadiusArr[j] * Math.cos(angleArr[j]);\n        dataPointsPosArray.push(curPointPos);\n      }\n\n      return dataPointsPosArray;\n    }\n  }, {\n    key: \"getPolygonPos\",\n    value: function getPolygonPos(size) {\n      var dotsArray = [];\n      var angle = Math.PI * 2 / this.dataPointsLen;\n\n      for (var i = 0; i < this.dataPointsLen; i++) {\n        var curPos = {};\n        curPos.x = size * Math.sin(i * angle);\n        curPos.y = -size * Math.cos(i * angle);\n        dotsArray.push(curPos);\n      }\n\n      return dotsArray;\n    }\n  }]);\n\n  return Radar;\n}();\n\n/**\n * ApexCharts Radial Class for drawing Circle / Semi Circle Charts.\n * @module Radial\n **/\n\nvar Radial =\n/*#__PURE__*/\nfunction (_Pie) {\n  _inherits(Radial, _Pie);\n\n  function Radial(ctx) {\n    var _this;\n\n    _classCallCheck(this, Radial);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Radial).call(this, ctx));\n    _this.ctx = ctx;\n    _this.w = ctx.w;\n    _this.animBeginArr = [0];\n    _this.animDur = 0;\n    var w = _this.w;\n    _this.startAngle = w.config.plotOptions.radialBar.startAngle;\n    _this.endAngle = w.config.plotOptions.radialBar.endAngle;\n    _this.trackStartAngle = w.config.plotOptions.radialBar.track.startAngle;\n    _this.trackEndAngle = w.config.plotOptions.radialBar.track.endAngle;\n    _this.radialDataLabels = w.config.plotOptions.radialBar.dataLabels;\n    if (!_this.trackStartAngle) _this.trackStartAngle = _this.startAngle;\n    if (!_this.trackEndAngle) _this.trackEndAngle = _this.endAngle;\n    if (_this.endAngle === 360) _this.endAngle = 359.99;\n    _this.fullAngle = 360 - w.config.plotOptions.radialBar.endAngle - w.config.plotOptions.radialBar.startAngle;\n    _this.margin = parseInt(w.config.plotOptions.radialBar.track.margin);\n    return _this;\n  }\n\n  _createClass(Radial, [{\n    key: \"draw\",\n    value: function draw(series) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var ret = graphics.group({\n        class: 'apexcharts-radialbar'\n      });\n      var elSeries = graphics.group();\n      var centerY = this.defaultSize / 2;\n      var centerX = w.globals.gridWidth / 2;\n      var size = this.defaultSize / 2.05 - w.config.stroke.width - w.config.chart.dropShadow.blur;\n\n      if (w.config.plotOptions.radialBar.size !== undefined) {\n        size = w.config.plotOptions.radialBar.size;\n      }\n\n      var colorArr = w.globals.fill.colors;\n\n      if (w.config.plotOptions.radialBar.track.show) {\n        var elTracks = this.drawTracks({\n          size: size,\n          centerX: centerX,\n          centerY: centerY,\n          colorArr: colorArr,\n          series: series\n        });\n        elSeries.add(elTracks);\n      }\n\n      var elG = this.drawArcs({\n        size: size,\n        centerX: centerX,\n        centerY: centerY,\n        colorArr: colorArr,\n        series: series\n      });\n      elSeries.add(elG.g);\n\n      if (w.config.plotOptions.radialBar.hollow.position === 'front') {\n        elG.g.add(elG.elHollow);\n\n        if (elG.dataLabels) {\n          elG.g.add(elG.dataLabels);\n        }\n      }\n\n      ret.add(elSeries);\n      return ret;\n    }\n  }, {\n    key: \"drawTracks\",\n    value: function drawTracks(opts) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var g = graphics.group();\n      var filters = new Filters(this.ctx);\n      var fill = new Fill(this.ctx);\n      var strokeWidth = this.getStrokeWidth(opts);\n      opts.size = opts.size - strokeWidth / 2;\n\n      for (var i = 0; i < opts.series.length; i++) {\n        var elRadialBarTrack = graphics.group({\n          class: 'apexcharts-radialbar-track apexcharts-track'\n        });\n        g.add(elRadialBarTrack);\n        elRadialBarTrack.attr({\n          id: 'apexcharts-track-' + i,\n          rel: i + 1\n        });\n        opts.size = opts.size - strokeWidth - this.margin;\n        var trackConfig = w.config.plotOptions.radialBar.track;\n        var pathFill = fill.fillPath({\n          seriesNumber: 0,\n          size: opts.size,\n          fillColors: Array.isArray(trackConfig.background) ? trackConfig.background[i] : trackConfig.background,\n          solid: true\n        });\n        var startAngle = this.trackStartAngle;\n        var endAngle = this.trackEndAngle;\n        if (Math.abs(endAngle) + Math.abs(startAngle) >= 360) endAngle = 360 - Math.abs(this.startAngle) - 0.1;\n        var elPath = graphics.drawPath({\n          d: '',\n          stroke: pathFill,\n          strokeWidth: strokeWidth * parseInt(trackConfig.strokeWidth) / 100,\n          fill: 'none',\n          strokeOpacity: trackConfig.opacity,\n          classes: 'apexcharts-radialbar-area'\n        });\n\n        if (trackConfig.dropShadow.enabled) {\n          var shadow = trackConfig.dropShadow;\n          filters.dropShadow(elPath, shadow);\n        }\n\n        elRadialBarTrack.add(elPath);\n        elPath.attr('id', 'apexcharts-radialbarTrack-' + i);\n        var pie = new Pie(this.ctx);\n        pie.animatePaths(elPath, {\n          centerX: opts.centerX,\n          centerY: opts.centerY,\n          endAngle: endAngle,\n          startAngle: startAngle,\n          size: opts.size,\n          i: i,\n          totalItems: 2,\n          animBeginArr: 0,\n          dur: 0,\n          isTrack: true,\n          easing: w.globals.easing\n        });\n      }\n\n      return g;\n    }\n  }, {\n    key: \"drawArcs\",\n    value: function drawArcs(opts) {\n      var w = this.w; // size, donutSize, centerX, centerY, colorArr, lineColorArr, sectorAngleArr, series\n\n      var graphics = new Graphics(this.ctx);\n      var fill = new Fill(this.ctx);\n      var filters = new Filters(this.ctx);\n      var g = graphics.group();\n      var strokeWidth = this.getStrokeWidth(opts);\n      opts.size = opts.size - strokeWidth / 2;\n      var hollowFillID = w.config.plotOptions.radialBar.hollow.background;\n      var hollowSize = opts.size - strokeWidth * opts.series.length - this.margin * opts.series.length - strokeWidth * parseInt(w.config.plotOptions.radialBar.track.strokeWidth) / 100 / 2;\n      var hollowRadius = hollowSize - w.config.plotOptions.radialBar.hollow.margin;\n\n      if (w.config.plotOptions.radialBar.hollow.image !== undefined) {\n        hollowFillID = this.drawHollowImage(opts, g, hollowSize, hollowFillID);\n      }\n\n      var elHollow = this.drawHollow({\n        size: hollowRadius,\n        centerX: opts.centerX,\n        centerY: opts.centerY,\n        fill: hollowFillID\n      });\n\n      if (w.config.plotOptions.radialBar.hollow.dropShadow.enabled) {\n        var shadow = w.config.plotOptions.radialBar.hollow.dropShadow;\n        filters.dropShadow(elHollow, shadow);\n      }\n\n      var shown = 1;\n\n      if (!this.radialDataLabels.total.show && w.globals.series.length > 1) {\n        shown = 0;\n      }\n\n      var pie = new Pie(this.ctx);\n      var dataLabels = null;\n\n      if (this.radialDataLabels.show) {\n        dataLabels = pie.renderInnerDataLabels(this.radialDataLabels, {\n          hollowSize: hollowSize,\n          centerX: opts.centerX,\n          centerY: opts.centerY,\n          opacity: shown\n        });\n      }\n\n      if (w.config.plotOptions.radialBar.hollow.position === 'back') {\n        g.add(elHollow);\n\n        if (dataLabels) {\n          g.add(dataLabels);\n        }\n      }\n\n      var reverseLoop = false;\n\n      if (w.config.plotOptions.radialBar.inverseOrder) {\n        reverseLoop = true;\n      }\n\n      for (var i = reverseLoop ? opts.series.length - 1 : 0; reverseLoop ? i >= 0 : i < opts.series.length; reverseLoop ? i-- : i++) {\n        var elRadialBarArc = graphics.group({\n          class: \"apexcharts-series apexcharts-radial-series \".concat(Utils.escapeString(w.globals.seriesNames[i]))\n        });\n        g.add(elRadialBarArc);\n        elRadialBarArc.attr({\n          id: 'apexcharts-series-' + i,\n          rel: i + 1\n        });\n        this.ctx.series.addCollapsedClassToSeries(elRadialBarArc, i);\n        opts.size = opts.size - strokeWidth - this.margin;\n        var pathFill = fill.fillPath({\n          seriesNumber: i,\n          size: opts.size\n        });\n        var startAngle = this.startAngle;\n        var prevStartAngle = void 0;\n        var totalAngle = Math.abs(w.config.plotOptions.radialBar.endAngle - w.config.plotOptions.radialBar.startAngle); // if data exceeds 100, make it 100\n\n        var dataValue = Utils.negToZero(opts.series[i] > 100 ? 100 : opts.series[i]) / 100;\n        var endAngle = Math.round(totalAngle * dataValue) + this.startAngle;\n        var prevEndAngle = void 0;\n\n        if (w.globals.dataChanged) {\n          prevStartAngle = this.startAngle;\n          prevEndAngle = Math.round(totalAngle * Utils.negToZero(w.globals.previousPaths[i]) / 100) + prevStartAngle;\n        }\n\n        var currFullAngle = Math.abs(endAngle) + Math.abs(startAngle);\n\n        if (currFullAngle >= 360) {\n          endAngle = endAngle - 0.01;\n        }\n\n        var prevFullAngle = Math.abs(prevEndAngle) + Math.abs(prevStartAngle);\n\n        if (prevFullAngle >= 360) {\n          prevEndAngle = prevEndAngle - 0.01;\n        }\n\n        var angle = endAngle - startAngle;\n        var dashArray = Array.isArray(w.config.stroke.dashArray) ? w.config.stroke.dashArray[i] : w.config.stroke.dashArray;\n        var elPath = graphics.drawPath({\n          d: '',\n          stroke: pathFill,\n          strokeWidth: strokeWidth,\n          fill: 'none',\n          fillOpacity: w.config.fill.opacity,\n          classes: 'apexcharts-radialbar-area',\n          strokeDashArray: dashArray\n        });\n        Graphics.setAttrs(elPath.node, {\n          'data:angle': angle,\n          'data:value': opts.series[i]\n        });\n\n        if (w.config.chart.dropShadow.enabled) {\n          var _shadow = w.config.chart.dropShadow;\n          filters.dropShadow(elPath, _shadow);\n        }\n\n        this.addListeners(elPath, this.radialDataLabels);\n\n        var _pie = new Pie(this.ctx);\n\n        elRadialBarArc.add(elPath);\n        elPath.attr({\n          id: 'apexcharts-radialbar-slice-' + i,\n          index: 0,\n          j: i\n        });\n        var dur = 0;\n\n        if (_pie.initialAnim && !w.globals.resized && !w.globals.dataChanged) {\n          dur = (endAngle - startAngle) / 360 * w.config.chart.animations.speed;\n          this.animDur = dur / (opts.series.length * 1.2) + this.animDur;\n          this.animBeginArr.push(this.animDur);\n        }\n\n        if (w.globals.dataChanged) {\n          dur = (endAngle - startAngle) / 360 * w.config.chart.animations.dynamicAnimation.speed;\n          this.animDur = dur / (opts.series.length * 1.2) + this.animDur;\n          this.animBeginArr.push(this.animDur);\n        }\n\n        _pie.animatePaths(elPath, {\n          centerX: opts.centerX,\n          centerY: opts.centerY,\n          endAngle: endAngle,\n          startAngle: startAngle,\n          prevEndAngle: prevEndAngle,\n          prevStartAngle: prevStartAngle,\n          size: opts.size,\n          i: i,\n          totalItems: 2,\n          animBeginArr: this.animBeginArr,\n          dur: dur,\n          shouldSetPrevPaths: true,\n          easing: w.globals.easing\n        });\n      }\n\n      return {\n        g: g,\n        elHollow: elHollow,\n        dataLabels: dataLabels\n      };\n    }\n  }, {\n    key: \"drawHollow\",\n    value: function drawHollow(opts) {\n      var graphics = new Graphics(this.ctx);\n      var circle = graphics.drawCircle(opts.size * 2);\n      circle.attr({\n        class: 'apexcharts-radialbar-hollow',\n        cx: opts.centerX,\n        cy: opts.centerY,\n        r: opts.size,\n        fill: opts.fill\n      });\n      return circle;\n    }\n  }, {\n    key: \"drawHollowImage\",\n    value: function drawHollowImage(opts, g, hollowSize, hollowFillID) {\n      var w = this.w;\n      var fill = new Fill(this.ctx);\n      var randID = (Math.random() + 1).toString(36).substring(4);\n      var hollowFillImg = w.config.plotOptions.radialBar.hollow.image;\n\n      if (w.config.plotOptions.radialBar.hollow.imageClipped) {\n        fill.clippedImgArea({\n          width: hollowSize,\n          height: hollowSize,\n          image: hollowFillImg,\n          patternID: \"pattern\".concat(w.globals.cuid).concat(randID)\n        });\n        hollowFillID = \"url(#pattern\".concat(w.globals.cuid).concat(randID, \")\");\n      } else {\n        var imgWidth = w.config.plotOptions.radialBar.hollow.imageWidth;\n        var imgHeight = w.config.plotOptions.radialBar.hollow.imageHeight;\n\n        if (imgWidth === undefined && imgHeight === undefined) {\n          var image = w.globals.dom.Paper.image(hollowFillImg).loaded(function (loader) {\n            this.move(opts.centerX - loader.width / 2 + w.config.plotOptions.radialBar.hollow.imageOffsetX, opts.centerY - loader.height / 2 + w.config.plotOptions.radialBar.hollow.imageOffsetY);\n          });\n          g.add(image);\n        } else {\n          var _image = w.globals.dom.Paper.image(hollowFillImg).loaded(function (loader) {\n            this.move(opts.centerX - imgWidth / 2 + w.config.plotOptions.radialBar.hollow.imageOffsetX, opts.centerY - imgHeight / 2 + w.config.plotOptions.radialBar.hollow.imageOffsetY);\n            this.size(imgWidth, imgHeight);\n          });\n\n          g.add(_image);\n        }\n      }\n\n      return hollowFillID;\n    }\n  }, {\n    key: \"getStrokeWidth\",\n    value: function getStrokeWidth(opts) {\n      var w = this.w;\n      return opts.size * (100 - parseInt(w.config.plotOptions.radialBar.hollow.size)) / 100 / (opts.series.length + 1) - this.margin;\n    }\n  }]);\n\n  return Radial;\n}(Pie);\n\n/**\n * ApexCharts RangeBar Class responsible for drawing Range/Timeline Bars.\n *\n * @module RangeBar\n **/\n\nvar RangeBar =\n/*#__PURE__*/\nfunction (_Bar) {\n  _inherits(RangeBar, _Bar);\n\n  function RangeBar() {\n    _classCallCheck(this, RangeBar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RangeBar).apply(this, arguments));\n  }\n\n  _createClass(RangeBar, [{\n    key: \"draw\",\n    value: function draw(series, seriesIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var fill = new Fill(this.ctx);\n      this.rangeBarOptions = this.w.config.plotOptions.rangeBar;\n      this.series = series;\n      this.seriesRangeStart = w.globals.seriesRangeStart;\n      this.seriesRangeEnd = w.globals.seriesRangeEnd;\n      this.initVariables(series);\n      var ret = graphics.group({\n        class: 'apexcharts-rangebar-series apexcharts-plot-series'\n      });\n\n      for (var i = 0, bc = 0; i < series.length; i++, bc++) {\n        var pathTo = void 0,\n            pathFrom = void 0;\n        var x = void 0,\n            y = void 0,\n            xDivision = void 0,\n            // xDivision is the GRIDWIDTH divided by number of datapoints (columns)\n        yDivision = void 0,\n            // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)\n        zeroH = void 0,\n            // zeroH is the baseline where 0 meets y axis\n        zeroW = void 0; // zeroW is the baseline where 0 meets x axis\n\n        var yArrj = []; // hold y values of current iterating series\n\n        var xArrj = []; // hold x values of current iterating series\n\n        var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn\n\n        var elSeries = graphics.group({\n          class: \"apexcharts-series \".concat(Utils.escapeString(w.globals.seriesNames[realIndex])),\n          rel: i + 1,\n          'data:realIndex': realIndex\n        });\n\n        if (series[i].length > 0) {\n          this.visibleI = this.visibleI + 1;\n        }\n\n        var strokeWidth = 0;\n        var barHeight = 0;\n        var barWidth = 0;\n\n        if (this.yRatio.length > 1) {\n          this.yaxisIndex = realIndex;\n        }\n\n        var initPositions = this.initialPositions();\n        y = initPositions.y;\n        yDivision = initPositions.yDivision;\n        barHeight = initPositions.barHeight;\n        zeroW = initPositions.zeroW;\n        x = initPositions.x;\n        barWidth = initPositions.barWidth;\n        xDivision = initPositions.xDivision;\n        zeroH = initPositions.zeroH;\n        xArrj.push(x + barWidth / 2); // eldatalabels\n\n        var elDataLabelsWrap = graphics.group({\n          class: 'apexcharts-datalabels'\n        });\n\n        for (var j = 0, tj = w.globals.dataPoints; j < w.globals.dataPoints; j++, tj--) {\n          if (typeof this.series[i][j] === 'undefined' || series[i][j] === null) {\n            this.isNullValue = true;\n          } else {\n            this.isNullValue = false;\n          }\n\n          if (w.config.stroke.show) {\n            if (this.isNullValue) {\n              strokeWidth = 0;\n            } else {\n              strokeWidth = Array.isArray(this.strokeWidth) ? this.strokeWidth[realIndex] : this.strokeWidth;\n            }\n          }\n\n          var paths = null;\n\n          if (this.isHorizontal) {\n            paths = this.drawRangeBarPaths({\n              indexes: {\n                i: i,\n                j: j,\n                realIndex: realIndex,\n                bc: bc\n              },\n              barHeight: barHeight,\n              strokeWidth: strokeWidth,\n              pathTo: pathTo,\n              pathFrom: pathFrom,\n              zeroW: zeroW,\n              x: x,\n              y: y,\n              yDivision: yDivision,\n              elSeries: elSeries\n            });\n          } else {\n            paths = this.drawRangeColumnPaths({\n              indexes: {\n                i: i,\n                j: j,\n                realIndex: realIndex,\n                bc: bc\n              },\n              x: x,\n              y: y,\n              xDivision: xDivision,\n              pathTo: pathTo,\n              pathFrom: pathFrom,\n              barWidth: barWidth,\n              zeroH: zeroH,\n              strokeWidth: strokeWidth,\n              elSeries: elSeries\n            });\n          }\n\n          pathTo = paths.pathTo;\n          pathFrom = paths.pathFrom;\n          y = paths.y;\n          x = paths.x; // push current X\n\n          if (j > 0) {\n            xArrj.push(x + barWidth / 2);\n          }\n\n          yArrj.push(y);\n          var pathFill = fill.fillPath({\n            seriesNumber: realIndex\n          });\n          var lineFill = w.globals.stroke.colors[realIndex];\n          elSeries = this.renderSeries({\n            realIndex: realIndex,\n            pathFill: pathFill,\n            lineFill: lineFill,\n            j: j,\n            i: i,\n            pathFrom: pathFrom,\n            pathTo: pathTo,\n            strokeWidth: strokeWidth,\n            elSeries: elSeries,\n            x: x,\n            y: y,\n            series: series,\n            barHeight: barHeight,\n            barWidth: barWidth,\n            elDataLabelsWrap: elDataLabelsWrap,\n            visibleSeries: this.visibleI,\n            type: 'rangebar'\n          });\n        } // push all x val arrays into main xArr\n\n\n        w.globals.seriesXvalues[realIndex] = xArrj;\n        w.globals.seriesYvalues[realIndex] = yArrj;\n        ret.add(elSeries);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"drawRangeColumnPaths\",\n    value: function drawRangeColumnPaths(_ref) {\n      var indexes = _ref.indexes,\n          x = _ref.x,\n          y = _ref.y,\n          strokeWidth = _ref.strokeWidth,\n          xDivision = _ref.xDivision,\n          pathTo = _ref.pathTo,\n          pathFrom = _ref.pathFrom,\n          barWidth = _ref.barWidth,\n          zeroH = _ref.zeroH;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var i = indexes.i;\n      var j = indexes.j;\n      var yRatio = this.yRatio[this.yaxisIndex];\n      var realIndex = indexes.realIndex;\n      var range = this.getRangeValue(realIndex, j);\n      var y1 = Math.min(range.start, range.end);\n      var y2 = Math.max(range.start, range.end);\n\n      if (w.globals.isXNumeric) {\n        x = (w.globals.seriesX[i][j] - w.globals.minX) / this.xRatio - barWidth / 2;\n      }\n\n      var barXPosition = x + barWidth * this.visibleI;\n      pathTo = graphics.move(barXPosition, zeroH);\n      pathFrom = graphics.move(barXPosition, zeroH);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.getPathFrom(realIndex, j, true);\n      }\n\n      if (typeof this.series[i][j] === 'undefined' || this.series[i][j] === null) {\n        y1 = zeroH;\n      } else {\n        y1 = zeroH - y1 / yRatio;\n        y2 = zeroH - y2 / yRatio;\n      }\n\n      pathTo = graphics.move(barXPosition, y2) + graphics.line(barXPosition + barWidth, y2) + graphics.line(barXPosition + barWidth, y1) + graphics.line(barXPosition, y1) + graphics.line(barXPosition, y2 - strokeWidth / 2);\n\n      if (!w.globals.isXNumeric) {\n        x = x + xDivision;\n      }\n\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: x,\n        y: y2,\n        barXPosition: barXPosition\n      };\n    }\n  }, {\n    key: \"drawRangeBarPaths\",\n    value: function drawRangeBarPaths(_ref2) {\n      var indexes = _ref2.indexes,\n          x = _ref2.x,\n          y = _ref2.y,\n          yDivision = _ref2.yDivision,\n          pathTo = _ref2.pathTo,\n          pathFrom = _ref2.pathFrom,\n          barHeight = _ref2.barHeight,\n          zeroW = _ref2.zeroW;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var i = indexes.i;\n      var j = indexes.j;\n      var realIndex = indexes.realIndex;\n      var x1 = zeroW;\n      var x2 = zeroW;\n\n      if (w.globals.isXNumeric) {\n        y = (w.globals.seriesX[i][j] - w.globals.minX) / this.invertedXRatio - barHeight;\n      }\n\n      var barYPosition = y + barHeight * this.visibleI;\n      pathTo = graphics.move(zeroW, barYPosition);\n      pathFrom = graphics.move(zeroW, barYPosition);\n\n      if (w.globals.previousPaths.length > 0) {\n        pathFrom = this.getPathFrom(realIndex, j);\n      }\n\n      if (typeof this.series[i][j] !== 'undefined' && this.series[i][j] !== null) {\n        x1 = zeroW + this.seriesRangeStart[i][j] / this.invertedYRatio;\n        x2 = zeroW + this.seriesRangeEnd[i][j] / this.invertedYRatio;\n      }\n\n      pathTo = graphics.move(x1, barYPosition) + graphics.line(x2, barYPosition) + graphics.line(x2, barYPosition + barHeight) + graphics.line(x1, barYPosition + barHeight) + graphics.line(x1, barYPosition);\n\n      if (!w.globals.isXNumeric) {\n        y = y + yDivision;\n      }\n\n      return {\n        pathTo: pathTo,\n        pathFrom: pathFrom,\n        x: x2,\n        y: y,\n        barYPosition: barYPosition\n      };\n    }\n  }, {\n    key: \"getRangeValue\",\n    value: function getRangeValue(i, j) {\n      var w = this.w;\n      return {\n        start: w.globals.seriesRangeStart[i][j],\n        end: w.globals.seriesRangeEnd[i][j]\n      };\n    }\n  }]);\n\n  return RangeBar;\n}(Bar);\n\n/**\n * ApexCharts Line Class responsible for drawing Line / Area Charts.\n * This class is also responsible for generating values for Bubble/Scatter charts, so need to rename it to Axis Charts to avoid confusions\n * @module Line\n **/\n\nvar Line =\n/*#__PURE__*/\nfunction () {\n  function Line(ctx, xyRatios, isPointsChart) {\n    _classCallCheck(this, Line);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.xyRatios = xyRatios;\n    this.pointsChart = !(this.w.config.chart.type !== 'bubble' && this.w.config.chart.type !== 'scatter') || isPointsChart;\n    this.scatter = new Scatter(this.ctx);\n    this.noNegatives = this.w.globals.minX === Number.MAX_VALUE;\n    this.yaxisIndex = 0;\n  }\n\n  _createClass(Line, [{\n    key: \"draw\",\n    value: function draw(series, ptype, seriesIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var fill = new Fill(this.ctx);\n      var type = w.globals.comboCharts ? ptype : w.config.chart.type;\n      var ret = graphics.group({\n        class: \"apexcharts-\".concat(type, \"-series apexcharts-plot-series\")\n      });\n      var coreUtils = new CoreUtils(this.ctx, w);\n      series = coreUtils.getLogSeries(series);\n      var yRatio = this.xyRatios.yRatio;\n      yRatio = coreUtils.getLogYRatios(yRatio);\n      var zRatio = this.xyRatios.zRatio;\n      var xRatio = this.xyRatios.xRatio;\n      var baseLineY = this.xyRatios.baseLineY; // push all series in an array, so we can draw in reverse order (for stacked charts)\n\n      var allSeries = [];\n      var prevSeriesY = [];\n      var categoryAxisCorrection = 0;\n\n      for (var i = 0; i < series.length; i++) {\n        // width divided into equal parts\n        if (type === 'line' && (w.config.fill.type === 'gradient' || w.config.fill.type[i] === 'gradient')) {\n          // a small adjustment to allow gradient line to draw correctly for all same values\n\n          /* #fix https://github.com/apexcharts/apexcharts.js/issues/358 */\n          if (coreUtils.seriesHaveSameValues(i)) {\n            var gSeries = series[i].slice();\n            gSeries[gSeries.length - 1] = gSeries[gSeries.length - 1] + 0.000001;\n            series[i] = gSeries;\n          }\n        }\n\n        var xDivision = w.globals.gridWidth / w.globals.dataPoints;\n        var realIndex = w.globals.comboCharts ? seriesIndex[i] : i;\n\n        if (yRatio.length > 1) {\n          this.yaxisIndex = realIndex;\n        }\n\n        this.isReversed = w.config.yaxis[this.yaxisIndex] && w.config.yaxis[this.yaxisIndex].reversed;\n        var yArrj = []; // hold y values of current iterating series\n\n        var xArrj = []; // hold x values of current iterating series\n        // zeroY is the 0 value in y series which can be used in negative charts\n\n        var zeroY = w.globals.gridHeight - baseLineY[this.yaxisIndex] - (this.isReversed ? w.globals.gridHeight : 0) + (this.isReversed ? baseLineY[this.yaxisIndex] * 2 : 0);\n        var areaBottomY = zeroY;\n\n        if (zeroY > w.globals.gridHeight) {\n          areaBottomY = w.globals.gridHeight;\n        }\n\n        categoryAxisCorrection = xDivision / 2;\n        var x = w.globals.padHorizontal + categoryAxisCorrection;\n        var y = 1;\n\n        if (w.globals.isXNumeric && w.globals.seriesX.length > 0) {\n          x = (w.globals.seriesX[realIndex][0] - w.globals.minX) / xRatio;\n        }\n\n        xArrj.push(x);\n        var linePath = void 0,\n            areaPath = void 0,\n            pathFromLine = void 0,\n            pathFromArea = void 0;\n        var linePaths = [];\n        var areaPaths = []; // el to which series will be drawn\n\n        var elSeries = graphics.group({\n          class: \"apexcharts-series \".concat(Utils.escapeString(w.globals.seriesNames[realIndex]))\n        }); // points\n\n        var elPointsMain = graphics.group({\n          class: 'apexcharts-series-markers-wrap'\n        }); // eldatalabels\n\n        var elDataLabelsWrap = graphics.group({\n          class: 'apexcharts-datalabels'\n        });\n        this.ctx.series.addCollapsedClassToSeries(elSeries, realIndex);\n        var longestSeries = series[i].length === w.globals.dataPoints;\n        elSeries.attr({\n          'data:longestSeries': longestSeries,\n          rel: i + 1,\n          'data:realIndex': realIndex\n        });\n        this.appendPathFrom = true;\n        var pX = x;\n        var pY = void 0;\n        var prevX = pX;\n        var prevY = zeroY; // w.globals.svgHeight;\n\n        var lineYPosition = 0; // the first value in the current series is not null or undefined\n\n        var firstPrevY = this.determineFirstPrevY({\n          i: i,\n          series: series,\n          yRatio: yRatio[this.yaxisIndex],\n          zeroY: zeroY,\n          prevY: prevY,\n          prevSeriesY: prevSeriesY,\n          lineYPosition: lineYPosition\n        });\n        prevY = firstPrevY.prevY;\n        yArrj.push(prevY);\n        pY = prevY;\n\n        if (series[i][0] === null) {\n          // when the first value itself is null, we need to move the pointer to a location where a null value is not found\n          for (var s = 0; s < series[i].length; s++) {\n            if (series[i][s] !== null) {\n              prevX = xDivision * s;\n              prevY = zeroY - series[i][s] / yRatio[this.yaxisIndex];\n              linePath = graphics.move(prevX, prevY);\n              areaPath = graphics.move(prevX, areaBottomY);\n              break;\n            }\n          }\n        } else {\n          linePath = graphics.move(prevX, prevY);\n          areaPath = graphics.move(prevX, areaBottomY) + graphics.line(prevX, prevY);\n        }\n\n        pathFromLine = graphics.move(-1, zeroY) + graphics.line(-1, zeroY);\n        pathFromArea = graphics.move(-1, zeroY) + graphics.line(-1, zeroY);\n\n        if (w.globals.previousPaths.length > 0) {\n          var pathFrom = this.checkPreviousPaths({\n            pathFromLine: pathFromLine,\n            pathFromArea: pathFromArea,\n            realIndex: realIndex\n          });\n          pathFromLine = pathFrom.pathFromLine;\n          pathFromArea = pathFrom.pathFromArea;\n        }\n\n        var iterations = w.globals.dataPoints > 1 ? w.globals.dataPoints - 1 : w.globals.dataPoints;\n\n        for (var j = 0; j < iterations; j++) {\n          if (w.globals.isXNumeric) {\n            var sX = w.globals.seriesX[realIndex][j + 1];\n\n            if (typeof w.globals.seriesX[realIndex][j + 1] === 'undefined') {\n              /* fix #374 */\n              sX = w.globals.seriesX[realIndex][iterations - 1];\n            }\n\n            x = (sX - w.globals.minX) / xRatio;\n          } else {\n            x = x + xDivision;\n          }\n\n          var minY = Utils.isNumber(w.globals.minYArr[realIndex]) ? w.globals.minYArr[realIndex] : w.globals.minY;\n\n          if (w.config.chart.stacked) {\n            if (i > 0 && w.globals.collapsedSeries.length < w.config.series.length - 1) {\n              lineYPosition = prevSeriesY[i - 1][j + 1];\n            } else {\n              // the first series will not have prevY values\n              lineYPosition = zeroY;\n            }\n\n            if (typeof series[i][j + 1] === 'undefined' || series[i][j + 1] === null) {\n              y = lineYPosition - minY / yRatio[this.yaxisIndex] + (this.isReversed ? minY / yRatio[this.yaxisIndex] : 0) * 2;\n            } else {\n              y = lineYPosition - series[i][j + 1] / yRatio[this.yaxisIndex] + (this.isReversed ? series[i][j + 1] / yRatio[this.yaxisIndex] : 0) * 2;\n            }\n          } else {\n            if (typeof series[i][j + 1] === 'undefined' || series[i][j + 1] === null) {\n              y = zeroY - minY / yRatio[this.yaxisIndex] + (this.isReversed ? minY / yRatio[this.yaxisIndex] : 0) * 2;\n            } else {\n              y = zeroY - series[i][j + 1] / yRatio[this.yaxisIndex] + (this.isReversed ? series[i][j + 1] / yRatio[this.yaxisIndex] : 0) * 2;\n            }\n          } // push current X\n\n\n          xArrj.push(x); // push current Y that will be used as next series's bottom position\n\n          yArrj.push(y);\n          var calculatedPaths = this.createPaths({\n            series: series,\n            i: i,\n            j: j,\n            x: x,\n            y: y,\n            xDivision: xDivision,\n            pX: pX,\n            pY: pY,\n            areaBottomY: areaBottomY,\n            linePath: linePath,\n            areaPath: areaPath,\n            linePaths: linePaths,\n            areaPaths: areaPaths,\n            seriesIndex: seriesIndex\n          });\n          areaPaths = calculatedPaths.areaPaths;\n          linePaths = calculatedPaths.linePaths;\n          pX = calculatedPaths.pX;\n          pY = calculatedPaths.pY;\n          areaPath = calculatedPaths.areaPath;\n          linePath = calculatedPaths.linePath;\n\n          if (this.appendPathFrom) {\n            pathFromLine = pathFromLine + graphics.line(x, zeroY);\n            pathFromArea = pathFromArea + graphics.line(x, zeroY);\n          }\n\n          var pointsPos = this.calculatePoints({\n            series: series,\n            x: x,\n            y: y,\n            realIndex: realIndex,\n            i: i,\n            j: j,\n            prevY: prevY,\n            categoryAxisCorrection: categoryAxisCorrection,\n            xRatio: xRatio\n          });\n\n          if (!this.pointsChart) {\n            var markers = new Markers(this.ctx);\n\n            if (w.globals.dataPoints > 1) {\n              elPointsMain.node.classList.add('hidden');\n            }\n\n            var elPointsWrap = markers.plotChartMarkers(pointsPos, realIndex, j + 1);\n\n            if (elPointsWrap !== null) {\n              elPointsMain.add(elPointsWrap);\n            }\n          } else {\n            // scatter / bubble chart points creation\n            this.scatter.draw(elSeries, j, {\n              realIndex: realIndex,\n              pointsPos: pointsPos,\n              zRatio: zRatio,\n              elParent: elPointsMain\n            });\n          }\n\n          var dataLabelAlign = !series[i][j + 1] || series[i][j + 1] > series[i][j] ? 'top' : 'bottom';\n          var dataLabels = new DataLabels(this.ctx);\n          var drawnLabels = dataLabels.drawDataLabel(pointsPos, realIndex, j + 1, null, dataLabelAlign);\n\n          if (drawnLabels !== null) {\n            elDataLabelsWrap.add(drawnLabels);\n          }\n        } // push all current y values array to main PrevY Array\n\n\n        prevSeriesY.push(yArrj); // push all x val arrays into main xArr\n\n        w.globals.seriesXvalues[realIndex] = xArrj;\n        w.globals.seriesYvalues[realIndex] = yArrj; // these elements will be shown after area path animation completes\n\n        if (!this.pointsChart) {\n          w.globals.delayedElements.push({\n            el: elPointsMain.node,\n            index: realIndex\n          });\n        }\n\n        var defaultRenderedPathOptions = {\n          i: i,\n          realIndex: realIndex,\n          animationDelay: i,\n          initialSpeed: w.config.chart.animations.speed,\n          dataChangeSpeed: w.config.chart.animations.dynamicAnimation.speed,\n          className: \"apexcharts-\".concat(type),\n          id: \"apexcharts-\".concat(type)\n        };\n\n        if (type === 'area') {\n          var pathFill = fill.fillPath({\n            seriesNumber: realIndex\n          });\n\n          for (var p = 0; p < areaPaths.length; p++) {\n            var renderedPath = graphics.renderPaths(_objectSpread({}, defaultRenderedPathOptions, {\n              pathFrom: pathFromArea,\n              pathTo: areaPaths[p],\n              stroke: 'none',\n              strokeWidth: 0,\n              strokeLineCap: null,\n              fill: pathFill\n            }));\n            elSeries.add(renderedPath);\n          }\n        }\n\n        if (w.config.stroke.show && !this.pointsChart) {\n          var lineFill = null;\n\n          if (type === 'line') {\n            // fillable lines only for lineChart\n            lineFill = fill.fillPath({\n              seriesNumber: realIndex,\n              i: i\n            });\n          } else {\n            lineFill = w.globals.stroke.colors[realIndex];\n          }\n\n          for (var _p = 0; _p < linePaths.length; _p++) {\n            var _renderedPath = graphics.renderPaths(_objectSpread({}, defaultRenderedPathOptions, {\n              pathFrom: pathFromLine,\n              pathTo: linePaths[_p],\n              stroke: lineFill,\n              strokeWidth: Array.isArray(w.config.stroke.width) ? w.config.stroke.width[realIndex] : w.config.stroke.width,\n              strokeLineCap: w.config.stroke.lineCap,\n              fill: 'none'\n            }));\n\n            elSeries.add(_renderedPath);\n          }\n        }\n\n        elSeries.add(elPointsMain);\n        elSeries.add(elDataLabelsWrap);\n        allSeries.push(elSeries);\n      }\n\n      for (var _s = allSeries.length; _s > 0; _s--) {\n        ret.add(allSeries[_s - 1]);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"createPaths\",\n    value: function createPaths(_ref) {\n      var series = _ref.series,\n          i = _ref.i,\n          j = _ref.j,\n          x = _ref.x,\n          y = _ref.y,\n          pX = _ref.pX,\n          pY = _ref.pY,\n          xDivision = _ref.xDivision,\n          areaBottomY = _ref.areaBottomY,\n          linePath = _ref.linePath,\n          areaPath = _ref.areaPath,\n          linePaths = _ref.linePaths,\n          areaPaths = _ref.areaPaths,\n          seriesIndex = _ref.seriesIndex;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var curve = w.config.stroke.curve;\n\n      if (Array.isArray(w.config.stroke.curve)) {\n        if (Array.isArray(seriesIndex)) {\n          curve = w.config.stroke.curve[seriesIndex[i]];\n        } else {\n          curve = w.config.stroke.curve[i];\n        }\n      } // logic of smooth curve derived from chartist\n      // CREDITS: https://gionkunz.github.io/chartist-js/\n\n\n      if (curve === 'smooth') {\n        var length = (x - pX) * 0.35;\n\n        if (w.globals.hasNullValues) {\n          if (series[i][j] !== null) {\n            if (series[i][j + 1] !== null) {\n              linePath = graphics.move(pX, pY) + graphics.curve(pX + length, pY, x - length, y, x + 1, y);\n              areaPath = graphics.move(pX + 1, pY) + graphics.curve(pX + length, pY, x - length, y, x + 1, y) + graphics.line(x, areaBottomY) + graphics.line(pX, areaBottomY) + 'z';\n            } else {\n              linePath = graphics.move(pX, pY);\n              areaPath = graphics.move(pX, pY) + 'z';\n            }\n          }\n\n          linePaths.push(linePath);\n          areaPaths.push(areaPath);\n        } else {\n          linePath = linePath + graphics.curve(pX + length, pY, x - length, y, x, y);\n          areaPath = areaPath + graphics.curve(pX + length, pY, x - length, y, x, y);\n        }\n\n        pX = x;\n        pY = y;\n\n        if (j === series[i].length - 2) {\n          // last loop, close path\n          areaPath = areaPath + graphics.curve(pX, pY, x, y, x, areaBottomY) + graphics.move(x, y) + 'z';\n\n          if (!w.globals.hasNullValues) {\n            linePaths.push(linePath);\n            areaPaths.push(areaPath);\n          }\n        }\n      } else {\n        if (series[i][j + 1] === null) {\n          linePath = linePath + graphics.move(x, y);\n          areaPath = areaPath + graphics.line(x - xDivision, areaBottomY) + graphics.move(x, y);\n        }\n\n        if (series[i][j] === null) {\n          linePath = linePath + graphics.move(x, y);\n          areaPath = areaPath + graphics.move(x, areaBottomY);\n        }\n\n        if (curve === 'stepline') {\n          linePath = linePath + graphics.line(x, null, 'H') + graphics.line(null, y, 'V');\n          areaPath = areaPath + graphics.line(x, null, 'H') + graphics.line(null, y, 'V');\n        } else if (curve === 'straight') {\n          linePath = linePath + graphics.line(x, y);\n          areaPath = areaPath + graphics.line(x, y);\n        }\n\n        if (j === series[i].length - 2) {\n          // last loop, close path\n          areaPath = areaPath + graphics.line(x, areaBottomY) + graphics.move(x, y) + 'z';\n          linePaths.push(linePath);\n          areaPaths.push(areaPath);\n        }\n      }\n\n      return {\n        linePaths: linePaths,\n        areaPaths: areaPaths,\n        pX: pX,\n        pY: pY,\n        linePath: linePath,\n        areaPath: areaPath\n      };\n    }\n  }, {\n    key: \"calculatePoints\",\n    value: function calculatePoints(_ref2) {\n      var series = _ref2.series,\n          realIndex = _ref2.realIndex,\n          x = _ref2.x,\n          y = _ref2.y,\n          i = _ref2.i,\n          j = _ref2.j,\n          prevY = _ref2.prevY,\n          categoryAxisCorrection = _ref2.categoryAxisCorrection,\n          xRatio = _ref2.xRatio;\n      var w = this.w;\n      var ptX = [];\n      var ptY = [];\n\n      if (j === 0) {\n        var xPT1st = categoryAxisCorrection + w.config.markers.offsetX; // the first point for line series\n        // we need to check whether it's not a time series, because a time series may\n        // start from the middle of the x axis\n\n        if (w.globals.isXNumeric) {\n          xPT1st = (w.globals.seriesX[realIndex][0] - w.globals.minX) / xRatio + w.config.markers.offsetX;\n        } // push 2 points for the first data values\n\n\n        ptX.push(xPT1st);\n        ptY.push(Utils.isNumber(series[i][0]) ? prevY + w.config.markers.offsetY : null);\n        ptX.push(x + w.config.markers.offsetX);\n        ptY.push(Utils.isNumber(series[i][j + 1]) ? y + w.config.markers.offsetY : null);\n      } else {\n        ptX.push(x + w.config.markers.offsetX);\n        ptY.push(Utils.isNumber(series[i][j + 1]) ? y + w.config.markers.offsetY : null);\n      }\n\n      var pointsPos = {\n        x: ptX,\n        y: ptY\n      };\n      return pointsPos;\n    }\n  }, {\n    key: \"checkPreviousPaths\",\n    value: function checkPreviousPaths(_ref3) {\n      var pathFromLine = _ref3.pathFromLine,\n          pathFromArea = _ref3.pathFromArea,\n          realIndex = _ref3.realIndex;\n      var w = this.w;\n\n      for (var pp = 0; pp < w.globals.previousPaths.length; pp++) {\n        var gpp = w.globals.previousPaths[pp];\n\n        if ((gpp.type === 'line' || gpp.type === 'area') && gpp.paths.length > 0 && parseInt(gpp.realIndex) === parseInt(realIndex)) {\n          if (gpp.type === 'line') {\n            this.appendPathFrom = false;\n            pathFromLine = w.globals.previousPaths[pp].paths[0].d;\n          } else if (gpp.type === 'area') {\n            this.appendPathFrom = false;\n            pathFromArea = w.globals.previousPaths[pp].paths[0].d;\n\n            if (w.config.stroke.show) {\n              pathFromLine = w.globals.previousPaths[pp].paths[1].d;\n            }\n          }\n        }\n      }\n\n      return {\n        pathFromLine: pathFromLine,\n        pathFromArea: pathFromArea\n      };\n    }\n  }, {\n    key: \"determineFirstPrevY\",\n    value: function determineFirstPrevY(_ref4) {\n      var i = _ref4.i,\n          series = _ref4.series,\n          yRatio = _ref4.yRatio,\n          zeroY = _ref4.zeroY,\n          prevY = _ref4.prevY,\n          prevSeriesY = _ref4.prevSeriesY,\n          lineYPosition = _ref4.lineYPosition;\n      var w = this.w;\n\n      if (typeof series[i][0] !== 'undefined') {\n        if (w.config.chart.stacked) {\n          if (i > 0) {\n            // 1st y value of previous series\n            lineYPosition = prevSeriesY[i - 1][0];\n          } else {\n            // the first series will not have prevY values\n            lineYPosition = zeroY;\n          }\n\n          prevY = lineYPosition - series[i][0] / yRatio + (this.isReversed ? series[i][0] / yRatio : 0) * 2;\n        } else {\n          prevY = zeroY - series[i][0] / yRatio + (this.isReversed ? series[i][0] / yRatio : 0) * 2;\n        }\n      } else {\n        // the first value in the current series is null\n        if (w.config.chart.stacked && i > 0 && typeof series[i][0] === 'undefined') {\n          // check for undefined value (undefined value will occur when we clear the series while user clicks on legend to hide serieses)\n          for (var s = i - 1; s >= 0; s--) {\n            // for loop to get to 1st previous value until we get it\n            if (series[s][0] !== null && typeof series[s][0] !== 'undefined') {\n              lineYPosition = prevSeriesY[s][0];\n              prevY = lineYPosition;\n              break;\n            }\n          }\n        }\n      }\n\n      return {\n        prevY: prevY,\n        lineYPosition: lineYPosition\n      };\n    }\n  }]);\n\n  return Line;\n}();\n\n/**\n * ApexCharts Formatter Class for setting value formatters for axes as well as tooltips.\n *\n * @module Formatters\n **/\n\nvar Formatters =\n/*#__PURE__*/\nfunction () {\n  function Formatters(ctx) {\n    _classCallCheck(this, Formatters);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.tooltipKeyFormat = 'dd MMM';\n  }\n\n  _createClass(Formatters, [{\n    key: \"xLabelFormat\",\n    value: function xLabelFormat(fn, val) {\n      var w = this.w;\n\n      if (w.config.xaxis.type === 'datetime') {\n        // if user has not specified a custom formatter, use the default tooltip.x.format\n        if (w.config.tooltip.x.formatter === undefined) {\n          var datetimeObj = new DateTime(this.ctx);\n          return datetimeObj.formatDate(new Date(val), w.config.tooltip.x.format, true, true);\n        }\n      }\n\n      return fn(val);\n    }\n  }, {\n    key: \"setLabelFormatters\",\n    value: function setLabelFormatters() {\n      var w = this.w;\n\n      w.globals.xLabelFormatter = function (val) {\n        return val;\n      };\n\n      w.globals.xaxisTooltipFormatter = function (val) {\n        return val;\n      };\n\n      w.globals.ttKeyFormatter = function (val) {\n        return val;\n      };\n\n      w.globals.ttZFormatter = function (val) {\n        return val;\n      };\n\n      w.globals.legendFormatter = function (val) {\n        return val;\n      };\n\n      if (typeof w.config.tooltip.x.formatter === 'function') {\n        w.globals.ttKeyFormatter = w.config.tooltip.x.formatter;\n      }\n\n      if (typeof w.config.xaxis.tooltip.formatter === 'function') {\n        w.globals.xaxisTooltipFormatter = w.config.xaxis.tooltip.formatter;\n      }\n\n      if (Array.isArray(w.config.tooltip.y)) {\n        w.globals.ttVal = w.config.tooltip.y;\n      } else {\n        if (w.config.tooltip.y.formatter !== undefined) {\n          w.globals.ttVal = w.config.tooltip.y;\n        }\n      }\n\n      if (w.config.tooltip.z.formatter !== undefined) {\n        w.globals.ttZFormatter = w.config.tooltip.z.formatter;\n      } // legend formatter - if user wants to append any global values of series to legend text\n\n\n      if (w.config.legend.formatter !== undefined) {\n        w.globals.legendFormatter = w.config.legend.formatter;\n      } // formatter function will always overwrite format property\n\n\n      if (w.config.xaxis.labels.formatter !== undefined) {\n        w.globals.xLabelFormatter = w.config.xaxis.labels.formatter;\n      } else {\n        w.globals.xLabelFormatter = function (val) {\n          if (Utils.isNumber(val)) {\n            // numeric xaxis may have smaller range, so defaulting to 1 decimal\n            if (w.config.xaxis.type === 'numeric' && w.globals.dataPoints < 50) {\n              return val.toFixed(1);\n            }\n\n            return val.toFixed(0);\n          }\n\n          return val;\n        };\n      } // formatter function will always overwrite format property\n\n\n      w.config.yaxis.forEach(function (yaxe, i) {\n        if (yaxe.labels.formatter !== undefined) {\n          w.globals.yLabelFormatters[i] = yaxe.labels.formatter;\n        } else {\n          w.globals.yLabelFormatters[i] = function (val) {\n            if (Utils.isNumber(val)) {\n              if (w.globals.yValueDecimal !== 0 || w.globals.maxY - w.globals.minY < 4) {\n                return val.toFixed(yaxe.decimalsInFloat);\n              } else {\n                return val.toFixed(0);\n              }\n            }\n\n            return val;\n          };\n        }\n      });\n      return w.globals;\n    }\n  }, {\n    key: \"heatmapLabelFormatters\",\n    value: function heatmapLabelFormatters() {\n      var w = this.w;\n\n      if (w.config.chart.type === 'heatmap') {\n        w.globals.yAxisScale[0].result = w.globals.seriesNames.slice(); //  get the longest string from the labels array and also apply label formatter to it\n\n        var longest = w.globals.seriesNames.reduce(function (a, b) {\n          return a.length > b.length ? a : b;\n        }, 0);\n        w.globals.yAxisScale[0].niceMax = longest;\n        w.globals.yAxisScale[0].niceMin = longest;\n      }\n    }\n  }]);\n\n  return Formatters;\n}();\n\nvar AxesUtils =\n/*#__PURE__*/\nfunction () {\n  function AxesUtils(ctx) {\n    _classCallCheck(this, AxesUtils);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  } // Based on the formatter function, get the label text and position\n\n\n  _createClass(AxesUtils, [{\n    key: \"getLabel\",\n    value: function getLabel(labels, timelineLabels, x, i) {\n      var drawnLabels = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n      var w = this.w;\n      var rawLabel = typeof labels[i] === 'undefined' ? '' : labels[i];\n      var label;\n      var xlbFormatter = w.globals.xLabelFormatter;\n      var customFormatter = w.config.xaxis.labels.formatter;\n      var xFormat = new Formatters(this.ctx);\n      label = xFormat.xLabelFormat(xlbFormatter, rawLabel);\n\n      if (customFormatter !== undefined) {\n        label = customFormatter(rawLabel, labels[i], i);\n      }\n\n      if (timelineLabels.length > 0) {\n        x = timelineLabels[i].position;\n        label = timelineLabels[i].value;\n      } else {\n        if (w.config.xaxis.type === 'datetime' && customFormatter === undefined) {\n          label = '';\n        }\n      }\n\n      if (typeof label === 'undefined') label = '';\n      label = label.toString();\n\n      if (label.indexOf('NaN') === 0 || label.toLowerCase().indexOf('invalid') === 0 || label.toLowerCase().indexOf('infinity') >= 0 || drawnLabels.indexOf(label) >= 0 && !w.config.xaxis.labels.showDuplicates) {\n        label = '';\n      }\n\n      return {\n        x: x,\n        text: label\n      };\n    }\n  }, {\n    key: \"drawYAxisTicks\",\n    value: function drawYAxisTicks(x, tickAmount, axisBorder, axisTicks, realIndex, labelsDivider, elYaxis) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx); // initial label position = 0;\n\n      var t = w.globals.translateY;\n\n      if (axisTicks.show) {\n        if (w.config.yaxis[realIndex].opposite === true) x = x + axisTicks.width;\n\n        for (var i = tickAmount; i >= 0; i--) {\n          var tY = t + tickAmount / 10 + w.config.yaxis[realIndex].labels.offsetY - 1;\n\n          if (w.globals.isBarHorizontal) {\n            tY = labelsDivider * i;\n          }\n\n          var elTick = graphics.drawLine(x + axisBorder.offsetX - axisTicks.width + axisTicks.offsetX, tY + axisTicks.offsetY, x + axisBorder.offsetX + axisTicks.offsetX, tY + axisTicks.offsetY, axisBorder.color);\n          elYaxis.add(elTick);\n          t = t + labelsDivider;\n        }\n      }\n    }\n  }]);\n\n  return AxesUtils;\n}();\n\n/**\n * ApexCharts XAxis Class for drawing X-Axis.\n *\n * @module XAxis\n **/\n\nvar XAxis =\n/*#__PURE__*/\nfunction () {\n  function XAxis(ctx) {\n    _classCallCheck(this, XAxis);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    var w = this.w;\n    this.xaxisLabels = w.globals.labels.slice();\n\n    if (w.globals.timelineLabels.length > 0) {\n      //  timeline labels are there\n      this.xaxisLabels = w.globals.timelineLabels.slice();\n    }\n\n    this.drawnLabels = [];\n\n    if (w.config.xaxis.position === 'top') {\n      this.offY = 0;\n    } else {\n      this.offY = w.globals.gridHeight + 1;\n    }\n\n    this.offY = this.offY + w.config.xaxis.axisBorder.offsetY;\n    this.xaxisFontSize = w.config.xaxis.labels.style.fontSize;\n    this.xaxisFontFamily = w.config.xaxis.labels.style.fontFamily;\n    this.xaxisForeColors = w.config.xaxis.labels.style.colors;\n    this.xaxisBorderWidth = w.config.xaxis.axisBorder.width;\n\n    if (this.xaxisBorderWidth.indexOf('%') > -1) {\n      this.xaxisBorderWidth = w.globals.gridWidth * parseInt(this.xaxisBorderWidth) / 100;\n    } else {\n      this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth);\n    }\n\n    this.xaxisBorderHeight = w.config.xaxis.axisBorder.height; // For bars, we will only consider single y xais,\n    // as we are not providing multiple yaxis for bar charts\n\n    this.yaxis = w.config.yaxis[0];\n    this.axesUtils = new AxesUtils(ctx);\n  }\n\n  _createClass(XAxis, [{\n    key: \"drawXaxis\",\n    value: function drawXaxis() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var elXaxis = graphics.group({\n        class: 'apexcharts-xaxis',\n        transform: \"translate(\".concat(w.config.xaxis.offsetX, \", \").concat(w.config.xaxis.offsetY, \")\")\n      });\n      var elXaxisTexts = graphics.group({\n        class: 'apexcharts-xaxis-texts-g',\n        transform: \"translate(\".concat(w.globals.translateXAxisX, \", \").concat(w.globals.translateXAxisY, \")\")\n      });\n      elXaxis.add(elXaxisTexts);\n      var colWidth; // initial x Position (keep adding column width in the loop)\n\n      var xPos = w.globals.padHorizontal;\n      var labels = [];\n\n      for (var i = 0; i < this.xaxisLabels.length; i++) {\n        labels.push(this.xaxisLabels[i]);\n      }\n\n      if (w.globals.isXNumeric) {\n        colWidth = w.globals.gridWidth / (labels.length - 1);\n        xPos = xPos + colWidth / 2 + w.config.xaxis.labels.offsetX;\n      } else {\n        colWidth = w.globals.gridWidth / labels.length;\n        xPos = xPos + colWidth + w.config.xaxis.labels.offsetX;\n      }\n\n      var labelsLen = labels.length;\n\n      if (w.config.xaxis.labels.show) {\n        for (var _i = 0; _i <= labelsLen - 1; _i++) {\n          var x = xPos - colWidth / 2 + w.config.xaxis.labels.offsetX;\n          var label = this.axesUtils.getLabel(labels, w.globals.timelineLabels, x, _i, this.drawnLabels);\n          this.drawnLabels.push(label.text);\n          var offsetYCorrection = 28;\n\n          if (w.globals.rotateXLabels) {\n            offsetYCorrection = 22;\n          }\n\n          var elTick = graphics.drawText({\n            x: label.x,\n            y: this.offY + w.config.xaxis.labels.offsetY + offsetYCorrection,\n            text: '',\n            textAnchor: 'middle',\n            fontSize: this.xaxisFontSize,\n            fontFamily: this.xaxisFontFamily,\n            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[_i] : this.xaxisForeColors,\n            cssClass: 'apexcharts-xaxis-label ' + w.config.xaxis.labels.style.cssClass\n          });\n          elXaxisTexts.add(elTick);\n          graphics.addTspan(elTick, label.text, this.xaxisFontFamily);\n          var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');\n          elTooltipTitle.textContent = label.text;\n          elTick.node.appendChild(elTooltipTitle);\n          xPos = xPos + colWidth;\n        }\n      }\n\n      if (w.config.xaxis.title.text !== undefined) {\n        var elXaxisTitle = graphics.group({\n          class: 'apexcharts-xaxis-title'\n        });\n        var elXAxisTitleText = graphics.drawText({\n          x: w.globals.gridWidth / 2 + w.config.xaxis.title.offsetX,\n          y: this.offY - parseInt(this.xaxisFontSize) + w.globals.xAxisLabelsHeight + w.config.xaxis.title.offsetY,\n          text: w.config.xaxis.title.text,\n          textAnchor: 'middle',\n          fontSize: w.config.xaxis.title.style.fontSize,\n          fontFamily: w.config.xaxis.title.style.fontFamily,\n          foreColor: w.config.xaxis.title.style.color,\n          cssClass: 'apexcharts-xaxis-title-text ' + w.config.xaxis.title.style.cssClass\n        });\n        elXaxisTitle.add(elXAxisTitleText);\n        elXaxis.add(elXaxisTitle);\n      }\n\n      if (w.config.xaxis.axisBorder.show) {\n        var lineCorrection = 0;\n\n        if (w.config.chart.type === 'bar' && w.globals.isXNumeric) {\n          lineCorrection = lineCorrection - 15;\n        }\n\n        var elHorzLine = graphics.drawLine(w.globals.padHorizontal + lineCorrection + w.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, w.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n        elXaxis.add(elHorzLine);\n      }\n\n      return elXaxis;\n    } // this actually becomes the vertical axis (for bar charts)\n\n  }, {\n    key: \"drawXaxisInversed\",\n    value: function drawXaxisInversed(realIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var translateYAxisX = w.config.yaxis[0].opposite ? w.globals.translateYAxisX[realIndex] : 0;\n      var elYaxis = graphics.group({\n        class: 'apexcharts-yaxis apexcharts-xaxis-inversed',\n        rel: realIndex\n      });\n      var elYaxisTexts = graphics.group({\n        class: 'apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g',\n        transform: 'translate(' + translateYAxisX + ', 0)'\n      });\n      elYaxis.add(elYaxisTexts);\n      var colHeight; // initial x Position (keep adding column width in the loop)\n\n      var yPos;\n      var labels = [];\n\n      for (var i = 0; i < this.xaxisLabels.length; i++) {\n        labels.push(this.xaxisLabels[i]);\n      }\n\n      colHeight = w.globals.gridHeight / labels.length;\n      yPos = -(colHeight / 2.2);\n      var lbFormatter = w.globals.yLabelFormatters[0];\n      var ylabels = w.config.yaxis[0].labels;\n\n      if (ylabels.show) {\n        for (var _i2 = 0; _i2 <= labels.length - 1; _i2++) {\n          var label = typeof labels[_i2] === 'undefined' ? '' : labels[_i2];\n          label = lbFormatter(label);\n          var elLabel = graphics.drawText({\n            x: ylabels.offsetX - 15,\n            y: yPos + colHeight + ylabels.offsetY,\n            text: label,\n            textAnchor: this.yaxis.opposite ? 'start' : 'end',\n            foreColor: ylabels.style.color ? ylabels.style.color : ylabels.style.colors[_i2],\n            fontSize: ylabels.style.fontSize,\n            fontFamily: ylabels.style.fontFamily,\n            cssClass: 'apexcharts-yaxis-label ' + ylabels.style.cssClass\n          });\n          elYaxisTexts.add(elLabel);\n          yPos = yPos + colHeight;\n        }\n      }\n\n      if (w.config.yaxis[0].title.text !== undefined) {\n        var elXaxisTitle = graphics.group({\n          class: 'apexcharts-yaxis-title apexcharts-xaxis-title-inversed',\n          transform: 'translate(' + translateYAxisX + ', 0)'\n        });\n        var elXAxisTitleText = graphics.drawText({\n          x: 0,\n          y: w.globals.gridHeight / 2,\n          text: w.config.yaxis[0].title.text,\n          textAnchor: 'middle',\n          foreColor: w.config.yaxis[0].title.style.color,\n          fontSize: w.config.yaxis[0].title.style.fontSize,\n          fontFamily: w.config.yaxis[0].title.style.fontFamily,\n          cssClass: 'apexcharts-yaxis-title-text ' + w.config.yaxis[0].title.style.cssClass\n        });\n        elXaxisTitle.add(elXAxisTitleText);\n        elYaxis.add(elXaxisTitle);\n      }\n\n      if (w.config.xaxis.axisBorder.show) {\n        var elHorzLine = graphics.drawLine(w.globals.padHorizontal + w.config.xaxis.axisBorder.offsetX, this.offY, this.xaxisBorderWidth, this.offY, this.yaxis.axisBorder.color, 0, this.xaxisBorderHeight);\n        elYaxis.add(elHorzLine);\n        this.axesUtils.drawYAxisTicks(0, labels.length, w.config.yaxis[0].axisBorder, w.config.yaxis[0].axisTicks, 0, colHeight, elYaxis);\n      }\n\n      return elYaxis;\n    }\n  }, {\n    key: \"drawXaxisTicks\",\n    value: function drawXaxisTicks(x1, appendToElement) {\n      var w = this.w;\n      var x2 = x1;\n      if (x1 < 0 || x1 > w.globals.gridWidth) return;\n      var y1 = this.offY + w.config.xaxis.axisTicks.offsetY;\n      var y2 = y1 + w.config.xaxis.axisTicks.height;\n\n      if (w.config.xaxis.axisTicks.show) {\n        var graphics = new Graphics(this.ctx);\n        var line = graphics.drawLine(x1 + w.config.xaxis.axisTicks.offsetX, y1 + w.config.xaxis.offsetY, x2 + w.config.xaxis.axisTicks.offsetX, y2 + w.config.xaxis.offsetY, w.config.xaxis.axisTicks.color); // we are not returning anything, but appending directly to the element pased in param\n\n        appendToElement.add(line);\n        line.node.classList.add('apexcharts-xaxis-tick');\n      }\n    }\n  }, {\n    key: \"getXAxisTicksPositions\",\n    value: function getXAxisTicksPositions() {\n      var w = this.w;\n      var xAxisTicksPositions = [];\n      var xCount = this.xaxisLabels.length;\n      var x1 = w.globals.padHorizontal;\n\n      if (w.globals.timelineLabels.length > 0) {\n        for (var i = 0; i < xCount; i++) {\n          x1 = this.xaxisLabels[i].position;\n          xAxisTicksPositions.push(x1);\n        }\n      } else {\n        var xCountForCategoryCharts = xCount;\n\n        for (var _i3 = 0; _i3 < xCountForCategoryCharts; _i3++) {\n          var x1Count = xCountForCategoryCharts;\n\n          if (w.globals.isXNumeric && w.config.chart.type !== 'bar') {\n            x1Count -= 1;\n          }\n\n          x1 = x1 + w.globals.gridWidth / x1Count;\n          xAxisTicksPositions.push(x1);\n        }\n      }\n\n      return xAxisTicksPositions;\n    } // to rotate x-axis labels or to put ... for longer text in xaxis\n\n  }, {\n    key: \"xAxisLabelCorrections\",\n    value: function xAxisLabelCorrections() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var xAxis = w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g');\n      var xAxisTexts = w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-texts-g text');\n      var yAxisTextsInversed = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxis-inversed text');\n      var xAxisTextsInversed = w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-inversed-texts-g text');\n\n      if (w.globals.rotateXLabels || w.config.xaxis.labels.rotateAlways) {\n        for (var xat = 0; xat < xAxisTexts.length; xat++) {\n          var textRotatingCenter = graphics.rotateAroundCenter(xAxisTexts[xat]);\n          textRotatingCenter.y = textRotatingCenter.y - 1; // + tickWidth/4;\n\n          textRotatingCenter.x = textRotatingCenter.x + 1;\n          xAxisTexts[xat].setAttribute('transform', \"rotate(\".concat(w.config.xaxis.labels.rotate, \" \").concat(textRotatingCenter.x, \" \").concat(textRotatingCenter.y, \")\"));\n          xAxisTexts[xat].setAttribute('text-anchor', \"end\");\n          var offsetHeight = 10;\n          xAxis.setAttribute('transform', \"translate(0, \".concat(-offsetHeight, \")\"));\n          var tSpan = xAxisTexts[xat].childNodes;\n\n          if (w.config.xaxis.labels.trim) {\n            graphics.placeTextWithEllipsis(tSpan[0], tSpan[0].textContent, w.config.xaxis.labels.maxHeight - 40);\n          }\n        }\n      } else {\n        var width = w.globals.gridWidth / w.globals.labels.length;\n\n        for (var _xat = 0; _xat < xAxisTexts.length; _xat++) {\n          var _tSpan = xAxisTexts[_xat].childNodes;\n\n          if (w.config.xaxis.labels.trim && w.config.xaxis.type !== 'datetime') {\n            graphics.placeTextWithEllipsis(_tSpan[0], _tSpan[0].textContent, width);\n          }\n        }\n      }\n\n      if (yAxisTextsInversed.length > 0) {\n        // truncate rotated y axis in bar chart (x axis)\n        var firstLabelPosX = yAxisTextsInversed[yAxisTextsInversed.length - 1].getBBox();\n        var lastLabelPosX = yAxisTextsInversed[0].getBBox();\n\n        if (firstLabelPosX.x < -20) {\n          yAxisTextsInversed[yAxisTextsInversed.length - 1].parentNode.removeChild(yAxisTextsInversed[yAxisTextsInversed.length - 1]);\n        }\n\n        if (lastLabelPosX.x + lastLabelPosX.width > w.globals.gridWidth) {\n          yAxisTextsInversed[0].parentNode.removeChild(yAxisTextsInversed[0]);\n        } // truncate rotated x axis in bar chart (y axis)\n\n\n        for (var _xat2 = 0; _xat2 < xAxisTextsInversed.length; _xat2++) {\n          graphics.placeTextWithEllipsis(xAxisTextsInversed[_xat2], xAxisTextsInversed[_xat2].textContent, w.config.yaxis[0].labels.maxWidth - parseInt(w.config.yaxis[0].title.style.fontSize) * 2 - 20);\n        }\n      }\n    } // renderXAxisBands() {\n    //   let w = this.w;\n    //   let plotBand = document.createElementNS(w.globals.SVGNS, 'rect')\n    //   w.globals.dom.elGraphical.add(plotBand)\n    // }\n\n  }]);\n\n  return XAxis;\n}();\n\n/**\n * ApexCharts YAxis Class for drawing Y-Axis.\n *\n * @module YAxis\n **/\n\nvar YAxis =\n/*#__PURE__*/\nfunction () {\n  function YAxis(ctx) {\n    _classCallCheck(this, YAxis);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    var w = this.w;\n    this.xaxisFontSize = w.config.xaxis.labels.style.fontSize;\n    this.axisFontFamily = w.config.xaxis.labels.style.fontFamily;\n    this.xaxisForeColors = w.config.xaxis.labels.style.colors;\n    this.xAxisoffX = 0;\n\n    if (w.config.xaxis.position === 'bottom') {\n      this.xAxisoffX = w.globals.gridHeight;\n    }\n\n    this.drawnLabels = [];\n    this.axesUtils = new AxesUtils(ctx);\n  }\n\n  _createClass(YAxis, [{\n    key: \"drawYaxis\",\n    value: function drawYaxis(realIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var yaxisFontSize = w.config.yaxis[realIndex].labels.style.fontSize;\n      var yaxisFontFamily = w.config.yaxis[realIndex].labels.style.fontFamily;\n      var elYaxis = graphics.group({\n        class: 'apexcharts-yaxis',\n        rel: realIndex,\n        transform: 'translate(' + w.globals.translateYAxisX[realIndex] + ', 0)'\n      });\n\n      if (!w.config.yaxis[realIndex].show) {\n        return elYaxis;\n      }\n\n      var elYaxisTexts = graphics.group({\n        class: 'apexcharts-yaxis-texts-g'\n      });\n      elYaxis.add(elYaxisTexts);\n      var tickAmount = w.globals.yAxisScale[realIndex].result.length - 1; // labelsDivider is simply svg height/number of ticks\n\n      var labelsDivider = w.globals.gridHeight / tickAmount + 0.1; // initial label position = 0;\n\n      var l = w.globals.translateY;\n      var lbFormatter = w.globals.yLabelFormatters[realIndex];\n      var labels = w.globals.yAxisScale[realIndex].result.slice();\n\n      if (w.config.yaxis[realIndex] && w.config.yaxis[realIndex].reversed) {\n        labels.reverse();\n      }\n\n      if (w.config.yaxis[realIndex].labels.show) {\n        for (var i = tickAmount; i >= 0; i--) {\n          var val = labels[i];\n          val = lbFormatter(val, i);\n          var xPad = w.config.yaxis[realIndex].labels.padding;\n\n          if (w.config.yaxis[realIndex].opposite && w.config.yaxis.length !== 0) {\n            xPad = xPad * -1;\n          }\n\n          var label = graphics.drawText({\n            x: xPad,\n            y: l + tickAmount / 10 + w.config.yaxis[realIndex].labels.offsetY + 1,\n            text: val,\n            textAnchor: w.config.yaxis[realIndex].opposite ? 'start' : 'end',\n            fontSize: yaxisFontSize,\n            fontFamily: yaxisFontFamily,\n            foreColor: w.config.yaxis[realIndex].labels.style.color,\n            cssClass: 'apexcharts-yaxis-label ' + w.config.yaxis[realIndex].labels.style.cssClass\n          });\n          elYaxisTexts.add(label);\n          var labelRotatingCenter = graphics.rotateAroundCenter(label.node);\n\n          if (w.config.yaxis[realIndex].labels.rotate !== 0) {\n            label.node.setAttribute('transform', \"rotate(\".concat(w.config.yaxis[realIndex].labels.rotate, \" \").concat(labelRotatingCenter.x, \" \").concat(labelRotatingCenter.y, \")\"));\n          }\n\n          l = l + labelsDivider;\n        }\n      }\n\n      if (w.config.yaxis[realIndex].title.text !== undefined) {\n        var elYaxisTitle = graphics.group({\n          class: 'apexcharts-yaxis-title'\n        });\n        var x = 0;\n\n        if (w.config.yaxis[realIndex].opposite) {\n          x = w.globals.translateYAxisX[realIndex];\n        }\n\n        var elYAxisTitleText = graphics.drawText({\n          x: x,\n          y: w.globals.gridHeight / 2 + w.globals.translateY,\n          text: w.config.yaxis[realIndex].title.text,\n          textAnchor: 'end',\n          foreColor: w.config.yaxis[realIndex].title.style.color,\n          fontSize: w.config.yaxis[realIndex].title.style.fontSize,\n          fontFamily: w.config.yaxis[realIndex].title.style.fontFamily,\n          cssClass: 'apexcharts-yaxis-title-text ' + w.config.yaxis[realIndex].title.style.cssClass\n        });\n        elYaxisTitle.add(elYAxisTitleText);\n        elYaxis.add(elYaxisTitle);\n      }\n\n      var axisBorder = w.config.yaxis[realIndex].axisBorder;\n\n      if (axisBorder.show) {\n        var _x = 31 + axisBorder.offsetX;\n\n        if (w.config.yaxis[realIndex].opposite) {\n          _x = -31 - axisBorder.offsetX;\n        }\n\n        var elVerticalLine = graphics.drawLine(_x, w.globals.translateY + axisBorder.offsetY - 2, _x, w.globals.gridHeight + w.globals.translateY + axisBorder.offsetY + 2, axisBorder.color);\n        elYaxis.add(elVerticalLine);\n        this.axesUtils.drawYAxisTicks(_x, tickAmount, axisBorder, w.config.yaxis[realIndex].axisTicks, realIndex, labelsDivider, elYaxis);\n      }\n\n      return elYaxis;\n    } // This actually becomes horizonal axis (for bar charts)\n\n  }, {\n    key: \"drawYaxisInversed\",\n    value: function drawYaxisInversed(realIndex) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var elXaxis = graphics.group({\n        class: 'apexcharts-xaxis apexcharts-yaxis-inversed'\n      });\n      var elXaxisTexts = graphics.group({\n        class: 'apexcharts-xaxis-texts-g',\n        transform: \"translate(\".concat(w.globals.translateXAxisX, \", \").concat(w.globals.translateXAxisY, \")\")\n      });\n      elXaxis.add(elXaxisTexts);\n      var tickAmount = w.globals.yAxisScale[realIndex].result.length - 1; // labelsDivider is simply svg width/number of ticks\n\n      var labelsDivider = w.globals.gridWidth / tickAmount + 0.1; // initial label position;\n\n      var l = labelsDivider + w.config.xaxis.labels.offsetX;\n      var lbFormatter = w.globals.xLabelFormatter;\n      var labels = w.globals.yAxisScale[realIndex].result.slice();\n      var timelineLabels = w.globals.invertedTimelineLabels;\n\n      if (timelineLabels.length > 0) {\n        this.xaxisLabels = timelineLabels.slice();\n        labels = timelineLabels.slice();\n        tickAmount = labels.length;\n      }\n\n      if (w.config.yaxis[realIndex] && w.config.yaxis[realIndex].reversed) {\n        labels.reverse();\n      }\n\n      var tl = timelineLabels.length;\n\n      if (w.config.xaxis.labels.show) {\n        for (var i = tl ? 0 : tickAmount; tl ? i < tl - 1 : i >= 0; tl ? i++ : i--) {\n          var val = labels[i];\n          val = lbFormatter(val, i);\n          var x = w.globals.gridWidth + w.globals.padHorizontal - (l - labelsDivider + w.config.xaxis.labels.offsetX);\n\n          if (timelineLabels.length) {\n            var label = this.axesUtils.getLabel(labels, timelineLabels, x, i, this.drawnLabels);\n            x = label.x;\n            val = label.text;\n            this.drawnLabels.push(label.text);\n          }\n\n          var elTick = graphics.drawText({\n            x: x,\n            y: this.xAxisoffX + w.config.xaxis.labels.offsetY + 30,\n            text: '',\n            textAnchor: 'middle',\n            foreColor: Array.isArray(this.xaxisForeColors) ? this.xaxisForeColors[realIndex] : this.xaxisForeColors,\n            fontSize: this.xaxisFontSize,\n            fontFamily: this.xaxisFontFamily,\n            cssClass: 'apexcharts-xaxis-label ' + w.config.xaxis.labels.style.cssClass\n          });\n          elXaxisTexts.add(elTick);\n          elTick.tspan(val);\n          var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');\n          elTooltipTitle.textContent = val;\n          elTick.node.appendChild(elTooltipTitle);\n          l = l + labelsDivider;\n        }\n      }\n\n      if (w.config.xaxis.title.text !== undefined) {\n        var elYaxisTitle = graphics.group({\n          class: 'apexcharts-xaxis-title apexcharts-yaxis-title-inversed'\n        });\n        var elYAxisTitleText = graphics.drawText({\n          x: w.globals.gridWidth / 2,\n          y: this.xAxisoffX + parseInt(this.xaxisFontSize) + parseInt(w.config.xaxis.title.style.fontSize) + 20,\n          text: w.config.xaxis.title.text,\n          textAnchor: 'middle',\n          fontSize: w.config.xaxis.title.style.fontSize,\n          fontFamily: w.config.xaxis.title.style.fontFamily,\n          cssClass: 'apexcharts-xaxis-title-text ' + w.config.xaxis.title.style.cssClass\n        });\n        elYaxisTitle.add(elYAxisTitleText);\n        elXaxis.add(elYaxisTitle);\n      }\n\n      var axisBorder = w.config.yaxis[realIndex].axisBorder;\n\n      if (axisBorder.show) {\n        var elVerticalLine = graphics.drawLine(w.globals.padHorizontal + axisBorder.offsetX, 1 + axisBorder.offsetY, w.globals.padHorizontal + axisBorder.offsetX, w.globals.gridHeight + axisBorder.offsetY, axisBorder.color);\n        elXaxis.add(elVerticalLine);\n      }\n\n      return elXaxis;\n    }\n  }, {\n    key: \"yAxisTitleRotate\",\n    value: function yAxisTitleRotate(realIndex, yAxisOpposite) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var yAxisLabelsCoord = {\n        width: 0,\n        height: 0\n      };\n      var yAxisTitleCoord = {\n        width: 0,\n        height: 0\n      };\n      var elYAxisLabelsWrap = w.globals.dom.baseEl.querySelector(\" .apexcharts-yaxis[rel='\".concat(realIndex, \"'] .apexcharts-yaxis-texts-g\"));\n\n      if (elYAxisLabelsWrap !== null) {\n        yAxisLabelsCoord = elYAxisLabelsWrap.getBoundingClientRect();\n      }\n\n      var yAxisTitle = w.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(realIndex, \"'] .apexcharts-yaxis-title text\"));\n\n      if (yAxisTitle !== null) {\n        yAxisTitleCoord = yAxisTitle.getBoundingClientRect();\n      }\n\n      if (yAxisTitle !== null) {\n        var x = this.xPaddingForYAxisTitle(realIndex, yAxisLabelsCoord, yAxisTitleCoord, yAxisOpposite);\n        yAxisTitle.setAttribute('x', x.xPos - (yAxisOpposite ? 10 : 0));\n      }\n\n      if (yAxisTitle !== null) {\n        var titleRotatingCenter = graphics.rotateAroundCenter(yAxisTitle);\n\n        if (!yAxisOpposite) {\n          yAxisTitle.setAttribute('transform', \"rotate(-\".concat(w.config.yaxis[realIndex].title.rotate, \" \").concat(titleRotatingCenter.x, \" \").concat(titleRotatingCenter.y, \")\"));\n        } else {\n          yAxisTitle.setAttribute('transform', \"rotate(\".concat(w.config.yaxis[realIndex].title.rotate, \" \").concat(titleRotatingCenter.x, \" \").concat(titleRotatingCenter.y, \")\"));\n        }\n      }\n    }\n  }, {\n    key: \"xPaddingForYAxisTitle\",\n    value: function xPaddingForYAxisTitle(realIndex, yAxisLabelsCoord, yAxisTitleCoord, yAxisOpposite) {\n      var w = this.w;\n      var oppositeAxisCount = 0;\n      var x = 0;\n      var padd = 10;\n\n      if (w.config.yaxis[realIndex].title.text === undefined || realIndex < 0) {\n        return {\n          xPos: x,\n          padd: 0\n        };\n      }\n\n      if (yAxisOpposite) {\n        x = yAxisLabelsCoord.width + w.config.yaxis[realIndex].title.offsetX + yAxisTitleCoord.width / 2 + padd / 2;\n        oppositeAxisCount += 1;\n\n        if (oppositeAxisCount === 0) {\n          x = x - padd / 2;\n        }\n      } else {\n        x = yAxisLabelsCoord.width * -1 + w.config.yaxis[realIndex].title.offsetX + padd / 2 + yAxisTitleCoord.width / 2;\n\n        if (w.globals.isBarHorizontal) {\n          padd = 25;\n          x = yAxisLabelsCoord.width * -1 - w.config.yaxis[realIndex].title.offsetX - padd;\n        }\n      }\n\n      return {\n        xPos: x,\n        padd: padd\n      };\n    } // sets the x position of the y-axis by counting the labels width, title width and any offset\n\n  }, {\n    key: \"setYAxisXPosition\",\n    value: function setYAxisXPosition(yaxisLabelCoords, yTitleCoords) {\n      var w = this.w;\n      var xLeft = 0;\n      var xRight = 0;\n      var leftOffsetX = 21;\n      var rightOffsetX = 1;\n\n      if (w.config.yaxis.length > 1) {\n        this.multipleYs = true;\n      }\n\n      w.config.yaxis.map(function (yaxe, index) {\n        var shouldNotDrawAxis = w.globals.ignoreYAxisIndexes.indexOf(index) > -1 || !yaxe.show || yaxe.floating || yaxisLabelCoords[index].width === 0;\n        var axisWidth = yaxisLabelCoords[index].width + yTitleCoords[index].width;\n\n        if (!yaxe.opposite) {\n          xLeft = w.globals.translateX - leftOffsetX;\n\n          if (!shouldNotDrawAxis) {\n            leftOffsetX = leftOffsetX + axisWidth + 20;\n          }\n\n          w.globals.translateYAxisX[index] = xLeft + yaxe.labels.offsetX;\n        } else {\n          if (w.globals.isBarHorizontal) {\n            xRight = w.globals.gridWidth + w.globals.translateX - 1;\n            w.globals.translateYAxisX[index] = xRight - yaxe.labels.offsetX;\n          } else {\n            xRight = w.globals.gridWidth + w.globals.translateX + rightOffsetX;\n\n            if (!shouldNotDrawAxis) {\n              rightOffsetX = rightOffsetX + axisWidth + 20;\n            }\n\n            w.globals.translateYAxisX[index] = xRight - yaxe.labels.offsetX + 20;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setYAxisTextAlignments\",\n    value: function setYAxisTextAlignments() {\n      var w = this.w;\n      var yaxis = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis\");\n      yaxis = Utils.listToArray(yaxis);\n      yaxis.forEach(function (y, index) {\n        var yaxe = w.config.yaxis[index]; // proceed only if user has specified alignment\n\n        if (yaxe.labels.align !== undefined) {\n          var yAxisInner = w.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(index, \"'] .apexcharts-yaxis-texts-g\"));\n          var yAxisTexts = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(index, \"'] .apexcharts-yaxis-label\"));\n          yAxisTexts = Utils.listToArray(yAxisTexts);\n          var rect = yAxisInner.getBoundingClientRect();\n\n          if (yaxe.labels.align === 'left') {\n            yAxisTexts.forEach(function (label, lI) {\n              label.setAttribute('text-anchor', 'start');\n            });\n\n            if (!yaxe.opposite) {\n              yAxisInner.setAttribute('transform', \"translate(-\".concat(rect.width, \", 0)\"));\n            }\n          } else if (yaxe.labels.align === 'center') {\n            yAxisTexts.forEach(function (label, lI) {\n              label.setAttribute('text-anchor', 'middle');\n            });\n            yAxisInner.setAttribute('transform', \"translate(\".concat(rect.width / 2 * (!yaxe.opposite ? -1 : 1), \", 0)\"));\n          } else if (yaxe.labels.align === 'right') {\n            yAxisTexts.forEach(function (label, lI) {\n              label.setAttribute('text-anchor', 'end');\n            });\n\n            if (yaxe.opposite) {\n              yAxisInner.setAttribute('transform', \"translate(\".concat(rect.width, \", 0)\"));\n            }\n          }\n        }\n      });\n    }\n  }]);\n\n  return YAxis;\n}();\n\nvar Range =\n/*#__PURE__*/\nfunction () {\n  function Range(ctx) {\n    _classCallCheck(this, Range);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  } // http://stackoverflow.com/questions/326679/choosing-an-attractive-linear-scale-for-a-graphs-y-axiss\n  // This routine creates the Y axis values for a graph.\n\n\n  _createClass(Range, [{\n    key: \"niceScale\",\n    value: function niceScale(yMin, yMax) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var ticks = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n      var w = this.w;\n\n      if (yMin === Number.MIN_VALUE && yMax === 0 || !Utils.isNumber(yMin) && !Utils.isNumber(yMax) || yMin === Number.MIN_VALUE && yMax === -Number.MAX_VALUE) {\n        // when all values are 0\n        yMin = 0;\n        yMax = ticks;\n        var linearScale = this.linearScale(yMin, yMax, ticks);\n        return linearScale;\n      }\n\n      if (yMin > yMax) {\n        // if somehow due to some wrong config, user sent max less than min,\n        // adjust the min/max again\n        console.warn('yaxis.min cannot be greater than yaxis.max');\n        yMax = yMin + 0.1;\n      } else if (yMin === yMax) {\n        // If yMin and yMax are identical, then\n        // adjust the yMin and yMax values to actually\n        // make a graph. Also avoids division by zero errors.\n        yMin = yMin === 0 ? 0 : yMin - 0.5; // some small value\n\n        yMax = yMax === 0 ? 2 : yMax + 0.5; // some small value\n      } // Calculate Min amd Max graphical labels and graph\n      // increments.  The number of ticks defaults to\n      // 10 which is the SUGGESTED value.  Any tick value\n      // entered is used as a suggested value which is\n      // adjusted to be a 'pretty' value.\n      //\n      // Output will be an array of the Y axis values that\n      // encompass the Y values.\n\n\n      var result = []; // Determine Range\n\n      var range = yMax - yMin;\n\n      if (range < 1 && w.config.yaxis[index].forceNiceScale && (w.config.chart.type === 'candlestick' || w.config.series[index].type === 'candlestick' || w.globals.isRangeData)) {\n        /* fix https://github.com/apexcharts/apexcharts.js/issues/430 */\n        yMax = yMax * 1.01;\n      }\n\n      var tiks = ticks + 1; // Adjust ticks if needed\n\n      if (tiks < 2) {\n        tiks = 2;\n      } else if (tiks > 2) {\n        tiks -= 2;\n      } // Get raw step value\n\n\n      var tempStep = range / tiks; // Calculate pretty step value\n\n      var mag = Math.floor(Utils.log10(tempStep));\n      var magPow = Math.pow(10, mag);\n      var magMsd = parseInt(tempStep / magPow);\n      var stepSize = magMsd * magPow; // build Y label array.\n      // Lower and upper bounds calculations\n\n      var lb = stepSize * Math.floor(yMin / stepSize);\n      var ub = stepSize * Math.ceil(yMax / stepSize); // Build array\n\n      var val = lb;\n\n      while (1) {\n        result.push(val);\n        val += stepSize;\n\n        if (val > ub) {\n          break;\n        }\n      }\n\n      if (this.w.config.yaxis[index].max === undefined && this.w.config.yaxis[index].min === undefined || this.w.config.yaxis[index].forceNiceScale) {\n        return {\n          result: result,\n          niceMin: result[0],\n          niceMax: result[result.length - 1]\n        };\n      } else {\n        result = [];\n        var v = yMin;\n        result.push(v);\n        var valuesDivider = Math.abs(yMax - yMin) / ticks;\n\n        for (var i = 0; i <= ticks - 1; i++) {\n          v = v + valuesDivider;\n          result.push(v);\n        }\n\n        return {\n          result: result,\n          niceMin: result[0],\n          niceMax: result[result.length - 1]\n        };\n      }\n    }\n  }, {\n    key: \"linearScale\",\n    value: function linearScale(yMin, yMax) {\n      var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n      var range = Math.abs(yMax - yMin);\n      var step = range / ticks;\n\n      if (ticks === Number.MAX_VALUE) {\n        ticks = 10;\n        step = 1;\n      }\n\n      var result = [];\n      var v = yMin;\n\n      while (ticks >= 0) {\n        result.push(v);\n        v = v + step;\n        ticks -= 1;\n      }\n\n      return {\n        result: result,\n        niceMin: result[0],\n        niceMax: result[result.length - 1]\n      };\n    }\n  }, {\n    key: \"logarithmicScale\",\n    value: function logarithmicScale(index, yMin, yMax, ticks) {\n      if (yMin < 0 || yMin === Number.MIN_VALUE) yMin = 0.01;\n      var base = 10;\n      var min = Math.log(yMin) / Math.log(base);\n      var max = Math.log(yMax) / Math.log(base);\n      var range = Math.abs(yMax - yMin);\n      var step = range / ticks;\n      var result = [];\n      var v = yMin;\n\n      while (ticks >= 0) {\n        result.push(v);\n        v = v + step;\n        ticks -= 1;\n      }\n\n      var logs = result.map(function (niceNumber, i) {\n        if (niceNumber <= 0) {\n          niceNumber = 0.01;\n        } // calculate adjustment factor\n\n\n        var scale = (max - min) / (yMax - yMin);\n        var logVal = Math.pow(base, min + scale * (niceNumber - min));\n        return Math.round(logVal / Utils.roundToBase(logVal, base)) * Utils.roundToBase(logVal, base);\n      }); // Math.floor may have rounded the value to 0, revert back to 1\n\n      if (logs[0] === 0) logs[0] = 1;\n      return {\n        result: logs,\n        niceMin: logs[0],\n        niceMax: logs[logs.length - 1]\n      };\n    }\n  }, {\n    key: \"setYScaleForIndex\",\n    value: function setYScaleForIndex(index, minY, maxY) {\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      var y = gl.isBarHorizontal ? cnf.xaxis : cnf.yaxis[index];\n\n      if (typeof gl.yAxisScale[index] === 'undefined') {\n        gl.yAxisScale[index] = [];\n      }\n\n      if (y.logarithmic) {\n        gl.allSeriesCollapsed = false;\n        gl.yAxisScale[index] = this.logarithmicScale(index, minY, maxY, y.tickAmount ? y.tickAmount : Math.floor(Math.log10(maxY)));\n      } else {\n        if (maxY === -Number.MAX_VALUE || !Utils.isNumber(maxY)) {\n          // no data in the chart. Either all series collapsed or user passed a blank array\n          gl.yAxisScale[index] = this.linearScale(0, 5, 5);\n        } else {\n          // there is some data. Turn off the allSeriesCollapsed flag\n          gl.allSeriesCollapsed = false;\n\n          if ((y.min !== undefined || y.max !== undefined) && !y.forceNiceScale) {\n            // fix https://github.com/apexcharts/apexcharts.js/issues/492\n            gl.yAxisScale[index] = this.linearScale(minY, maxY, y.tickAmount);\n          } else {\n            gl.yAxisScale[index] = this.niceScale(minY, maxY, index, // fix https://github.com/apexcharts/apexcharts.js/issues/397\n            y.tickAmount ? y.tickAmount : maxY < 5 && maxY > 1 ? maxY + 1 : 5);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"setMultipleYScales\",\n    value: function setMultipleYScales() {\n      var _this = this;\n\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      var minYArr = gl.minYArr.concat([]);\n      var maxYArr = gl.maxYArr.concat([]);\n      var scalesIndices = []; // here, we loop through the yaxis array and find the item which has \"seriesName\" property\n\n      cnf.yaxis.forEach(function (yaxe, i) {\n        var index = i;\n        cnf.series.forEach(function (s, si) {\n          // if seriesName matches and that series is not collapsed, we use that scale\n          if (s.name === yaxe.seriesName && gl.collapsedSeriesIndices.indexOf(si) === -1) {\n            index = si;\n\n            if (i !== si) {\n              scalesIndices.push({\n                index: si,\n                similarIndex: i,\n                alreadyExists: true\n              });\n            } else {\n              scalesIndices.push({\n                index: si\n              });\n            }\n          }\n        });\n        var minY = minYArr[index];\n        var maxY = maxYArr[index];\n\n        _this.setYScaleForIndex(i, minY, maxY);\n      });\n      this.sameScaleInMultipleAxes(minYArr, maxYArr, scalesIndices);\n    }\n  }, {\n    key: \"sameScaleInMultipleAxes\",\n    value: function sameScaleInMultipleAxes(minYArr, maxYArr, scalesIndices) {\n      var _this2 = this;\n\n      var cnf = this.w.config;\n      var gl = this.w.globals; // we got the scalesIndices array in the above code, but we need to filter out the items which doesn't have same scales\n\n      var similarIndices = [];\n      scalesIndices.forEach(function (scale) {\n        if (scale.alreadyExists) {\n          if (typeof similarIndices[scale.index] === 'undefined') {\n            similarIndices[scale.index] = [];\n          }\n\n          similarIndices[scale.index].push(scale.index);\n          similarIndices[scale.index].push(scale.similarIndex);\n        }\n      });\n\n      function intersect(a, b) {\n        return a.filter(function (value) {\n          return b.indexOf(value) !== -1;\n        });\n      }\n\n      similarIndices.forEach(function (si, i) {\n        similarIndices.forEach(function (sj, j) {\n          if (i !== j) {\n            if (intersect(si, sj).length > 0) {\n              similarIndices[i] = similarIndices[i].concat(similarIndices[j]);\n            }\n          }\n        });\n      }); // then, we remove duplicates from the similarScale array\n\n      var uniqueSimilarIndices = similarIndices.map(function (item) {\n        return item.filter(function (i, pos) {\n          return item.indexOf(i) === pos;\n        });\n      }); // sort further to remove whole duplicate arrays later\n\n      var sortedIndices = uniqueSimilarIndices.map(function (s) {\n        return s.sort();\n      }); // remove undefined items\n\n      similarIndices = similarIndices.filter(function (s) {\n        return !!s;\n      });\n      var indices = sortedIndices.slice();\n      var stringIndices = indices.map(function (ind) {\n        return JSON.stringify(ind);\n      });\n      indices = indices.filter(function (ind, p) {\n        return stringIndices.indexOf(JSON.stringify(ind)) === p;\n      });\n      var sameScaleMinYArr = [];\n      var sameScaleMaxYArr = [];\n      minYArr.forEach(function (minYValue, yi) {\n        indices.forEach(function (scale, i) {\n          // we compare only the yIndex which exists in the indices array\n          if (scale.indexOf(yi) > -1) {\n            if (typeof sameScaleMinYArr[i] === 'undefined') {\n              sameScaleMinYArr[i] = [];\n              sameScaleMaxYArr[i] = [];\n            }\n\n            sameScaleMinYArr[i].push({\n              key: yi,\n              value: minYValue\n            });\n            sameScaleMaxYArr[i].push({\n              key: yi,\n              value: maxYArr[yi]\n            });\n          }\n        });\n      });\n      var sameScaleMin = Array.apply(null, Array(indices.length)).map(Number.prototype.valueOf, Number.MIN_VALUE);\n      var sameScaleMax = Array.apply(null, Array(indices.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);\n      sameScaleMinYArr.forEach(function (s, i) {\n        s.forEach(function (sc, j) {\n          sameScaleMin[i] = Math.min(sc.value, sameScaleMin[i]);\n        });\n      });\n      sameScaleMaxYArr.forEach(function (s, i) {\n        s.forEach(function (sc, j) {\n          sameScaleMax[i] = Math.max(sc.value, sameScaleMax[i]);\n        });\n      });\n      minYArr.forEach(function (min, i) {\n        sameScaleMaxYArr.forEach(function (s, si) {\n          var minY = sameScaleMin[si];\n          var maxY = sameScaleMax[si];\n          s.forEach(function (ind, k) {\n            if (s[k].key === i) {\n              if (cnf.yaxis[i].min !== undefined) {\n                if (typeof cnf.yaxis[i].min === 'function') {\n                  minY = cnf.yaxis[i].min(gl.minY);\n                } else {\n                  minY = cnf.yaxis[i].min;\n                }\n              }\n\n              if (cnf.yaxis[i].max !== undefined) {\n                if (typeof cnf.yaxis[i].max === 'function') {\n                  maxY = cnf.yaxis[i].max(gl.maxY);\n                } else {\n                  maxY = cnf.yaxis[i].max;\n                }\n              }\n\n              _this2.setYScaleForIndex(i, minY, maxY);\n            }\n          });\n        });\n      });\n    }\n  }, {\n    key: \"autoScaleY\",\n    value: function autoScaleY(ctx, e) {\n      if (!ctx) {\n        ctx = this;\n      }\n\n      var ret = [];\n      ctx.w.config.series.forEach(function (serie) {\n        var min, max;\n        var first = serie.data.find(function (x) {\n          return x[0] >= e.xaxis.min;\n        });\n        var firstValue = first[1];\n        max = min = firstValue;\n        serie.data.forEach(function (data) {\n          if (data[0] <= e.xaxis.max && data[0] >= e.xaxis.min) {\n            if (data[1] > max && data[1] !== null) max = data[1];\n            if (data[1] < min && data[1] !== null) min = data[1];\n          }\n        });\n        min *= 0.95;\n        max *= 1.05;\n        ret.push({\n          min: min,\n          max: max\n        });\n      });\n      return ret;\n    }\n  }]);\n\n  return Range;\n}();\n\n/**\n * Range is used to generates values between min and max.\n *\n * @module Range\n **/\n\nvar Range$1 =\n/*#__PURE__*/\nfunction () {\n  function Range$$1(ctx) {\n    _classCallCheck(this, Range$$1);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.scales = new Range(ctx);\n  }\n\n  _createClass(Range$$1, [{\n    key: \"init\",\n    value: function init() {\n      this.setYRange();\n      this.setXRange();\n      this.setZRange();\n    }\n  }, {\n    key: \"getMinYMaxY\",\n    value: function getMinYMaxY(startingIndex) {\n      var lowestY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;\n      var highestY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Number.MAX_VALUE;\n      var len = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var gl = this.w.globals;\n      var maxY = -Number.MAX_VALUE;\n      var minY = Number.MIN_VALUE;\n\n      if (len === null) {\n        len = startingIndex + 1;\n      }\n\n      var series = gl.series;\n      var seriesMin = series;\n      var seriesMax = series;\n\n      if (this.w.config.chart.type === 'candlestick') {\n        seriesMin = gl.seriesCandleL;\n        seriesMax = gl.seriesCandleH;\n      } else if (gl.isRangeData) {\n        seriesMin = gl.seriesRangeStart;\n        seriesMax = gl.seriesRangeEnd;\n      }\n\n      for (var i = startingIndex; i < len; i++) {\n        gl.dataPoints = Math.max(gl.dataPoints, series[i].length);\n\n        for (var j = 0; j < gl.series[i].length; j++) {\n          if (series[i][j] !== null && Utils.isNumber(series[i][j])) {\n            maxY = Math.max(maxY, seriesMax[i][j]);\n            lowestY = Math.min(lowestY, seriesMin[i][j]);\n            highestY = Math.max(highestY, seriesMin[i][j]);\n\n            if (this.w.config.chart.type === 'candlestick') {\n              maxY = Math.max(maxY, gl.seriesCandleO[i][j]);\n              maxY = Math.max(maxY, gl.seriesCandleH[i][j]);\n              maxY = Math.max(maxY, gl.seriesCandleL[i][j]);\n              maxY = Math.max(maxY, gl.seriesCandleC[i][j]);\n              highestY = maxY;\n            }\n\n            if (Utils.isFloat(series[i][j])) {\n              gl.yValueDecimal = Math.max(gl.yValueDecimal, series[i][j].toString().split('.')[1].length);\n            }\n\n            if (minY > seriesMin[i][j] && seriesMin[i][j] < 0) {\n              minY = seriesMin[i][j];\n            }\n          } else {\n            gl.hasNullValues = true;\n          }\n        }\n      }\n\n      return {\n        minY: minY,\n        maxY: maxY,\n        lowestY: lowestY,\n        highestY: highestY\n      };\n    }\n  }, {\n    key: \"setYRange\",\n    value: function setYRange() {\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      gl.maxY = -Number.MAX_VALUE;\n      gl.minY = Number.MIN_VALUE;\n      var lowestYInAllSeries = Number.MAX_VALUE;\n\n      if (gl.isMultipleYAxis) {\n        // we need to get minY and maxY for multiple y axis\n        for (var i = 0; i < gl.series.length; i++) {\n          var minYMaxYArr = this.getMinYMaxY(i, lowestYInAllSeries, null, i + 1);\n          gl.minYArr.push(minYMaxYArr.minY);\n          gl.maxYArr.push(minYMaxYArr.maxY);\n          lowestYInAllSeries = minYMaxYArr.lowestY;\n        }\n      } // and then, get the minY and maxY from all series\n\n\n      var minYMaxY = this.getMinYMaxY(0, lowestYInAllSeries, null, gl.series.length);\n      gl.minY = minYMaxY.minY;\n      gl.maxY = minYMaxY.maxY;\n      lowestYInAllSeries = minYMaxY.lowestY;\n\n      if (cnf.chart.stacked) {\n        // for stacked charts, we calculate each series's parallel values. i.e, series[0][j] + series[1][j] .... [series[i.length][j]] and get the max out of it\n        var stackedPoss = [];\n        var stackedNegs = [];\n\n        for (var j = 0; j < gl.series[gl.maxValsInArrayIndex].length; j++) {\n          var poss = 0;\n          var negs = 0;\n\n          for (var _i = 0; _i < gl.series.length; _i++) {\n            if (gl.series[_i][j] !== null && Utils.isNumber(gl.series[_i][j])) {\n              if (gl.series[_i][j] > 0) {\n                // 0.0001 fixes #185 when values are very small\n                poss = poss + parseFloat(gl.series[_i][j]) + 0.0001;\n              } else {\n                negs = negs + parseFloat(gl.series[_i][j]);\n              }\n            }\n\n            if (_i === gl.series.length - 1) {\n              // push all the totals to the array for future use\n              stackedPoss.push(poss);\n              stackedNegs.push(negs);\n            }\n          }\n        } // get the max/min out of the added parallel values\n\n\n        for (var z = 0; z < stackedPoss.length; z++) {\n          gl.maxY = Math.max(gl.maxY, stackedPoss[z]);\n          gl.minY = Math.min(gl.minY, stackedNegs[z]);\n        }\n      } // if the numbers are too big, reduce the range\n      // for eg, if number is between 100000-110000, putting 0 as the lowest value is not so good idea. So change the gl.minY for line/area/candlesticks\n\n\n      if (cnf.chart.type === 'line' || cnf.chart.type === 'area' || cnf.chart.type === 'candlestick') {\n        if (gl.minY === Number.MIN_VALUE && lowestYInAllSeries !== -Number.MAX_VALUE && lowestYInAllSeries !== gl.maxY // single value possibility\n        ) {\n            var diff = gl.maxY - lowestYInAllSeries;\n\n            if (lowestYInAllSeries >= 0 && lowestYInAllSeries <= 10) {\n              // if minY is already 0/low value, we don't want to go negatives here - so this check is essential.\n              diff = 0;\n            }\n\n            gl.minY = lowestYInAllSeries - diff * 5 / 100;\n            /* fix https://github.com/apexcharts/apexcharts.js/issues/426 */\n\n            gl.maxY = gl.maxY + diff * 5 / 100;\n          }\n      }\n\n      cnf.yaxis.map(function (yaxe, index) {\n        // override all min/max values by user defined values (y axis)\n        if (yaxe.max !== undefined) {\n          if (typeof yaxe.max === 'number') {\n            gl.maxYArr[index] = yaxe.max;\n          } else if (typeof yaxe.max === 'function') {\n            gl.maxYArr[index] = yaxe.max(gl.maxY);\n          } // gl.maxY is for single y-axis chart, it will be ignored in multi-yaxis\n\n\n          gl.maxY = gl.maxYArr[index];\n        }\n\n        if (yaxe.min !== undefined) {\n          if (typeof yaxe.min === 'number') {\n            gl.minYArr[index] = yaxe.min;\n          } else if (typeof yaxe.min === 'function') {\n            gl.minYArr[index] = yaxe.min(gl.minY);\n          } // gl.minY is for single y-axis chart, it will be ignored in multi-yaxis\n\n\n          gl.minY = gl.minYArr[index];\n        }\n      }); // for horizontal bar charts, we need to check xaxis min/max as user may have specified there\n\n      if (gl.isBarHorizontal) {\n        if (cnf.xaxis.min !== undefined && typeof cnf.xaxis.min === 'number') {\n          gl.minY = cnf.xaxis.min;\n        }\n\n        if (cnf.xaxis.max !== undefined && typeof cnf.xaxis.max === 'number') {\n          gl.maxY = cnf.xaxis.max;\n        }\n      } // for multi y-axis we need different scales for each\n\n\n      if (gl.isMultipleYAxis) {\n        this.scales.setMultipleYScales();\n        gl.minY = lowestYInAllSeries;\n        gl.yAxisScale.forEach(function (scale, i) {\n          gl.minYArr[i] = scale.niceMin;\n          gl.maxYArr[i] = scale.niceMax;\n        });\n      } else {\n        this.scales.setYScaleForIndex(0, gl.minY, gl.maxY);\n        gl.minY = gl.yAxisScale[0].niceMin;\n        gl.maxY = gl.yAxisScale[0].niceMax;\n        gl.minYArr[0] = gl.yAxisScale[0].niceMin;\n        gl.maxYArr[0] = gl.yAxisScale[0].niceMax;\n      }\n\n      return {\n        minY: gl.minY,\n        maxY: gl.maxY,\n        minYArr: gl.minYArr,\n        maxYArr: gl.maxYArr\n      };\n    }\n  }, {\n    key: \"setXRange\",\n    value: function setXRange() {\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      var isXNumeric = cnf.xaxis.type === 'numeric' || cnf.xaxis.type === 'datetime' || cnf.xaxis.type === 'category' && !gl.noLabelsProvided || gl.noLabelsProvided; // minX maxX starts here\n\n      if (gl.isXNumeric) {\n        for (var i = 0; i < gl.series.length; i++) {\n          if (gl.labels[i]) {\n            for (var j = 0; j < gl.labels[i].length; j++) {\n              if (gl.labels[i][j] !== null && Utils.isNumber(gl.labels[i][j])) {\n                gl.maxX = Math.max(gl.maxX, gl.labels[i][j]);\n                gl.initialmaxX = Math.max(gl.maxX, gl.labels[i][j]);\n                gl.minX = Math.min(gl.minX, gl.labels[i][j]);\n                gl.initialminX = Math.min(gl.minX, gl.labels[i][j]);\n              }\n            }\n          }\n        }\n      }\n\n      if (gl.noLabelsProvided) {\n        if (cnf.xaxis.categories.length === 0) {\n          gl.maxX = gl.labels[gl.labels.length - 1];\n          gl.initialmaxX = gl.labels[gl.labels.length - 1];\n          gl.minX = 1;\n          gl.initialminX = 1;\n        }\n      } // for numeric xaxis, we need to adjust some padding left and right for bar charts\n\n\n      if (gl.comboChartsHasBars || cnf.chart.type === 'candlestick' || cnf.chart.type === 'bar' && cnf.xaxis.type !== 'category') {\n        if (cnf.xaxis.type !== 'category') {\n          var minX = gl.minX - gl.svgWidth / gl.dataPoints * (Math.abs(gl.maxX - gl.minX) / gl.svgWidth) / 2;\n          gl.minX = minX;\n          gl.initialminX = minX;\n          var maxX = gl.maxX + gl.svgWidth / gl.dataPoints * (Math.abs(gl.maxX - gl.minX) / gl.svgWidth) / 2;\n          gl.maxX = maxX;\n          gl.initialmaxX = maxX;\n        }\n      }\n\n      if ((gl.isXNumeric || gl.noLabelsProvided) && (!cnf.xaxis.convertedCatToNumeric || gl.dataFormatXNumeric)) {\n        var ticks;\n\n        if (cnf.xaxis.tickAmount === undefined) {\n          ticks = Math.round(gl.svgWidth / 150); // no labels provided and total number of dataPoints is less than 20\n\n          if (cnf.xaxis.type === 'numeric' && gl.dataPoints < 20) {\n            ticks = gl.dataPoints - 1;\n          } // this check is for when ticks exceeds total datapoints and that would result in duplicate labels\n\n\n          if (ticks > gl.dataPoints && gl.dataPoints !== 0) {\n            ticks = gl.dataPoints - 1;\n          }\n        } else if (cnf.xaxis.tickAmount === 'dataPoints') {\n          ticks = gl.series[gl.maxValsInArrayIndex].length - 1;\n        } else {\n          ticks = cnf.xaxis.tickAmount;\n        } // override all min/max values by user defined values (x axis)\n\n\n        if (cnf.xaxis.max !== undefined && typeof cnf.xaxis.max === 'number') {\n          gl.maxX = cnf.xaxis.max;\n        }\n\n        if (cnf.xaxis.min !== undefined && typeof cnf.xaxis.min === 'number') {\n          gl.minX = cnf.xaxis.min;\n        } // if range is provided, adjust the new minX\n\n\n        if (cnf.xaxis.range !== undefined) {\n          gl.minX = gl.maxX - cnf.xaxis.range;\n        }\n\n        if (gl.minX !== Number.MAX_VALUE && gl.maxX !== -Number.MAX_VALUE) {\n          gl.xAxisScale = this.scales.linearScale(gl.minX, gl.maxX, ticks);\n        } else {\n          gl.xAxisScale = this.scales.linearScale(1, ticks, ticks);\n\n          if (gl.noLabelsProvided && gl.labels.length > 0) {\n            gl.xAxisScale = this.scales.linearScale(1, gl.labels.length, ticks - 1); // this is the only place seriesX is again mutated\n\n            gl.seriesX = gl.labels.slice();\n          }\n        } // we will still store these labels as the count for this will be different (to draw grid and labels placement)\n\n\n        if (isXNumeric) {\n          gl.labels = gl.xAxisScale.result.slice();\n        }\n      }\n\n      if (gl.minX === gl.maxX) {\n        // single dataPoint\n        if (cnf.xaxis.type === 'datetime') {\n          var newMinX = new Date(gl.minX);\n          newMinX.setDate(newMinX.getDate() - 2);\n          gl.minX = new Date(newMinX).getTime();\n          var newMaxX = new Date(gl.maxX);\n          newMaxX.setDate(newMaxX.getDate() + 2);\n          gl.maxX = new Date(newMaxX).getTime();\n        } else if (cnf.xaxis.type === 'numeric' || cnf.xaxis.type === 'category' && !gl.noLabelsProvided) {\n          gl.minX = gl.minX - 2;\n          gl.maxX = gl.maxX + 2;\n        }\n      }\n\n      if (gl.isXNumeric) {\n        // get the least x diff if numeric x axis is present\n        gl.seriesX.forEach(function (sX, i) {\n          sX.forEach(function (s, j) {\n            if (j > 0) {\n              var xDiff = s - gl.seriesX[i][j - 1];\n              gl.minXDiff = Math.min(xDiff, gl.minXDiff);\n            }\n          });\n        });\n        this.calcMinXDiffForTinySeries();\n      }\n\n      return {\n        minX: gl.minX,\n        maxX: gl.maxX\n      };\n    }\n  }, {\n    key: \"calcMinXDiffForTinySeries\",\n    value: function calcMinXDiffForTinySeries() {\n      var w = this.w;\n      var len = w.globals.labels.length;\n\n      if (w.globals.labels.length === 1) {\n        w.globals.minXDiff = (w.globals.maxX - w.globals.minX) / len / 3;\n      } else {\n        if (w.globals.minXDiff === Number.MAX_VALUE) {\n          // possibly a single dataPoint (fixes react-apexcharts/issue#34)\n          if (w.globals.timelineLabels.length > 0) {\n            len = w.globals.timelineLabels.length;\n          }\n\n          if (len < 3) {\n            len = 3;\n          }\n\n          w.globals.minXDiff = (w.globals.maxX - w.globals.minX) / len;\n        }\n      }\n\n      return w.globals.minXDiff;\n    }\n  }, {\n    key: \"setZRange\",\n    value: function setZRange() {\n      var gl = this.w.globals; // minZ, maxZ starts here\n\n      if (gl.isDataXYZ) {\n        for (var i = 0; i < gl.series.length; i++) {\n          if (typeof gl.seriesZ[i] !== 'undefined') {\n            for (var j = 0; j < gl.seriesZ[i].length; j++) {\n              if (gl.seriesZ[i][j] !== null && Utils.isNumber(gl.seriesZ[i][j])) {\n                gl.maxZ = Math.max(gl.maxZ, gl.seriesZ[i][j]);\n                gl.minZ = Math.min(gl.minZ, gl.seriesZ[i][j]);\n              }\n            }\n          }\n        }\n      }\n    }\n  }]);\n\n  return Range$$1;\n}();\n\n/**\n * ApexCharts Series Class for interation with the Series of the chart.\n *\n * @module Series\n **/\n\nvar Series =\n/*#__PURE__*/\nfunction () {\n  function Series(ctx) {\n    _classCallCheck(this, Series);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(Series, [{\n    key: \"getAllSeriesEls\",\n    value: function getAllSeriesEls() {\n      return this.w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n    }\n  }, {\n    key: \"getSeriesByName\",\n    value: function getSeriesByName(seriesName) {\n      return this.w.globals.dom.baseEl.querySelector(\".apexcharts-series.\".concat(Utils.escapeString(seriesName)));\n    }\n  }, {\n    key: \"addCollapsedClassToSeries\",\n    value: function addCollapsedClassToSeries(elSeries, index) {\n      var w = this.w;\n\n      for (var cs = 0; cs < w.globals.collapsedSeries.length; cs++) {\n        if (w.globals.collapsedSeries[cs].index === index) {\n          elSeries.node.classList.add('apexcharts-series-collapsed');\n        }\n      }\n    }\n  }, {\n    key: \"toggleSeriesOnHover\",\n    value: function toggleSeriesOnHover(e, targetElement) {\n      var w = this.w;\n      var allSeriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series\");\n\n      if (e.type === 'mousemove') {\n        var seriesCnt = parseInt(targetElement.getAttribute('rel')) - 1;\n        var seriesEl = null;\n\n        if (w.globals.axisCharts || w.config.chart.type === 'radialBar') {\n          if (w.globals.axisCharts) {\n            seriesEl = w.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(seriesCnt, \"']\"));\n          } else {\n            seriesEl = w.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(seriesCnt + 1, \"']\"));\n          }\n        } else {\n          seriesEl = w.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(seriesCnt + 1, \"'] path\"));\n        }\n\n        for (var se = 0; se < allSeriesEls.length; se++) {\n          allSeriesEls[se].classList.add('legend-mouseover-inactive');\n        }\n\n        if (seriesEl !== null) {\n          if (!w.globals.axisCharts) {\n            seriesEl.parentNode.classList.remove('legend-mouseover-inactive');\n          }\n\n          seriesEl.classList.remove('legend-mouseover-inactive');\n        }\n      } else if (e.type === 'mouseout') {\n        for (var _se = 0; _se < allSeriesEls.length; _se++) {\n          allSeriesEls[_se].classList.remove('legend-mouseover-inactive');\n        }\n      }\n    }\n  }, {\n    key: \"highlightRangeInSeries\",\n    value: function highlightRangeInSeries(e, targetElement) {\n      var w = this.w;\n      var allHeatMapElements = w.globals.dom.baseEl.querySelectorAll('.apexcharts-heatmap-rect');\n\n      var allActive = function allActive() {\n        for (var i = 0; i < allHeatMapElements.length; i++) {\n          allHeatMapElements[i].classList.remove('legend-mouseover-inactive');\n        }\n      };\n\n      var allInactive = function allInactive() {\n        for (var i = 0; i < allHeatMapElements.length; i++) {\n          allHeatMapElements[i].classList.add('legend-mouseover-inactive');\n        }\n      };\n\n      var selectedActive = function selectedActive(range) {\n        for (var i = 0; i < allHeatMapElements.length; i++) {\n          var val = parseInt(allHeatMapElements[i].getAttribute('val'));\n\n          if (val >= range.from && val <= range.to) {\n            allHeatMapElements[i].classList.remove('legend-mouseover-inactive');\n          }\n        }\n      };\n\n      if (e.type === 'mousemove') {\n        var seriesCnt = parseInt(targetElement.getAttribute('rel')) - 1;\n        allActive();\n        allInactive();\n        var range = w.config.plotOptions.heatmap.colorScale.ranges[seriesCnt];\n        selectedActive(range);\n      } else if (e.type === 'mouseout') {\n        allActive();\n      }\n    }\n  }, {\n    key: \"getActiveSeriesIndex\",\n    value: function getActiveSeriesIndex() {\n      var w = this.w;\n      var activeIndex = 0;\n\n      if (w.globals.series.length > 1) {\n        // active series flag is required to know if user has not deactivated via legend click\n        var firstActiveSeriesIndex = w.globals.series.map(function (series, index) {\n          if (series.length > 0 && w.config.series[index].type !== 'bar' && w.config.series[index].type !== 'column') {\n            return index;\n          } else {\n            return -1;\n          }\n        });\n\n        for (var a = 0; a < firstActiveSeriesIndex.length; a++) {\n          if (firstActiveSeriesIndex[a] !== -1) {\n            activeIndex = firstActiveSeriesIndex[a];\n            break;\n          }\n        }\n      }\n\n      return activeIndex;\n    }\n  }, {\n    key: \"getActiveConfigSeriesIndex\",\n    value: function getActiveConfigSeriesIndex() {\n      var w = this.w;\n      var activeIndex = 0;\n\n      if (w.config.series.length > 1) {\n        // active series flag is required to know if user has not deactivated via legend click\n        var firstActiveSeriesIndex = w.config.series.map(function (series, index) {\n          if (series.data && series.data.length > 0) {\n            return index;\n          } else {\n            return -1;\n          }\n        });\n\n        for (var a = 0; a < firstActiveSeriesIndex.length; a++) {\n          if (firstActiveSeriesIndex[a] !== -1) {\n            activeIndex = firstActiveSeriesIndex[a];\n            break;\n          }\n        }\n      }\n\n      return activeIndex;\n    }\n  }, {\n    key: \"getPreviousPaths\",\n    value: function getPreviousPaths() {\n      var w = this.w;\n      w.globals.previousPaths = [];\n\n      function pushPaths(seriesEls, i, type) {\n        var paths = seriesEls[i].childNodes;\n        var dArr = {\n          type: type,\n          paths: [],\n          realIndex: seriesEls[i].getAttribute('data:realIndex')\n        };\n\n        for (var j = 0; j < paths.length; j++) {\n          if (paths[j].hasAttribute('pathTo')) {\n            var d = paths[j].getAttribute('pathTo');\n            dArr.paths.push({\n              d: d\n            });\n          }\n        }\n\n        w.globals.previousPaths.push(dArr);\n      }\n\n      var linePaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-line-series .apexcharts-series');\n\n      if (linePaths.length > 0) {\n        for (var p = linePaths.length - 1; p >= 0; p--) {\n          pushPaths(linePaths, p, 'line');\n        }\n      }\n\n      var areapaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-area-series .apexcharts-series');\n\n      if (areapaths.length > 0) {\n        for (var i = areapaths.length - 1; i >= 0; i--) {\n          pushPaths(areapaths, i, 'area');\n        }\n      }\n\n      var barPaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-bar-series .apexcharts-series');\n\n      if (barPaths.length > 0) {\n        for (var _p = 0; _p < barPaths.length; _p++) {\n          pushPaths(barPaths, _p, 'bar');\n        }\n      }\n\n      var candlestickPaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-candlestick-series .apexcharts-series');\n\n      if (candlestickPaths.length > 0) {\n        for (var _p2 = 0; _p2 < candlestickPaths.length; _p2++) {\n          pushPaths(candlestickPaths, _p2, 'candlestick');\n        }\n      }\n\n      var radarPaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-radar-series .apexcharts-series');\n\n      if (radarPaths.length > 0) {\n        for (var _p3 = 0; _p3 < radarPaths.length; _p3++) {\n          pushPaths(radarPaths, _p3, 'radar');\n        }\n      }\n\n      var bubblepaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-bubble-series .apexcharts-series');\n\n      if (bubblepaths.length > 0) {\n        for (var s = 0; s < bubblepaths.length; s++) {\n          var seriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-bubble-series .apexcharts-series[data\\\\:realIndex='\".concat(s, \"'] circle\"));\n          var dArr = [];\n\n          for (var _i = 0; _i < seriesEls.length; _i++) {\n            dArr.push({\n              x: seriesEls[_i].getAttribute('cx'),\n              y: seriesEls[_i].getAttribute('cy'),\n              r: seriesEls[_i].getAttribute('r')\n            });\n          }\n\n          w.globals.previousPaths.push(dArr);\n        }\n      }\n\n      var scatterpaths = w.globals.dom.baseEl.querySelectorAll('.apexcharts-scatter-series .apexcharts-series');\n\n      if (scatterpaths.length > 0) {\n        for (var _s = 0; _s < scatterpaths.length; _s++) {\n          var _seriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-scatter-series .apexcharts-series[data\\\\:realIndex='\".concat(_s, \"'] circle\"));\n\n          var _dArr = [];\n\n          for (var _i2 = 0; _i2 < _seriesEls.length; _i2++) {\n            _dArr.push({\n              x: _seriesEls[_i2].getAttribute('cx'),\n              y: _seriesEls[_i2].getAttribute('cy'),\n              r: _seriesEls[_i2].getAttribute('r')\n            });\n          }\n\n          w.globals.previousPaths.push(_dArr);\n        }\n      }\n\n      var heatmapColors = w.globals.dom.baseEl.querySelectorAll('.apexcharts-heatmap .apexcharts-series');\n\n      if (heatmapColors.length > 0) {\n        for (var h = 0; h < heatmapColors.length; h++) {\n          var _seriesEls2 = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-heatmap .apexcharts-series[data\\\\:realIndex='\".concat(h, \"'] rect\"));\n\n          var _dArr2 = [];\n\n          for (var _i3 = 0; _i3 < _seriesEls2.length; _i3++) {\n            _dArr2.push({\n              color: _seriesEls2[_i3].getAttribute('color')\n            });\n          }\n\n          w.globals.previousPaths.push(_dArr2);\n        }\n      }\n\n      if (!w.globals.axisCharts) {\n        // for non-axis charts (i.e., circular charts, pathFrom is not usable. We need whole series)\n        w.globals.previousPaths = w.globals.series;\n      }\n    }\n  }, {\n    key: \"handleNoData\",\n    value: function handleNoData() {\n      var w = this.w;\n      var me = this;\n      var noDataOpts = w.config.noData;\n      var graphics = new Graphics(me.ctx);\n      var x = w.globals.svgWidth / 2;\n      var y = w.globals.svgHeight / 2;\n      var textAnchor = 'middle';\n      w.globals.noData = true;\n      w.globals.animationEnded = true;\n\n      if (noDataOpts.align === 'left') {\n        x = 10;\n        textAnchor = 'start';\n      } else if (noDataOpts.align === 'right') {\n        x = w.globals.svgWidth - 10;\n        textAnchor = 'end';\n      }\n\n      if (noDataOpts.verticalAlign === 'top') {\n        y = 50;\n      } else if (noDataOpts.verticalAlign === 'bottom') {\n        y = w.globals.svgHeight - 50;\n      }\n\n      x = x + noDataOpts.offsetX;\n      y = y + parseInt(noDataOpts.style.fontSize) + 2;\n\n      if (noDataOpts.text !== undefined && noDataOpts.text !== '') {\n        var titleText = graphics.drawText({\n          x: x,\n          y: y,\n          text: noDataOpts.text,\n          textAnchor: textAnchor,\n          fontSize: noDataOpts.style.fontSize,\n          fontFamily: noDataOpts.style.fontFamily,\n          foreColor: noDataOpts.style.color,\n          opacity: 1,\n          class: 'apexcharts-text-nodata'\n        });\n        titleText.node.setAttribute('class', 'apexcharts-title-text');\n        w.globals.dom.Paper.add(titleText);\n      }\n    } // When user clicks on legends, the collapsed series is filled with [0,0,0,...,0]\n    // This is because we don't want to alter the series' length as it is used at many places\n\n  }, {\n    key: \"setNullSeriesToZeroValues\",\n    value: function setNullSeriesToZeroValues(series) {\n      var w = this.w;\n\n      for (var sl = 0; sl < series.length; sl++) {\n        if (series[sl].length === 0) {\n          for (var j = 0; j < series[w.globals.maxValsInArrayIndex].length; j++) {\n            series[sl].push(0);\n          }\n        }\n      }\n\n      return series;\n    }\n  }, {\n    key: \"hasAllSeriesEqualX\",\n    value: function hasAllSeriesEqualX() {\n      var equalLen = true;\n      var w = this.w;\n      var filteredSerX = this.filteredSeriesX();\n\n      for (var i = 0; i < filteredSerX.length - 1; i++) {\n        if (filteredSerX[i][0] !== filteredSerX[i + 1][0]) {\n          equalLen = false;\n          break;\n        }\n      }\n\n      w.globals.allSeriesHasEqualX = equalLen;\n      return equalLen;\n    }\n  }, {\n    key: \"filteredSeriesX\",\n    value: function filteredSeriesX() {\n      var w = this.w;\n      var filteredSeriesX = w.globals.seriesX.map(function (ser, index) {\n        if (ser.length > 0) {\n          return ser;\n        } else {\n          return [];\n        }\n      });\n      return filteredSeriesX;\n    }\n  }]);\n\n  return Series;\n}();\n\n/**\n * ApexCharts Dimensions Class for calculating rects of all elements that are drawn and will be drawn.\n *\n * @module Dimensions\n **/\n\nvar Dimensions =\n/*#__PURE__*/\nfunction () {\n  function Dimensions(ctx) {\n    _classCallCheck(this, Dimensions);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.lgRect = {};\n    this.yAxisWidth = 0;\n    this.xAxisHeight = 0;\n    this.isSparkline = this.w.config.chart.sparkline.enabled;\n    this.xPadRight = 0;\n    this.xPadLeft = 0;\n  }\n  /**\n   * @memberof Dimensions\n   * @param {object} w - chart context\n   **/\n\n\n  _createClass(Dimensions, [{\n    key: \"plotCoords\",\n    value: function plotCoords() {\n      var w = this.w;\n      var gl = w.globals;\n      var lgRect = this.getLegendsRect();\n\n      if (gl.axisCharts) {\n        // for line / area / scatter / column\n        this.setGridCoordsForAxisCharts(lgRect);\n      } else {\n        // for pie / donuts / circle\n        this.setGridCoordsForNonAxisCharts(lgRect);\n      }\n\n      this.titleSubtitleOffset(); // after calculating everything, apply padding set by user\n\n      gl.gridHeight = gl.gridHeight - w.config.grid.padding.top - w.config.grid.padding.bottom;\n      gl.gridWidth = gl.gridWidth - w.config.grid.padding.left - w.config.grid.padding.right - this.xPadRight - this.xPadLeft;\n      gl.translateX = gl.translateX + w.config.grid.padding.left + this.xPadLeft;\n      gl.translateY = gl.translateY + w.config.grid.padding.top;\n    }\n  }, {\n    key: \"conditionalChecksForAxisCoords\",\n    value: function conditionalChecksForAxisCoords(xaxisLabelCoords, xtitleCoords) {\n      var w = this.w;\n      this.xAxisHeight = (xaxisLabelCoords.height + xtitleCoords.height) * w.globals.LINE_HEIGHT_RATIO + 15;\n      this.xAxisWidth = xaxisLabelCoords.width;\n\n      if (this.xAxisHeight - xtitleCoords.height > w.config.xaxis.labels.maxHeight) {\n        this.xAxisHeight = w.config.xaxis.labels.maxHeight;\n      }\n\n      if (w.config.xaxis.labels.minHeight && this.xAxisHeight < w.config.xaxis.labels.minHeight) {\n        this.xAxisHeight = w.config.xaxis.labels.minHeight;\n      }\n\n      if (w.config.xaxis.floating) {\n        this.xAxisHeight = 0;\n      }\n\n      if (!w.globals.isBarHorizontal) {\n        this.yAxisWidth = this.getTotalYAxisWidth();\n      } else {\n        this.yAxisWidth = w.globals.yLabelsCoords[0].width + w.globals.yTitleCoords[0].width + 15;\n      }\n\n      var minYAxisWidth = 0;\n      var maxYAxisWidth = 0;\n      w.config.yaxis.forEach(function (y) {\n        minYAxisWidth += y.labels.minWidth;\n        maxYAxisWidth += y.labels.maxWidth;\n      });\n\n      if (this.yAxisWidth < minYAxisWidth) {\n        this.yAxisWidth = minYAxisWidth;\n      }\n\n      if (this.yAxisWidth > maxYAxisWidth) {\n        this.yAxisWidth = maxYAxisWidth;\n      }\n    }\n  }, {\n    key: \"setGridCoordsForAxisCharts\",\n    value: function setGridCoordsForAxisCharts(lgRect) {\n      var w = this.w;\n      var gl = w.globals;\n      var yaxisLabelCoords = this.getyAxisLabelsCoords();\n      var xaxisLabelCoords = this.getxAxisLabelsCoords();\n      var yTitleCoords = this.getyAxisTitleCoords();\n      var xtitleCoords = this.getxAxisTitleCoords();\n      w.globals.yLabelsCoords = [];\n      w.globals.yTitleCoords = [];\n      w.config.yaxis.map(function (yaxe, index) {\n        // store the labels and titles coords in global vars\n        w.globals.yLabelsCoords.push({\n          width: yaxisLabelCoords[index].width,\n          index: index\n        });\n        w.globals.yTitleCoords.push({\n          width: yTitleCoords[index].width,\n          index: index\n        });\n      });\n      this.conditionalChecksForAxisCoords(xaxisLabelCoords, xtitleCoords);\n      gl.translateXAxisY = w.globals.rotateXLabels ? this.xAxisHeight / 8 : -4;\n      gl.translateXAxisX = w.globals.rotateXLabels && w.globals.isXNumeric && w.config.xaxis.labels.rotate <= -45 ? -this.xAxisWidth / 4 : 0;\n\n      if (w.globals.isBarHorizontal) {\n        gl.rotateXLabels = false;\n        gl.translateXAxisY = -1 * (parseInt(w.config.xaxis.labels.style.fontSize) / 1.5);\n      }\n\n      gl.translateXAxisY = gl.translateXAxisY + w.config.xaxis.labels.offsetY;\n      gl.translateXAxisX = gl.translateXAxisX + w.config.xaxis.labels.offsetX;\n      var yAxisWidth = this.yAxisWidth;\n      var xAxisHeight = this.xAxisHeight;\n      gl.xAxisLabelsHeight = this.xAxisHeight;\n      gl.xAxisHeight = this.xAxisHeight;\n      var translateY = 10;\n\n      if (!w.config.grid.show || w.config.chart.type === 'radar') {\n        yAxisWidth = 0;\n        xAxisHeight = 35;\n      }\n\n      if (this.isSparkline) {\n        lgRect = {\n          height: 0,\n          width: 0\n        };\n        xAxisHeight = 0;\n        yAxisWidth = 0;\n        translateY = 0;\n      }\n\n      this.additionalPaddingXLabels(xaxisLabelCoords);\n\n      switch (w.config.legend.position) {\n        case 'bottom':\n          gl.translateY = translateY;\n          gl.translateX = yAxisWidth;\n          gl.gridHeight = gl.svgHeight - lgRect.height - xAxisHeight - (!this.isSparkline ? w.globals.rotateXLabels ? 10 : 15 : 0);\n          gl.gridWidth = gl.svgWidth - yAxisWidth;\n          break;\n\n        case 'top':\n          gl.translateY = lgRect.height + translateY;\n          gl.translateX = yAxisWidth;\n          gl.gridHeight = gl.svgHeight - lgRect.height - xAxisHeight - (!this.isSparkline ? w.globals.rotateXLabels ? 10 : 15 : 0);\n          gl.gridWidth = gl.svgWidth - yAxisWidth;\n          break;\n\n        case 'left':\n          gl.translateY = translateY;\n          gl.translateX = lgRect.width + yAxisWidth;\n          gl.gridHeight = gl.svgHeight - xAxisHeight - 12;\n          gl.gridWidth = gl.svgWidth - lgRect.width - yAxisWidth;\n          break;\n\n        case 'right':\n          gl.translateY = translateY;\n          gl.translateX = yAxisWidth;\n          gl.gridHeight = gl.svgHeight - xAxisHeight - 12;\n          gl.gridWidth = gl.svgWidth - lgRect.width - yAxisWidth - 5;\n          break;\n\n        default:\n          throw new Error('Legend position not supported');\n      }\n\n      this.setGridXPosForDualYAxis(yTitleCoords, yaxisLabelCoords); // after drawing everything, set the Y axis positions\n\n      var objyAxis = new YAxis(this.ctx);\n      objyAxis.setYAxisXPosition(yaxisLabelCoords, yTitleCoords);\n    }\n  }, {\n    key: \"setGridCoordsForNonAxisCharts\",\n    value: function setGridCoordsForNonAxisCharts(lgRect) {\n      var w = this.w;\n      var gl = w.globals;\n      var xPad = 0;\n\n      if (w.config.legend.show && !w.config.legend.floating) {\n        xPad = 20;\n      }\n\n      var offY = 10;\n      var offX = 0;\n\n      if (w.config.chart.type === 'pie' || w.config.chart.type === 'donut') {\n        offY = offY + w.config.plotOptions.pie.offsetY;\n        offX = offX + w.config.plotOptions.pie.offsetX;\n      } else if (w.config.chart.type === 'radialBar') {\n        offY = offY + w.config.plotOptions.radialBar.offsetY;\n        offX = offX + w.config.plotOptions.radialBar.offsetX;\n      }\n\n      if (!w.config.legend.show) {\n        gl.gridHeight = gl.svgHeight - 35;\n        gl.gridWidth = gl.gridHeight;\n        gl.translateY = offY - 10;\n        gl.translateX = offX + (gl.svgWidth - gl.gridWidth) / 2;\n        return;\n      }\n\n      switch (w.config.legend.position) {\n        case 'bottom':\n          gl.gridHeight = gl.svgHeight - lgRect.height - 35;\n          gl.gridWidth = gl.gridHeight;\n          gl.translateY = offY - 20;\n          gl.translateX = offX + (gl.svgWidth - gl.gridWidth) / 2;\n          break;\n\n        case 'top':\n          gl.gridHeight = gl.svgHeight - lgRect.height - 35;\n          gl.gridWidth = gl.gridHeight;\n          gl.translateY = lgRect.height + offY;\n          gl.translateX = offX + (gl.svgWidth - gl.gridWidth) / 2;\n          break;\n\n        case 'left':\n          gl.gridWidth = gl.svgWidth - lgRect.width - xPad;\n          gl.gridHeight = gl.gridWidth;\n          gl.translateY = offY;\n          gl.translateX = offX + lgRect.width + xPad;\n          break;\n\n        case 'right':\n          gl.gridWidth = gl.svgWidth - lgRect.width - xPad - 5;\n          gl.gridHeight = gl.gridWidth;\n          gl.translateY = offY;\n          gl.translateX = offX + 10;\n          break;\n\n        default:\n          throw new Error('Legend position not supported');\n      }\n    }\n  }, {\n    key: \"setGridXPosForDualYAxis\",\n    value: function setGridXPosForDualYAxis(yTitleCoords, yaxisLabelCoords) {\n      var w = this.w;\n      w.config.yaxis.map(function (yaxe, index) {\n        if (w.globals.ignoreYAxisIndexes.indexOf(index) === -1 && !w.config.yaxis[index].floating && w.config.yaxis[index].show) {\n          if (yaxe.opposite) {\n            w.globals.translateX = w.globals.translateX - (yaxisLabelCoords[index].width + yTitleCoords[index].width) - parseInt(w.config.yaxis[index].labels.style.fontSize) / 1.2 - 12;\n          }\n        }\n      });\n    } // Sometimes, the last labels gets cropped in category/numeric xaxis.\n    // Hence, we add some additional padding based on the label length to avoid the last label being cropped.\n    // NOTE: datetime x-axis won't have any effect with this as we don't know the label length there due to many constraints.\n\n  }, {\n    key: \"additionalPaddingXLabels\",\n    value: function additionalPaddingXLabels(xaxisLabelCoords) {\n      var _this = this;\n\n      var w = this.w;\n\n      if (w.config.xaxis.type === 'category' && w.globals.isBarHorizontal || w.config.xaxis.type === 'numeric') {\n        var rightPad = function rightPad(labels) {\n          if (w.config.grid.padding.right < labels.width) {\n            _this.xPadRight = labels.width / 2 + 1;\n          }\n        };\n\n        var leftPad = function leftPad(labels) {\n          if (w.config.grid.padding.left < labels.width) {\n            _this.xPadLeft = labels.width / 2 + 1;\n          }\n        };\n\n        var lineArea = w.config.chart.type === 'line' || w.config.chart.type === 'area';\n        w.config.yaxis.forEach(function (yaxe, i) {\n          var shouldPad = !yaxe.show || yaxe.floating || w.globals.collapsedSeriesIndices.indexOf(i) !== -1 || lineArea || yaxe.opposite && w.globals.isBarHorizontal;\n\n          if (shouldPad) {\n            if (lineArea && w.globals.isMultipleYAxis && w.globals.collapsedSeriesIndices.indexOf(i) !== -1 || w.globals.isBarHorizontal && yaxe.opposite) {\n              leftPad(xaxisLabelCoords);\n            }\n\n            if (!w.globals.isBarHorizontal && yaxe.opposite && w.globals.collapsedSeriesIndices.indexOf(i) !== -1 || lineArea && !w.globals.isMultipleYAxis) {\n              rightPad(xaxisLabelCoords);\n            }\n          }\n        });\n      }\n    }\n  }, {\n    key: \"titleSubtitleOffset\",\n    value: function titleSubtitleOffset() {\n      var w = this.w;\n      var gl = w.globals;\n      var gridShrinkOffset = this.isSparkline || !w.globals.axisCharts ? 0 : 10;\n\n      if (w.config.title.text !== undefined) {\n        gridShrinkOffset += w.config.title.margin;\n      } else {\n        gridShrinkOffset += this.isSparkline || !w.globals.axisCharts ? 0 : 5;\n      }\n\n      if (w.config.subtitle.text !== undefined) {\n        gridShrinkOffset += w.config.subtitle.margin;\n      } else {\n        gridShrinkOffset += this.isSparkline || !w.globals.axisCharts ? 0 : 5;\n      }\n\n      if (w.config.legend.show && w.config.legend.position === 'bottom' && !w.config.legend.floating && w.config.series.length > 1) {\n        gridShrinkOffset += 10;\n      }\n\n      var titleCoords = this.getTitleSubtitleCoords('title');\n      var subtitleCoords = this.getTitleSubtitleCoords('subtitle');\n      gl.gridHeight = gl.gridHeight - titleCoords.height - subtitleCoords.height - gridShrinkOffset;\n      gl.translateY = gl.translateY + titleCoords.height + subtitleCoords.height + gridShrinkOffset;\n    }\n  }, {\n    key: \"getTotalYAxisWidth\",\n    value: function getTotalYAxisWidth() {\n      var w = this.w;\n      var yAxisWidth = 0;\n      var padding = 10;\n\n      var isHiddenYAxis = function isHiddenYAxis(index) {\n        return w.globals.ignoreYAxisIndexes.indexOf(index) > -1;\n      };\n\n      w.globals.yLabelsCoords.map(function (yLabelCoord, index) {\n        var floating = w.config.yaxis[index].floating;\n\n        if (yLabelCoord.width > 0 && !floating) {\n          yAxisWidth = yAxisWidth + yLabelCoord.width + padding;\n\n          if (isHiddenYAxis(index)) {\n            yAxisWidth = yAxisWidth - yLabelCoord.width - padding;\n          }\n        } else {\n          yAxisWidth = yAxisWidth + (floating || !w.config.yaxis[index].show ? 0 : 5);\n        }\n      });\n      w.globals.yTitleCoords.map(function (yTitleCoord, index) {\n        var floating = w.config.yaxis[index].floating;\n        padding = parseInt(w.config.yaxis[index].title.style.fontSize);\n\n        if (yTitleCoord.width > 0 && !floating) {\n          yAxisWidth = yAxisWidth + yTitleCoord.width + padding;\n\n          if (isHiddenYAxis(index)) {\n            yAxisWidth = yAxisWidth - yTitleCoord.width - padding;\n          }\n        } else {\n          yAxisWidth = yAxisWidth + (floating || !w.config.yaxis[index].show ? 0 : 5);\n        }\n      });\n      return yAxisWidth;\n    }\n  }, {\n    key: \"getxAxisTimeScaleLabelsCoords\",\n    value: function getxAxisTimeScaleLabelsCoords() {\n      var w = this.w;\n      var rect;\n      var timescaleLabels = w.globals.timelineLabels.slice();\n\n      if (w.globals.isBarHorizontal && w.config.xaxis.type === 'datetime') {\n        timescaleLabels = w.globals.invertedTimelineLabels.slice();\n      }\n\n      var labels = timescaleLabels.map(function (label) {\n        return label.value;\n      }); //  get the longest string from the labels array and also apply label formatter to it\n\n      var val = labels.reduce(function (a, b) {\n        // if undefined, maybe user didn't pass the datetime(x) values\n        if (typeof a === 'undefined') {\n          console.error('You have possibly supplied invalid Date format. Please supply a valid JavaScript Date');\n          return 0;\n        } else {\n          return a.length > b.length ? a : b;\n        }\n      }, 0);\n      var graphics = new Graphics(this.ctx);\n      rect = graphics.getTextRects(val, w.config.xaxis.labels.style.fontSize);\n      var totalWidthRotated = rect.width * 1.05 * labels.length;\n\n      if (totalWidthRotated > w.globals.gridWidth && w.config.xaxis.labels.rotate !== 0) {\n        w.globals.overlappingXLabels = true;\n      }\n\n      return rect;\n    }\n    /**\n     * Get X Axis Dimensions\n     * @memberof Dimensions\n     * @return {{width, height}}\n     **/\n\n  }, {\n    key: \"getxAxisLabelsCoords\",\n    value: function getxAxisLabelsCoords() {\n      var _this2 = this;\n\n      var w = this.w;\n      var xaxisLabels = w.globals.labels.slice();\n      var rect;\n\n      if (w.globals.timelineLabels.length > 0) {\n        var coords = this.getxAxisTimeScaleLabelsCoords();\n        rect = {\n          width: coords.width,\n          height: coords.height\n        };\n      } else {\n        var lgWidthForSideLegends = w.config.legend.position === 'left' && w.config.legend.position === 'right' && !w.config.legend.floating ? this.lgRect.width : 0; //  get the longest string from the labels array and also apply label formatter to it\n\n        var labels = [];\n        var xlbFormatter = w.globals.xLabelFormatter;\n        xaxisLabels.forEach(function (xl) {\n          var xFormat = new Formatters(_this2.ctx);\n          var label = xFormat.xLabelFormat(xlbFormatter, xl);\n          labels.push(label);\n        });\n        var val = labels.reduce(function (a, b) {\n          return a.length > b.length ? a : b;\n        }, 0); // the labels gets changed for bar charts\n\n        if (w.globals.isBarHorizontal) {\n          val = w.globals.yAxisScale[0].result.reduce(function (a, b) {\n            return a.length > b.length ? a : b;\n          }, 0);\n        }\n\n        var xFormat = new Formatters(this.ctx);\n        val = xFormat.xLabelFormat(xlbFormatter, val);\n        var graphics = new Graphics(this.ctx);\n        var xLabelrect = graphics.getTextRects(val, w.config.xaxis.labels.style.fontSize);\n        rect = {\n          width: xLabelrect.width,\n          height: xLabelrect.height\n        };\n\n        if (rect.width * xaxisLabels.length > w.globals.svgWidth - lgWidthForSideLegends - this.yAxisWidth && w.config.xaxis.labels.rotate !== 0) {\n          if (!w.globals.isBarHorizontal) {\n            w.globals.rotateXLabels = true;\n            xLabelrect = graphics.getTextRects(val, w.config.xaxis.labels.style.fontSize, w.config.xaxis.labels.style.fontFamily, \"rotate(\".concat(w.config.xaxis.labels.rotate, \" 0 0)\"), false);\n            rect.height = xLabelrect.height / 1.66;\n          }\n        } else {\n          w.globals.rotateXLabels = false;\n        }\n      }\n\n      if (!w.config.xaxis.labels.show) {\n        rect = {\n          width: 0,\n          height: 0\n        };\n      }\n\n      return {\n        width: rect.width,\n        height: rect.height\n      };\n    }\n    /**\n     * Get Y Axis Dimensions\n     * @memberof Dimensions\n     * @return {{width, height}}\n     **/\n\n  }, {\n    key: \"getyAxisLabelsCoords\",\n    value: function getyAxisLabelsCoords() {\n      var _this3 = this;\n\n      var w = this.w;\n      var width = 0;\n      var height = 0;\n      var ret = [];\n      var labelPad = 10;\n      w.config.yaxis.map(function (yaxe, index) {\n        if (yaxe.show && yaxe.labels.show && w.globals.yAxisScale[index].result.length) {\n          var lbFormatter = w.globals.yLabelFormatters[index]; // the second parameter -1 is the index of tick which user can use in the formatter\n\n          var val = lbFormatter(w.globals.yAxisScale[index].niceMax, -1); // if user has specified a custom formatter, and the result is null or empty, we need to discard the formatter and take the value as it is.\n\n          if (typeof val === 'undefined' || val.length === 0) {\n            val = w.globals.yAxisScale[index].niceMax;\n          }\n\n          if (w.globals.isBarHorizontal) {\n            labelPad = 0;\n            var barYaxisLabels = w.globals.labels.slice(); //  get the longest string from the labels array and also apply label formatter to it\n\n            val = barYaxisLabels.reduce(function (a, b) {\n              return a.length > b.length ? a : b;\n            }, 0);\n            val = lbFormatter(val, -1);\n          }\n\n          var graphics = new Graphics(_this3.ctx);\n          var rect = graphics.getTextRects(val, yaxe.labels.style.fontSize);\n          ret.push({\n            width: rect.width + labelPad,\n            height: rect.height\n          });\n        } else {\n          ret.push({\n            width: width,\n            height: height\n          });\n        }\n      });\n      return ret;\n    }\n    /**\n     * Get X Axis Title Dimensions\n     * @memberof Dimensions\n     * @return {{width, height}}\n     **/\n\n  }, {\n    key: \"getxAxisTitleCoords\",\n    value: function getxAxisTitleCoords() {\n      var w = this.w;\n      var width = 0;\n      var height = 0;\n\n      if (w.config.xaxis.title.text !== undefined) {\n        var graphics = new Graphics(this.ctx);\n        var rect = graphics.getTextRects(w.config.xaxis.title.text, w.config.xaxis.title.style.fontSize);\n        width = rect.width;\n        height = rect.height;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n    /**\n     * Get Y Axis Dimensions\n     * @memberof Dimensions\n     * @return {{width, height}}\n     **/\n\n  }, {\n    key: \"getyAxisTitleCoords\",\n    value: function getyAxisTitleCoords() {\n      var _this4 = this;\n\n      var w = this.w;\n      var ret = [];\n      w.config.yaxis.map(function (yaxe, index) {\n        if (yaxe.show && yaxe.title.text !== undefined) {\n          var graphics = new Graphics(_this4.ctx);\n          var rect = graphics.getTextRects(yaxe.title.text, yaxe.title.style.fontSize, yaxe.title.style.fontFamily, 'rotate(-90 0 0)', false);\n          ret.push({\n            width: rect.width,\n            height: rect.height\n          });\n        } else {\n          ret.push({\n            width: 0,\n            height: 0\n          });\n        }\n      });\n      return ret;\n    }\n    /**\n     * Get Chart Title/Subtitle Dimensions\n     * @memberof Dimensions\n     * @return {{width, height}}\n     **/\n\n  }, {\n    key: \"getTitleSubtitleCoords\",\n    value: function getTitleSubtitleCoords(type) {\n      var w = this.w;\n      var width = 0;\n      var height = 0;\n      var floating = type === 'title' ? w.config.title.floating : w.config.subtitle.floating;\n      var el = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-text\"));\n\n      if (el !== null && !floating) {\n        var coord = el.getBoundingClientRect();\n        width = coord.width;\n        height = w.globals.axisCharts ? coord.height + 5 : coord.height;\n      }\n\n      return {\n        width: width,\n        height: height\n      };\n    }\n  }, {\n    key: \"getLegendsRect\",\n    value: function getLegendsRect() {\n      var w = this.w;\n      var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');\n      var lgRect = Object.assign({}, Utils.getBoundingClientRect(elLegendWrap));\n\n      if (elLegendWrap !== null && !w.config.legend.floating && w.config.legend.show) {\n        this.lgRect = {\n          x: lgRect.x,\n          y: lgRect.y,\n          height: lgRect.height,\n          width: lgRect.height === 0 ? 0 : lgRect.width\n        };\n      } else {\n        this.lgRect = {\n          x: 0,\n          y: 0,\n          height: 0,\n          width: 0\n        };\n      }\n\n      return this.lgRect;\n    }\n  }]);\n\n  return Dimensions;\n}();\n\n/**\n * ApexCharts TimeScale Class for generating time ticks for x-axis.\n *\n * @module TimeScale\n **/\n\nvar TimeScale =\n/*#__PURE__*/\nfunction () {\n  function TimeScale(ctx) {\n    _classCallCheck(this, TimeScale);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.timeScaleArray = [];\n  }\n\n  _createClass(TimeScale, [{\n    key: \"calculateTimeScaleTicks\",\n    value: function calculateTimeScaleTicks(minX, maxX) {\n      var _this = this;\n\n      var w = this.w; // null check when no series to show\n\n      if (w.globals.allSeriesCollapsed) {\n        w.globals.labels = [];\n        w.globals.timelineLabels = [];\n        return [];\n      }\n\n      var dt = new DateTime(this.ctx);\n      var daysDiff = (maxX - minX) / (1000 * 60 * 60 * 24);\n      this.determineInterval(daysDiff);\n      w.globals.disableZoomIn = false;\n      w.globals.disableZoomOut = false;\n\n      if (daysDiff < 0.005) {\n        w.globals.disableZoomIn = true;\n      } else if (daysDiff > 50000) {\n        w.globals.disableZoomOut = true;\n      }\n\n      var timeIntervals = dt.getTimeUnitsfromTimestamp(minX, maxX);\n      var daysWidthOnXAxis = w.globals.gridWidth / daysDiff;\n      var hoursWidthOnXAxis = daysWidthOnXAxis / 24;\n      var minutesWidthOnXAxis = hoursWidthOnXAxis / 60;\n      var numberOfHours = Math.floor(daysDiff * 24);\n      var numberOfMinutes = Math.floor(daysDiff * 24 * 60);\n      var numberOfDays = Math.floor(daysDiff);\n      var numberOfMonths = Math.floor(daysDiff / 30);\n      var numberOfYears = Math.floor(daysDiff / 365);\n      var firstVal = {\n        minMinute: timeIntervals.minMinute,\n        minHour: timeIntervals.minHour,\n        minDate: timeIntervals.minDate,\n        minMonth: timeIntervals.minMonth,\n        minYear: timeIntervals.minYear\n      };\n      var currentMinute = firstVal.minMinute;\n      var currentHour = firstVal.minHour;\n      var currentMonthDate = firstVal.minDate;\n      var currentDate = firstVal.minDate;\n      var currentMonth = firstVal.minMonth;\n      var currentYear = firstVal.minYear;\n      var params = {\n        firstVal: firstVal,\n        currentMinute: currentMinute,\n        currentHour: currentHour,\n        currentMonthDate: currentMonthDate,\n        currentDate: currentDate,\n        currentMonth: currentMonth,\n        currentYear: currentYear,\n        daysWidthOnXAxis: daysWidthOnXAxis,\n        hoursWidthOnXAxis: hoursWidthOnXAxis,\n        minutesWidthOnXAxis: minutesWidthOnXAxis,\n        numberOfMinutes: numberOfMinutes,\n        numberOfHours: numberOfHours,\n        numberOfDays: numberOfDays,\n        numberOfMonths: numberOfMonths,\n        numberOfYears: numberOfYears\n      };\n\n      switch (this.tickInterval) {\n        case 'years':\n          {\n            this.generateYearScale(params);\n            break;\n          }\n\n        case 'months':\n        case 'half_year':\n          {\n            this.generateMonthScale(params);\n            break;\n          }\n\n        case 'months_days':\n        case 'months_fortnight':\n        case 'days':\n        case 'week_days':\n          {\n            this.generateDayScale(params);\n            break;\n          }\n\n        case 'hours':\n          {\n            this.generateHourScale(params);\n            break;\n          }\n\n        case 'minutes':\n          this.generateMinuteScale(params);\n          break;\n      } // first, we will adjust the month values index\n      // as in the upper function, it is starting from 0\n      // we will start them from 1\n\n\n      var adjustedMonthInTimeScaleArray = this.timeScaleArray.map(function (ts) {\n        var defaultReturn = {\n          position: ts.position,\n          unit: ts.unit,\n          year: ts.year,\n          day: ts.day ? ts.day : 1,\n          hour: ts.hour ? ts.hour : 0,\n          month: ts.month + 1\n        };\n\n        if (ts.unit === 'month') {\n          return _objectSpread({}, defaultReturn, {\n            value: ts.value + 1\n          });\n        } else if (ts.unit === 'day' || ts.unit === 'hour') {\n          return _objectSpread({}, defaultReturn, {\n            value: ts.value\n          });\n        } else if (ts.unit === 'minute') {\n          return _objectSpread({}, defaultReturn, {\n            value: ts.value,\n            minute: ts.value\n          });\n        }\n\n        return ts;\n      });\n      var filteredTimeScale = adjustedMonthInTimeScaleArray.filter(function (ts) {\n        var modulo = 1;\n        var ticks = Math.ceil(w.globals.gridWidth / 120);\n        var value = ts.value;\n\n        if (w.config.xaxis.tickAmount !== undefined) {\n          ticks = w.config.xaxis.tickAmount;\n        }\n\n        if (adjustedMonthInTimeScaleArray.length > ticks) {\n          modulo = Math.floor(adjustedMonthInTimeScaleArray.length / ticks);\n        }\n\n        var shouldNotSkipUnit = false; // there is a big change in unit i.e days to months\n\n        var shouldNotPrint = false; // should skip these values\n\n        switch (_this.tickInterval) {\n          case 'half_year':\n            modulo = 7;\n\n            if (ts.unit === 'year') {\n              shouldNotSkipUnit = true;\n            }\n\n            break;\n\n          case 'months':\n            modulo = 1;\n\n            if (ts.unit === 'year') {\n              shouldNotSkipUnit = true;\n            }\n\n            break;\n\n          case 'months_fortnight':\n            modulo = 15;\n\n            if (ts.unit === 'year' || ts.unit === 'month') {\n              shouldNotSkipUnit = true;\n            }\n\n            if (value === 30) {\n              shouldNotPrint = true;\n            }\n\n            break;\n\n          case 'months_days':\n            modulo = 10;\n\n            if (ts.unit === 'month') {\n              shouldNotSkipUnit = true;\n            }\n\n            if (value === 30) {\n              shouldNotPrint = true;\n            }\n\n            break;\n\n          case 'week_days':\n            modulo = 8;\n\n            if (ts.unit === 'month') {\n              shouldNotSkipUnit = true;\n            }\n\n            break;\n\n          case 'days':\n            modulo = 1;\n\n            if (ts.unit === 'month') {\n              shouldNotSkipUnit = true;\n            }\n\n            break;\n\n          case 'hours':\n            if (ts.unit === 'day') {\n              shouldNotSkipUnit = true;\n            }\n\n            break;\n\n          case 'minutes':\n            if (value % 5 !== 0) {\n              shouldNotPrint = true;\n            }\n\n            break;\n        }\n\n        if (_this.tickInterval === 'minutes' || _this.tickInterval === 'hours') {\n          if (!shouldNotPrint) {\n            return true;\n          }\n        } else {\n          if ((value % modulo === 0 || shouldNotSkipUnit) && !shouldNotPrint) {\n            return true;\n          }\n        }\n      });\n      return filteredTimeScale;\n    }\n  }, {\n    key: \"recalcDimensionsBasedOnFormat\",\n    value: function recalcDimensionsBasedOnFormat(filteredTimeScale, inverted) {\n      var w = this.w;\n      var reformattedTimescaleArray = this.formatDates(filteredTimeScale);\n      var removedOverlappingTS = this.removeOverlappingTS(reformattedTimescaleArray);\n\n      if (!inverted) {\n        w.globals.timelineLabels = removedOverlappingTS.slice();\n      } else {\n        w.globals.invertedTimelineLabels = removedOverlappingTS.slice();\n      } // at this stage, we need to re-calculate coords of the grid as timeline labels may have altered the xaxis labels coords\n      // The reason we can't do this prior to this stage is because timeline labels depends on gridWidth, and as the ticks are calculated based on available gridWidth, there can be unknown number of ticks generated for different minX and maxX\n      // Dependency on Dimensions(), need to refactor correctly\n      // TODO - find an alternate way to avoid calling this Heavy method twice\n\n\n      var dimensions = new Dimensions(this.ctx);\n      dimensions.plotCoords();\n    }\n  }, {\n    key: \"determineInterval\",\n    value: function determineInterval(daysDiff) {\n      switch (true) {\n        case daysDiff > 1825:\n          // difference is more than 5 years\n          this.tickInterval = 'years';\n          break;\n\n        case daysDiff > 800 && daysDiff <= 1825:\n          this.tickInterval = 'half_year';\n          break;\n\n        case daysDiff > 180 && daysDiff <= 800:\n          this.tickInterval = 'months';\n          break;\n\n        case daysDiff > 90 && daysDiff <= 180:\n          this.tickInterval = 'months_fortnight';\n          break;\n\n        case daysDiff > 60 && daysDiff <= 90:\n          this.tickInterval = 'months_days';\n          break;\n\n        case daysDiff > 30 && daysDiff <= 60:\n          this.tickInterval = 'week_days';\n          break;\n\n        case daysDiff > 2 && daysDiff <= 30:\n          this.tickInterval = 'days';\n          break;\n\n        case daysDiff > 0.1 && daysDiff <= 2:\n          // less than  2 days\n          this.tickInterval = 'hours';\n          break;\n\n        case daysDiff < 0.1:\n          this.tickInterval = 'minutes';\n          break;\n\n        default:\n          this.tickInterval = 'days';\n          break;\n      }\n    }\n  }, {\n    key: \"generateYearScale\",\n    value: function generateYearScale(params) {\n      var firstVal = params.firstVal,\n          currentMonth = params.currentMonth,\n          currentYear = params.currentYear,\n          daysWidthOnXAxis = params.daysWidthOnXAxis,\n          numberOfYears = params.numberOfYears;\n      var firstTickValue = firstVal.minYear;\n      var firstTickPosition = 0;\n      var dt = new DateTime(this.ctx);\n      var unit = 'year';\n\n      if (firstVal.minDate > 1 && firstVal.minMonth > 0) {\n        var remainingDays = dt.determineRemainingDaysOfYear(firstVal.minYear, firstVal.minMonth, firstVal.minDate); // remainingDaysofFirstMonth is used to reacht the 2nd tick position\n\n        var remainingDaysOfFirstYear = dt.determineDaysOfYear(firstVal.minYear) - remainingDays + 1; // calculate the first tick position\n\n        firstTickPosition = remainingDaysOfFirstYear * daysWidthOnXAxis;\n        firstTickValue = firstVal.minYear + 1; // push the first tick in the array\n\n        this.timeScaleArray.push({\n          position: firstTickPosition,\n          value: firstTickValue,\n          unit: unit,\n          year: firstTickValue,\n          month: Utils.monthMod(currentMonth + 1)\n        });\n      } else if (firstVal.minDate === 1 && firstVal.minMonth === 0) {\n        // push the first tick in the array\n        this.timeScaleArray.push({\n          position: firstTickPosition,\n          value: firstTickValue,\n          unit: unit,\n          year: currentYear,\n          month: Utils.monthMod(currentMonth + 1)\n        });\n      }\n\n      var year = firstTickValue;\n      var pos = firstTickPosition; // keep drawing rest of the ticks\n\n      for (var i = 0; i < numberOfYears; i++) {\n        year++;\n        pos = dt.determineDaysOfYear(year - 1) * daysWidthOnXAxis + pos;\n        this.timeScaleArray.push({\n          position: pos,\n          value: year,\n          unit: unit,\n          year: year,\n          month: 1\n        });\n      }\n    }\n  }, {\n    key: \"generateMonthScale\",\n    value: function generateMonthScale(params) {\n      var firstVal = params.firstVal,\n          currentMonthDate = params.currentMonthDate,\n          currentMonth = params.currentMonth,\n          currentYear = params.currentYear,\n          daysWidthOnXAxis = params.daysWidthOnXAxis,\n          numberOfMonths = params.numberOfMonths;\n      var firstTickValue = currentMonth;\n      var firstTickPosition = 0;\n      var dt = new DateTime(this.ctx);\n      var unit = 'month';\n      var yrCounter = 0;\n\n      if (firstVal.minDate > 1) {\n        // remainingDaysofFirstMonth is used to reacht the 2nd tick position\n        var remainingDaysOfFirstMonth = dt.determineDaysOfMonths(currentMonth + 1, firstVal.minYear) - currentMonthDate + 1; // calculate the first tick position\n\n        firstTickPosition = remainingDaysOfFirstMonth * daysWidthOnXAxis;\n        firstTickValue = Utils.monthMod(currentMonth + 1);\n        var year = currentYear + yrCounter;\n\n        var _month = Utils.monthMod(firstTickValue);\n\n        var value = firstTickValue; // it's Jan, so update the year\n\n        if (firstTickValue === 0) {\n          unit = 'year';\n          value = year;\n          _month = 1;\n          yrCounter += 1;\n          year = year + yrCounter;\n        } // push the first tick in the array\n\n\n        this.timeScaleArray.push({\n          position: firstTickPosition,\n          value: value,\n          unit: unit,\n          year: year,\n          month: _month\n        });\n      } else {\n        // push the first tick in the array\n        this.timeScaleArray.push({\n          position: firstTickPosition,\n          value: firstTickValue,\n          unit: unit,\n          year: currentYear,\n          month: Utils.monthMod(currentMonth)\n        });\n      }\n\n      var month = firstTickValue + 1;\n      var pos = firstTickPosition; // keep drawing rest of the ticks\n\n      for (var i = 0, j = 1; i < numberOfMonths; i++, j++) {\n        month = Utils.monthMod(month);\n\n        if (month === 0) {\n          unit = 'year';\n          yrCounter += 1;\n        } else {\n          unit = 'month';\n        }\n\n        var _year = currentYear + Math.floor(month / 12) + yrCounter;\n\n        pos = dt.determineDaysOfMonths(month, _year) * daysWidthOnXAxis + pos;\n        var monthVal = month === 0 ? _year : month;\n        this.timeScaleArray.push({\n          position: pos,\n          value: monthVal,\n          unit: unit,\n          year: _year,\n          month: month === 0 ? 1 : month\n        });\n        month++;\n      }\n    }\n  }, {\n    key: \"generateDayScale\",\n    value: function generateDayScale(params) {\n      var firstVal = params.firstVal,\n          currentMonth = params.currentMonth,\n          currentYear = params.currentYear,\n          hoursWidthOnXAxis = params.hoursWidthOnXAxis,\n          numberOfDays = params.numberOfDays;\n      var dt = new DateTime(this.ctx);\n      var unit = 'day';\n      var remainingHours = 24 - firstVal.minHour;\n      var yrCounter = 0; // calculate the first tick position\n\n      var firstTickPosition = remainingHours * hoursWidthOnXAxis;\n      var firstTickValue = firstVal.minDate + 1;\n      var val = firstTickValue;\n\n      var changeMonth = function changeMonth(dateVal, month, year) {\n        var monthdays = dt.determineDaysOfMonths(month + 1, year);\n\n        if (dateVal > monthdays) {\n          month = month + 1;\n          date = 1;\n          unit = 'month';\n          val = month;\n          return month;\n        }\n\n        return month;\n      };\n\n      var date = firstTickValue;\n      var month = changeMonth(date, currentMonth, currentYear); // push the first tick in the array\n\n      this.timeScaleArray.push({\n        position: firstTickPosition,\n        value: val,\n        unit: unit,\n        year: currentYear,\n        month: Utils.monthMod(month),\n        day: date\n      });\n      var pos = firstTickPosition; // keep drawing rest of the ticks\n\n      for (var i = 0; i < numberOfDays; i++) {\n        date += 1;\n        unit = 'day';\n        month = changeMonth(date, month, currentYear + Math.floor(month / 12) + yrCounter);\n        var year = currentYear + Math.floor(month / 12) + yrCounter;\n        pos = 24 * hoursWidthOnXAxis + pos;\n\n        var _val = date === 1 ? Utils.monthMod(month) : date;\n\n        this.timeScaleArray.push({\n          position: pos,\n          value: _val,\n          unit: unit,\n          year: year,\n          month: Utils.monthMod(month),\n          day: _val\n        });\n      }\n    }\n  }, {\n    key: \"generateHourScale\",\n    value: function generateHourScale(params) {\n      var firstVal = params.firstVal,\n          currentDate = params.currentDate,\n          currentMonth = params.currentMonth,\n          currentYear = params.currentYear,\n          minutesWidthOnXAxis = params.minutesWidthOnXAxis,\n          numberOfHours = params.numberOfHours;\n      var dt = new DateTime(this.ctx);\n      var yrCounter = 0;\n      var unit = 'hour';\n\n      var changeDate = function changeDate(dateVal, month) {\n        var monthdays = dt.determineDaysOfMonths(month + 1, currentYear);\n\n        if (dateVal > monthdays) {\n          date = 1;\n          month = month + 1;\n        }\n\n        return {\n          month: month,\n          date: date\n        };\n      };\n\n      var changeMonth = function changeMonth(dateVal, month) {\n        var monthdays = dt.determineDaysOfMonths(month + 1, currentYear);\n\n        if (dateVal > monthdays) {\n          month = month + 1;\n          return month;\n        }\n\n        return month;\n      };\n\n      var remainingMins = 60 - firstVal.minMinute;\n      var firstTickPosition = remainingMins * minutesWidthOnXAxis;\n      var firstTickValue = firstVal.minHour + 1;\n      var hour = firstTickValue + 1;\n\n      if (remainingMins === 60) {\n        firstTickPosition = 0;\n        firstTickValue = firstVal.minHour;\n        hour = firstTickValue + 1;\n      }\n\n      var date = currentDate;\n      var month = changeMonth(date, currentMonth); // push the first tick in the array\n\n      this.timeScaleArray.push({\n        position: firstTickPosition,\n        value: firstTickValue,\n        unit: unit,\n        day: date,\n        hour: hour,\n        year: currentYear,\n        month: Utils.monthMod(month)\n      });\n      var pos = firstTickPosition; // keep drawing rest of the ticks\n\n      for (var i = 0; i < numberOfHours; i++) {\n        unit = 'hour';\n\n        if (hour >= 24) {\n          hour = 0;\n          date += 1;\n          unit = 'day';\n          var checkNextMonth = changeDate(date, month);\n          month = checkNextMonth.month;\n          month = changeMonth(date, month);\n        }\n\n        var year = currentYear + Math.floor(month / 12) + yrCounter;\n        pos = hour === 0 && i === 0 ? remainingMins * minutesWidthOnXAxis : 60 * minutesWidthOnXAxis + pos;\n        var val = hour === 0 ? date : hour;\n        this.timeScaleArray.push({\n          position: pos,\n          value: val,\n          unit: unit,\n          hour: hour,\n          day: date,\n          year: year,\n          month: Utils.monthMod(month)\n        });\n        hour++;\n      }\n    }\n  }, {\n    key: \"generateMinuteScale\",\n    value: function generateMinuteScale(params) {\n      var firstVal = params.firstVal,\n          currentMinute = params.currentMinute,\n          currentHour = params.currentHour,\n          currentDate = params.currentDate,\n          currentMonth = params.currentMonth,\n          currentYear = params.currentYear,\n          minutesWidthOnXAxis = params.minutesWidthOnXAxis,\n          numberOfMinutes = params.numberOfMinutes;\n      var yrCounter = 0;\n      var unit = 'minute';\n      var remainingMins = currentMinute - firstVal.minMinute;\n      var firstTickPosition = minutesWidthOnXAxis - remainingMins;\n      var firstTickValue = firstVal.minMinute + 1;\n      var minute = firstTickValue + 1;\n      var date = currentDate;\n      var month = currentMonth;\n      var year = currentYear;\n      var hour = currentHour; // push the first tick in the array\n\n      this.timeScaleArray.push({\n        position: firstTickPosition,\n        value: firstTickValue,\n        unit: unit,\n        day: date,\n        hour: hour,\n        minute: minute,\n        year: year,\n        month: Utils.monthMod(month)\n      });\n      var pos = firstTickPosition; // keep drawing rest of the ticks\n\n      for (var i = 0; i < numberOfMinutes; i++) {\n        if (minute >= 60) {\n          minute = 0;\n          hour += 1;\n\n          if (hour === 24) {\n            hour = 0;\n          }\n        }\n\n        var _year2 = currentYear + Math.floor(month / 12) + yrCounter;\n\n        pos = minutesWidthOnXAxis + pos;\n        var val = minute;\n        this.timeScaleArray.push({\n          position: pos,\n          value: val,\n          unit: unit,\n          hour: hour,\n          minute: minute,\n          day: date,\n          year: _year2,\n          month: Utils.monthMod(month)\n        });\n        minute++;\n      }\n    }\n  }, {\n    key: \"createRawDateString\",\n    value: function createRawDateString(ts, value) {\n      var raw = ts.year;\n      raw += '-' + ('0' + ts.month.toString()).slice(-2); // unit is day\n\n      if (ts.unit === 'day') {\n        raw += ts.unit === 'day' ? '-' + ('0' + value).slice(-2) : '-01';\n      } else {\n        raw += '-' + ('0' + (ts.day ? ts.day : '1')).slice(-2);\n      } // unit is hour\n\n\n      if (ts.unit === 'hour') {\n        raw += ts.unit === 'hour' ? 'T' + ('0' + value).slice(-2) : 'T00';\n      } else {\n        raw += 'T' + ('0' + (ts.hour ? ts.hour : '0')).slice(-2);\n      } // unit is minute\n\n\n      raw += ts.unit === 'minute' ? ':' + ('0' + value).slice(-2) + ':00.000Z' : ':00:00.000Z';\n      return raw;\n    }\n  }, {\n    key: \"formatDates\",\n    value: function formatDates(filteredTimeScale) {\n      var _this2 = this;\n\n      var w = this.w;\n      var reformattedTimescaleArray = filteredTimeScale.map(function (ts) {\n        var value = ts.value.toString();\n        var dt = new DateTime(_this2.ctx);\n\n        var raw = _this2.createRawDateString(ts, value); // parse the whole ISO datestring\n\n\n        var dateString = new Date(Date.parse(raw));\n\n        if (w.config.xaxis.labels.format === undefined) {\n          var customFormat = 'dd MMM';\n          var dtFormatter = w.config.xaxis.labels.datetimeFormatter;\n          if (ts.unit === 'year') customFormat = dtFormatter.year;\n          if (ts.unit === 'month') customFormat = dtFormatter.month;\n          if (ts.unit === 'day') customFormat = dtFormatter.day;\n          if (ts.unit === 'hour') customFormat = dtFormatter.hour;\n          if (ts.unit === 'minute') customFormat = dtFormatter.minute;\n          value = dt.formatDate(dateString, customFormat, true, false);\n        } else {\n          value = dt.formatDate(dateString, w.config.xaxis.labels.format);\n        }\n\n        return {\n          dateString: raw,\n          position: ts.position,\n          value: value,\n          unit: ts.unit,\n          year: ts.year,\n          month: ts.month\n        };\n      });\n      return reformattedTimescaleArray;\n    }\n  }, {\n    key: \"removeOverlappingTS\",\n    value: function removeOverlappingTS(arr) {\n      var _this3 = this;\n\n      var graphics = new Graphics(this.ctx);\n      var lastDrawnIndex = 0;\n      var filteredArray = arr.map(function (item, index) {\n        if (index > 0 && _this3.w.config.xaxis.labels.hideOverlappingLabels) {\n          var prevLabelWidth = graphics.getTextRects(arr[lastDrawnIndex].value).width;\n          var prevPos = arr[lastDrawnIndex].position;\n          var pos = item.position;\n\n          if (pos > prevPos + prevLabelWidth + 10) {\n            lastDrawnIndex = index;\n            return item;\n          } else {\n            return null;\n          }\n        } else {\n          return item;\n        }\n      });\n      filteredArray = filteredArray.filter(function (f) {\n        return f !== null;\n      });\n      return filteredArray;\n    }\n  }]);\n\n  return TimeScale;\n}();\n\n/**\n * ApexCharts Core Class responsible for major calculations and creating elements.\n *\n * @module Core\n **/\n\nvar Core =\n/*#__PURE__*/\nfunction () {\n  function Core(el, ctx) {\n    _classCallCheck(this, Core);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.el = el;\n    this.coreUtils = new CoreUtils(this.ctx);\n    this.twoDSeries = [];\n    this.threeDSeries = [];\n    this.twoDSeriesX = [];\n  } // get data and store into appropriate vars\n\n\n  _createClass(Core, [{\n    key: \"setupElements\",\n    value: function setupElements() {\n      var gl = this.w.globals;\n      var cnf = this.w.config; // const graphics = new Graphics(this.ctx)\n\n      var ct = cnf.chart.type;\n      var axisChartsArrTypes = ['line', 'area', 'bar', 'rangeBar', // 'rangeArea',\n      'candlestick', 'radar', 'scatter', 'bubble', 'heatmap'];\n      var xyChartsArrTypes = ['line', 'area', 'bar', 'rangeBar', // 'rangeArea',\n      'candlestick', 'scatter', 'bubble'];\n      gl.axisCharts = axisChartsArrTypes.indexOf(ct) > -1;\n      gl.xyCharts = xyChartsArrTypes.indexOf(ct) > -1;\n      gl.isBarHorizontal = (cnf.chart.type === 'bar' || cnf.chart.type === 'rangeBar') && cnf.plotOptions.bar.horizontal;\n      gl.chartClass = '.apexcharts' + gl.cuid;\n      gl.dom.baseEl = this.el;\n      gl.dom.elWrap = document.createElement('div');\n      Graphics.setAttrs(gl.dom.elWrap, {\n        id: gl.chartClass.substring(1),\n        class: 'apexcharts-canvas ' + gl.chartClass.substring(1)\n      });\n      this.el.appendChild(gl.dom.elWrap);\n      gl.dom.Paper = new window.SVG.Doc(gl.dom.elWrap);\n      gl.dom.Paper.attr({\n        class: 'apexcharts-svg',\n        'xmlns:data': 'ApexChartsNS',\n        transform: \"translate(\".concat(cnf.chart.offsetX, \", \").concat(cnf.chart.offsetY, \")\")\n      });\n      gl.dom.Paper.node.style.background = cnf.chart.background;\n      this.setSVGDimensions();\n      gl.dom.elGraphical = gl.dom.Paper.group().attr({\n        class: 'apexcharts-inner apexcharts-graphical'\n      });\n      gl.dom.elDefs = gl.dom.Paper.defs();\n      gl.dom.elLegendWrap = document.createElement('div');\n      gl.dom.elLegendWrap.classList.add('apexcharts-legend');\n      gl.dom.elWrap.appendChild(gl.dom.elLegendWrap); // gl.dom.Paper.add(gl.dom.elLegendWrap)\n\n      gl.dom.Paper.add(gl.dom.elGraphical);\n      gl.dom.elGraphical.add(gl.dom.elDefs);\n    }\n  }, {\n    key: \"plotChartType\",\n    value: function plotChartType(ser, xyRatios) {\n      var w = this.w;\n      var cnf = w.config;\n      var gl = w.globals;\n      var lineSeries = {\n        series: [],\n        i: []\n      };\n      var areaSeries = {\n        series: [],\n        i: []\n      };\n      var scatterSeries = {\n        series: [],\n        i: []\n      };\n      var columnSeries = {\n        series: [],\n        i: []\n      };\n      var candlestickSeries = {\n        series: [],\n        i: []\n      };\n      gl.series.map(function (series, st) {\n        // if user has specified a particular type for particular series\n        if (typeof ser[st].type !== 'undefined') {\n          if (ser[st].type === 'column' || ser[st].type === 'bar') {\n            w.config.plotOptions.bar.horizontal = false; // horizontal bars not supported in mixed charts, hence forcefully set to false\n\n            columnSeries.series.push(series);\n            columnSeries.i.push(st);\n          } else if (ser[st].type === 'area') {\n            areaSeries.series.push(series);\n            areaSeries.i.push(st);\n          } else if (ser[st].type === 'line') {\n            lineSeries.series.push(series);\n            lineSeries.i.push(st);\n          } else if (ser[st].type === 'scatter') {\n            scatterSeries.series.push(series);\n            scatterSeries.i.push(st);\n          } else if (ser[st].type === 'bubble') ; else if (ser[st].type === 'candlestick') {\n            candlestickSeries.series.push(series);\n            candlestickSeries.i.push(st);\n          } else {\n            // user has specified type, but it is not valid (other than line/area/column)\n            console.warn('You have specified an unrecognized chart type. Available types for this propery are line/area/column/bar/scatter/bubble');\n          }\n\n          gl.comboCharts = true;\n        } else {\n          lineSeries.series.push(series);\n          lineSeries.i.push(st);\n        }\n      });\n      var line = new Line(this.ctx, xyRatios);\n      var candlestick = new CandleStick(this.ctx, xyRatios);\n      var pie = new Pie(this.ctx);\n      var radialBar = new Radial(this.ctx);\n      var rangeBar = new RangeBar(this.ctx, xyRatios);\n      var radar = new Radar(this.ctx);\n      var elGraph = [];\n\n      if (gl.comboCharts) {\n        if (areaSeries.series.length > 0) {\n          elGraph.push(line.draw(areaSeries.series, 'area', areaSeries.i));\n        }\n\n        if (columnSeries.series.length > 0) {\n          if (w.config.chart.stacked) {\n            var barStacked = new BarStacked(this.ctx, xyRatios);\n            elGraph.push(barStacked.draw(columnSeries.series, columnSeries.i));\n          } else {\n            var bar = new Bar(this.ctx, xyRatios);\n            elGraph.push(bar.draw(columnSeries.series, columnSeries.i));\n          }\n        }\n\n        if (lineSeries.series.length > 0) {\n          elGraph.push(line.draw(lineSeries.series, 'line', lineSeries.i));\n        }\n\n        if (candlestickSeries.series.length > 0) {\n          elGraph.push(candlestick.draw(candlestickSeries.series, candlestickSeries.i));\n        }\n\n        if (scatterSeries.series.length > 0) {\n          var scatterLine = new Line(this.ctx, xyRatios, true);\n          elGraph.push(scatterLine.draw(scatterSeries.series, 'scatter', scatterSeries.i));\n        } // TODO: allow bubble series in a combo chart\n        // if (bubbleSeries.series.length > 0) {\n        //   const bubbleLine = new Line(this.ctx, xyRatios, true)\n        //   elGraph.push(\n        //     bubbleLine.draw(bubbleSeries.series, 'bubble', bubbleSeries.i)\n        //   )\n        // }\n\n      } else {\n        switch (cnf.chart.type) {\n          case 'line':\n            elGraph = line.draw(gl.series, 'line');\n            break;\n\n          case 'area':\n            elGraph = line.draw(gl.series, 'area');\n            break;\n\n          case 'bar':\n            if (cnf.chart.stacked) {\n              var _barStacked = new BarStacked(this.ctx, xyRatios);\n\n              elGraph = _barStacked.draw(gl.series);\n            } else {\n              var _bar = new Bar(this.ctx, xyRatios);\n\n              elGraph = _bar.draw(gl.series);\n            }\n\n            break;\n\n          case 'candlestick':\n            var candleStick = new CandleStick(this.ctx, xyRatios);\n            elGraph = candleStick.draw(gl.series);\n            break;\n\n          case 'rangeBar':\n            elGraph = rangeBar.draw(gl.series);\n            break;\n\n          case 'heatmap':\n            var heatmap = new HeatMap(this.ctx, xyRatios);\n            elGraph = heatmap.draw(gl.series);\n            break;\n\n          case 'pie':\n          case 'donut':\n            elGraph = pie.draw(gl.series);\n            break;\n\n          case 'radialBar':\n            elGraph = radialBar.draw(gl.series);\n            break;\n\n          case 'radar':\n            elGraph = radar.draw(gl.series);\n            break;\n\n          default:\n            elGraph = line.draw(gl.series);\n        }\n      }\n\n      return elGraph;\n    }\n  }, {\n    key: \"setSVGDimensions\",\n    value: function setSVGDimensions() {\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      gl.svgWidth = cnf.chart.width;\n      gl.svgHeight = cnf.chart.height;\n      var elDim = Utils.getDimensions(this.el);\n      var widthUnit = cnf.chart.width.toString().split(/[0-9]+/g).pop();\n\n      if (widthUnit === '%') {\n        if (Utils.isNumber(elDim[0])) {\n          if (elDim[0].width === 0) {\n            elDim = Utils.getDimensions(this.el.parentNode);\n          }\n\n          gl.svgWidth = elDim[0] * parseInt(cnf.chart.width) / 100;\n        }\n      } else if (widthUnit === 'px' || widthUnit === '') {\n        gl.svgWidth = parseInt(cnf.chart.width);\n      }\n\n      if (gl.svgHeight !== 'auto' && gl.svgHeight !== '') {\n        var heightUnit = cnf.chart.height.toString().split(/[0-9]+/g).pop();\n\n        if (heightUnit === '%') {\n          var elParentDim = Utils.getDimensions(this.el.parentNode);\n          gl.svgHeight = elParentDim[1] * parseInt(cnf.chart.height) / 100;\n        } else {\n          gl.svgHeight = parseInt(cnf.chart.height);\n        }\n      } else {\n        if (gl.axisCharts) {\n          gl.svgHeight = gl.svgWidth / 1.61;\n        } else {\n          gl.svgHeight = gl.svgWidth;\n        }\n      }\n\n      Graphics.setAttrs(gl.dom.Paper.node, {\n        width: gl.svgWidth,\n        height: gl.svgHeight\n      }); // gl.dom.Paper.node.parentNode.parentNode.style.minWidth = gl.svgWidth + \"px\";\n\n      var offsetY = cnf.chart.sparkline.enabled ? 0 : gl.axisCharts ? cnf.chart.parentHeightOffset : 0;\n      gl.dom.Paper.node.parentNode.parentNode.style.minHeight = gl.svgHeight + offsetY + 'px';\n      gl.dom.elWrap.style.width = gl.svgWidth + 'px';\n      gl.dom.elWrap.style.height = gl.svgHeight + 'px';\n    }\n  }, {\n    key: \"shiftGraphPosition\",\n    value: function shiftGraphPosition() {\n      var gl = this.w.globals;\n      var tY = gl.translateY;\n      var tX = gl.translateX;\n      var scalingAttrs = {\n        transform: 'translate(' + tX + ', ' + tY + ')'\n      };\n      Graphics.setAttrs(gl.dom.elGraphical.node, scalingAttrs);\n    }\n    /*\n     ** All the calculations for setting range in charts will be done here\n     */\n\n  }, {\n    key: \"coreCalculations\",\n    value: function coreCalculations() {\n      var range = new Range$1(this.ctx);\n      range.init();\n    }\n  }, {\n    key: \"resetGlobals\",\n    value: function resetGlobals() {\n      var _this = this;\n\n      var gl = this.w.globals;\n      gl.series = [];\n      gl.seriesCandleO = [];\n      gl.seriesCandleH = [];\n      gl.seriesCandleL = [];\n      gl.seriesCandleC = [];\n      gl.seriesRangeStart = [];\n      gl.seriesRangeEnd = [];\n      gl.seriesPercent = [];\n      gl.seriesX = [];\n      gl.seriesZ = [];\n      gl.seriesNames = [];\n      gl.seriesTotals = [];\n      gl.stackedSeriesTotals = [];\n      gl.labels = [];\n      gl.timelineLabels = [];\n      gl.noLabelsProvided = false;\n      gl.timescaleTicks = [];\n      gl.resizeTimer = null;\n      gl.selectionResizeTimer = null;\n\n      gl.seriesXvalues = function () {\n        return _this.w.config.series.map(function (s) {\n          return [];\n        });\n      }();\n\n      gl.seriesYvalues = function () {\n        return _this.w.config.series.map(function (s) {\n          return [];\n        });\n      }();\n\n      gl.delayedElements = [];\n      gl.pointsArray = [];\n      gl.dataLabelsRects = [];\n      gl.isXNumeric = false;\n      gl.isDataXYZ = false;\n      gl.maxY = -Number.MAX_VALUE;\n      gl.minY = Number.MIN_VALUE;\n      gl.minYArr = [];\n      gl.maxYArr = [];\n      gl.maxX = -Number.MAX_VALUE;\n      gl.minX = Number.MAX_VALUE;\n      gl.initialmaxX = -Number.MAX_VALUE;\n      gl.initialminX = Number.MAX_VALUE;\n      gl.maxDate = 0;\n      gl.minDate = Number.MAX_VALUE;\n      gl.minZ = Number.MAX_VALUE;\n      gl.maxZ = -Number.MAX_VALUE;\n      gl.minXDiff = Number.MAX_VALUE;\n      gl.yAxisScale = [];\n      gl.xAxisScale = null;\n      gl.xAxisTicksPositions = [];\n      gl.yLabelsCoords = [];\n      gl.yTitleCoords = [];\n      gl.xRange = 0;\n      gl.yRange = [];\n      gl.zRange = 0;\n      gl.dataPoints = 0;\n    }\n  }, {\n    key: \"isMultipleY\",\n    value: function isMultipleY() {\n      // user has supplied an array in yaxis property. So, turn on multipleYAxis flag\n      if (this.w.config.yaxis.constructor === Array && this.w.config.yaxis.length > 1) {\n        // first, turn off stacking if multiple y axis\n        this.w.config.chart.stacked = false;\n        this.w.globals.isMultipleYAxis = true;\n        return true;\n      }\n    }\n  }, {\n    key: \"excludeCollapsedSeriesInYAxis\",\n    value: function excludeCollapsedSeriesInYAxis() {\n      var _this2 = this;\n\n      var w = this.w;\n      w.globals.ignoreYAxisIndexes = w.globals.collapsedSeries.map(function (collapsed, i) {\n        if (_this2.w.globals.isMultipleYAxis) {\n          return collapsed.index;\n        }\n      });\n    }\n  }, {\n    key: \"isMultiFormat\",\n    value: function isMultiFormat() {\n      return this.isFormatXY() || this.isFormat2DArray();\n    } // given format is [{x, y}, {x, y}]\n\n  }, {\n    key: \"isFormatXY\",\n    value: function isFormatXY() {\n      var series = this.w.config.series.slice();\n      var sr = new Series(this.ctx);\n      this.activeSeriesIndex = sr.getActiveConfigSeriesIndex();\n\n      if (typeof series[this.activeSeriesIndex].data !== 'undefined' && series[this.activeSeriesIndex].data.length > 0 && series[this.activeSeriesIndex].data[0] !== null && typeof series[this.activeSeriesIndex].data[0].x !== 'undefined' && series[this.activeSeriesIndex].data[0] !== null) {\n        return true;\n      }\n    } // given format is [[x, y], [x, y]]\n\n  }, {\n    key: \"isFormat2DArray\",\n    value: function isFormat2DArray() {\n      var series = this.w.config.series.slice();\n      var sr = new Series(this.ctx);\n      this.activeSeriesIndex = sr.getActiveConfigSeriesIndex();\n\n      if (typeof series[this.activeSeriesIndex].data !== 'undefined' && series[this.activeSeriesIndex].data.length > 0 && typeof series[this.activeSeriesIndex].data[0] !== 'undefined' && series[this.activeSeriesIndex].data[0] !== null && series[this.activeSeriesIndex].data[0].constructor === Array) {\n        return true;\n      }\n    }\n  }, {\n    key: \"handleFormat2DArray\",\n    value: function handleFormat2DArray(ser, i) {\n      var cnf = this.w.config;\n      var gl = this.w.globals;\n\n      for (var j = 0; j < ser[i].data.length; j++) {\n        if (typeof ser[i].data[j][1] !== 'undefined') {\n          if (Array.isArray(ser[i].data[j][1]) && ser[i].data[j][1].length === 4) {\n            this.twoDSeries.push(Utils.parseNumber(ser[i].data[j][1][3]));\n          } else {\n            this.twoDSeries.push(Utils.parseNumber(ser[i].data[j][1]));\n          }\n\n          gl.dataFormatXNumeric = true;\n        }\n\n        if (cnf.xaxis.type === 'datetime') {\n          // if timestamps are provided and xaxis type is datettime,\n          var ts = new Date(ser[i].data[j][0]);\n          ts = new Date(ts).getTime();\n          this.twoDSeriesX.push(ts);\n        } else {\n          this.twoDSeriesX.push(ser[i].data[j][0]);\n        }\n      }\n\n      for (var _j = 0; _j < ser[i].data.length; _j++) {\n        if (typeof ser[i].data[_j][2] !== 'undefined') {\n          this.threeDSeries.push(ser[i].data[_j][2]);\n          gl.isDataXYZ = true;\n        }\n      }\n    }\n  }, {\n    key: \"handleFormatXY\",\n    value: function handleFormatXY(ser, i) {\n      var cnf = this.w.config;\n      var gl = this.w.globals;\n      var dt = new DateTime(this.ctx);\n      var activeI = i;\n\n      if (gl.collapsedSeriesIndices.indexOf(i) > -1) {\n        // fix #368\n        activeI = this.activeSeriesIndex;\n      } // get series\n\n\n      for (var j = 0; j < ser[i].data.length; j++) {\n        if (typeof ser[i].data[j].y !== 'undefined') {\n          if (Array.isArray(ser[i].data[j].y)) {\n            this.twoDSeries.push(Utils.parseNumber(ser[i].data[j].y[ser[i].data[j].y.length - 1]));\n          } else {\n            this.twoDSeries.push(Utils.parseNumber(ser[i].data[j].y));\n          }\n        }\n      } // get seriesX\n\n\n      for (var _j2 = 0; _j2 < ser[activeI].data.length; _j2++) {\n        var isXString = typeof ser[activeI].data[_j2].x === 'string';\n        var isXDate = !!dt.isValidDate(ser[activeI].data[_j2].x.toString());\n\n        if (isXString || isXDate) {\n          // user supplied '01/01/2017' or a date string (a JS date object is not supported)\n          if (isXString) {\n            if (cnf.xaxis.type === 'datetime' && !gl.isRangeData) {\n              this.twoDSeriesX.push(dt.parseDate(ser[activeI].data[_j2].x));\n            } else {\n              // a category and not a numeric x value\n              this.fallbackToCategory = true;\n              this.twoDSeriesX.push(ser[activeI].data[_j2].x);\n            }\n          } else {\n            if (cnf.xaxis.type === 'datetime') {\n              this.twoDSeriesX.push(dt.parseDate(ser[activeI].data[_j2].x.toString()));\n            } else {\n              gl.dataFormatXNumeric = true;\n              this.twoDSeriesX.push(parseFloat(ser[activeI].data[_j2].x));\n            }\n          }\n        } else {\n          // a numeric value in x property\n          this.twoDSeriesX.push(ser[activeI].data[_j2].x);\n        }\n      }\n\n      if (ser[i].data[0] && typeof ser[i].data[0].z !== 'undefined') {\n        for (var t = 0; t < ser[i].data.length; t++) {\n          this.threeDSeries.push(ser[i].data[t].z);\n        }\n\n        gl.isDataXYZ = true;\n      }\n    }\n  }, {\n    key: \"handleRangeData\",\n    value: function handleRangeData(ser, i) {\n      var gl = this.w.globals;\n      var range = {};\n\n      if (this.isFormat2DArray()) {\n        range = this.handleRangeDataFormat('array', ser, i);\n      } else if (this.isFormatXY()) {\n        range = this.handleRangeDataFormat('xy', ser, i);\n      }\n\n      gl.seriesRangeStart.push(range.start);\n      gl.seriesRangeEnd.push(range.end);\n      return range;\n    }\n  }, {\n    key: \"handleCandleStickData\",\n    value: function handleCandleStickData(ser, i) {\n      var gl = this.w.globals;\n      var ohlc = {};\n\n      if (this.isFormat2DArray()) {\n        ohlc = this.handleCandleStickDataFormat('array', ser, i);\n      } else if (this.isFormatXY()) {\n        ohlc = this.handleCandleStickDataFormat('xy', ser, i);\n      }\n\n      gl.seriesCandleO.push(ohlc.o);\n      gl.seriesCandleH.push(ohlc.h);\n      gl.seriesCandleL.push(ohlc.l);\n      gl.seriesCandleC.push(ohlc.c);\n      return ohlc;\n    }\n  }, {\n    key: \"handleRangeDataFormat\",\n    value: function handleRangeDataFormat(format, ser, i) {\n      var rangeStart = [];\n      var rangeEnd = [];\n      var err = 'Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts';\n      var serObj = new Series(this.ctx);\n      var activeIndex = serObj.getActiveConfigSeriesIndex();\n\n      if (format === 'array') {\n        if (ser[activeIndex].data[0][1].length !== 2) {\n          throw new Error(err);\n        }\n\n        for (var j = 0; j < ser[i].data.length; j++) {\n          rangeStart.push(ser[i].data[j][1][0]);\n          rangeEnd.push(ser[i].data[j][1][1]);\n        }\n      } else if (format === 'xy') {\n        if (ser[activeIndex].data[0].y.length !== 2) {\n          throw new Error(err);\n        }\n\n        for (var _j3 = 0; _j3 < ser[i].data.length; _j3++) {\n          rangeStart.push(ser[i].data[_j3].y[0]);\n          rangeEnd.push(ser[i].data[_j3].y[1]);\n        }\n      }\n\n      return {\n        start: rangeStart,\n        end: rangeEnd\n      };\n    }\n  }, {\n    key: \"handleCandleStickDataFormat\",\n    value: function handleCandleStickDataFormat(format, ser, i) {\n      var serO = [];\n      var serH = [];\n      var serL = [];\n      var serC = [];\n      var err = 'Please provide [Open, High, Low and Close] values in valid format. Read more https://apexcharts.com/docs/series/#candlestick';\n\n      if (format === 'array') {\n        if (ser[i].data[0][1].length !== 4) {\n          throw new Error(err);\n        }\n\n        for (var j = 0; j < ser[i].data.length; j++) {\n          serO.push(ser[i].data[j][1][0]);\n          serH.push(ser[i].data[j][1][1]);\n          serL.push(ser[i].data[j][1][2]);\n          serC.push(ser[i].data[j][1][3]);\n        }\n      } else if (format === 'xy') {\n        if (ser[i].data[0].y.length !== 4) {\n          throw new Error(err);\n        }\n\n        for (var _j4 = 0; _j4 < ser[i].data.length; _j4++) {\n          serO.push(ser[i].data[_j4].y[0]);\n          serH.push(ser[i].data[_j4].y[1]);\n          serL.push(ser[i].data[_j4].y[2]);\n          serC.push(ser[i].data[_j4].y[3]);\n        }\n      }\n\n      return {\n        o: serO,\n        h: serH,\n        l: serL,\n        c: serC\n      };\n    }\n  }, {\n    key: \"parseDataAxisCharts\",\n    value: function parseDataAxisCharts(ser) {\n      var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.ctx;\n      var cnf = this.w.config;\n      var gl = this.w.globals;\n      var dt = new DateTime(ctx);\n\n      for (var i = 0; i < ser.length; i++) {\n        this.twoDSeries = [];\n        this.twoDSeriesX = [];\n        this.threeDSeries = [];\n\n        if (typeof ser[i].data === 'undefined') {\n          console.error(\"It is a possibility that you may have not included 'data' property in series.\");\n          return;\n        }\n\n        if (cnf.chart.type === 'rangeBar' || cnf.chart.type === 'rangeArea' || ser[i].type === 'rangeBar' || ser[i].type === 'rangeArea') {\n          gl.isRangeData = true;\n          this.handleRangeData(ser, i);\n        }\n\n        if (this.isMultiFormat()) {\n          if (this.isFormat2DArray()) {\n            this.handleFormat2DArray(ser, i);\n          } else if (this.isFormatXY()) {\n            this.handleFormatXY(ser, i);\n          }\n\n          if (cnf.chart.type === 'candlestick' || ser[i].type === 'candlestick') {\n            this.handleCandleStickData(ser, i);\n          }\n\n          gl.series.push(this.twoDSeries);\n          gl.labels.push(this.twoDSeriesX);\n          gl.seriesX.push(this.twoDSeriesX);\n\n          if (!this.fallbackToCategory) {\n            gl.isXNumeric = true;\n          }\n        } else {\n          if (cnf.xaxis.type === 'datetime') {\n            // user didn't supplied [{x,y}] or [[x,y]], but single array in data.\n            // Also labels/categories were supplied differently\n            gl.isXNumeric = true;\n            var dates = cnf.labels.length > 0 ? cnf.labels.slice() : cnf.xaxis.categories.slice();\n\n            for (var j = 0; j < dates.length; j++) {\n              if (typeof dates[j] === 'string') {\n                var isDate = dt.isValidDate(dates[j]);\n\n                if (isDate) {\n                  this.twoDSeriesX.push(dt.parseDate(dates[j]));\n                } else {\n                  throw new Error('You have provided invalid Date format. Please provide a valid JavaScript Date');\n                }\n              }\n            }\n\n            gl.seriesX.push(this.twoDSeriesX);\n          } else if (cnf.xaxis.type === 'numeric') {\n            gl.isXNumeric = true;\n            var x = cnf.labels.length > 0 ? cnf.labels.slice() : cnf.xaxis.categories.slice();\n\n            if (x.length > 0) {\n              this.twoDSeriesX = x;\n              gl.seriesX.push(this.twoDSeriesX);\n            }\n          }\n\n          gl.labels.push(this.twoDSeriesX);\n          var singleArray = ser[i].data.map(function (d) {\n            return Utils.parseNumber(d);\n          });\n          gl.series.push(singleArray);\n        }\n\n        gl.seriesZ.push(this.threeDSeries);\n\n        if (ser[i].name !== undefined) {\n          gl.seriesNames.push(ser[i].name);\n        } else {\n          gl.seriesNames.push('series-' + parseInt(i + 1));\n        }\n      }\n\n      return this.w;\n    }\n  }, {\n    key: \"parseDataNonAxisCharts\",\n    value: function parseDataNonAxisCharts(ser) {\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      gl.series = ser.slice();\n      gl.seriesNames = cnf.labels.slice();\n\n      for (var i = 0; i < gl.series.length; i++) {\n        if (gl.seriesNames[i] === undefined) {\n          gl.seriesNames.push('series-' + (i + 1));\n        }\n      }\n\n      return this.w;\n    }\n    /** User possibly set string categories in xaxis.categories or labels prop\n     * Or didn't set xaxis labels at all - in which case we manually do it.\n     * If user passed series data as [[3, 2], [4, 5]] or [{ x: 3, y: 55 }],\n     * this shouldn't be called\n     * @param {array} ser - the series which user passed to the config\n     */\n\n  }, {\n    key: \"handleExternalLabelsData\",\n    value: function handleExternalLabelsData(ser) {\n      var cnf = this.w.config;\n      var gl = this.w.globals;\n\n      if (cnf.xaxis.categories.length > 0) {\n        // user provided labels in xaxis.category prop\n        gl.labels = cnf.xaxis.categories;\n      } else if (cnf.labels.length > 0) {\n        // user provided labels in labels props\n        gl.labels = cnf.labels.slice();\n      } else if (this.fallbackToCategory) {\n        // user provided labels in x prop in [{ x: 3, y: 55 }] data, and those labels are already stored in gl.labels[0], so just re-arrange the gl.labels array\n        gl.labels = gl.labels[0];\n      } else {\n        // user didn't provided any labels, fallback to 1-2-3-4-5\n        var labelArr = [];\n\n        if (gl.axisCharts) {\n          // for axis charts, we get the longest series and create labels from it\n          for (var i = 0; i < gl.series[gl.maxValsInArrayIndex].length; i++) {\n            labelArr.push(i + 1);\n          } // create gl.seriesX as it will be used in calculations of x positions\n\n\n          for (var _i = 0; _i < ser.length; _i++) {\n            gl.seriesX.push(labelArr);\n          } // turn on the isXNumeric flag to allow minX and maxX to function properly\n\n\n          gl.isXNumeric = true;\n        } // no series to pull labels from, put a 0-10 series\n        // possibly, user collapsed all series. Hence we can't work with above calc\n\n\n        if (labelArr.length === 0) {\n          labelArr = [0, 10];\n\n          for (var _i2 = 0; _i2 < ser.length; _i2++) {\n            gl.seriesX.push(labelArr);\n          }\n        } // Finally, pass the labelArr in gl.labels which will be printed on x-axis\n\n\n        gl.labels = labelArr; // Turn on this global flag to indicate no labels were provided by user\n\n        gl.noLabelsProvided = true;\n\n        if (cnf.xaxis.type === 'category') {\n          gl.isXNumeric = false;\n        }\n      }\n    } // Segregate user provided data into appropriate vars\n\n  }, {\n    key: \"parseData\",\n    value: function parseData(ser) {\n      var w = this.w;\n      var cnf = w.config;\n      var gl = w.globals;\n      this.excludeCollapsedSeriesInYAxis(); // If we detected string in X prop of series, we fallback to category x-axis\n\n      this.fallbackToCategory = false;\n      this.resetGlobals();\n      this.isMultipleY();\n\n      if (gl.axisCharts) {\n        // axisCharts includes line / area / column / scatter\n        this.parseDataAxisCharts(ser);\n      } else {\n        // non-axis charts are pie / donut\n        this.parseDataNonAxisCharts(ser);\n      }\n\n      this.coreUtils.getLargestSeries(); // set Null values to 0 in all series when user hides/shows some series\n\n      if (cnf.chart.type === 'bar' && cnf.chart.stacked) {\n        var series = new Series(this.ctx);\n        gl.series = series.setNullSeriesToZeroValues(gl.series);\n      }\n\n      this.coreUtils.getSeriesTotals();\n\n      if (gl.axisCharts) {\n        this.coreUtils.getStackedSeriesTotals();\n      }\n\n      this.coreUtils.getPercentSeries();\n\n      if (!gl.dataFormatXNumeric && (!gl.isXNumeric || cnf.xaxis.type === 'numeric' && cnf.labels.length === 0 && cnf.xaxis.categories.length === 0)) {\n        // x-axis labels couldn't be detected; hence try searching every option in config\n        this.handleExternalLabelsData(ser);\n      }\n    }\n  }, {\n    key: \"xySettings\",\n    value: function xySettings() {\n      var xyRatios = null;\n      var w = this.w;\n\n      if (w.globals.axisCharts) {\n        if (w.config.xaxis.crosshairs.position === 'back') {\n          var crosshairs = new Crosshairs(this.ctx);\n          crosshairs.drawXCrosshairs();\n        }\n\n        if (w.config.yaxis[0].crosshairs.position === 'back') {\n          var _crosshairs = new Crosshairs(this.ctx);\n\n          _crosshairs.drawYCrosshairs();\n        }\n\n        xyRatios = this.coreUtils.getCalculatedRatios();\n\n        if (w.config.xaxis.type === 'datetime' && w.config.xaxis.labels.formatter === undefined) {\n          var ts = new TimeScale(this.ctx);\n          var formattedTimeScale;\n\n          if (isFinite(w.globals.minX) && isFinite(w.globals.maxX) && !w.globals.isBarHorizontal) {\n            formattedTimeScale = ts.calculateTimeScaleTicks(w.globals.minX, w.globals.maxX);\n            ts.recalcDimensionsBasedOnFormat(formattedTimeScale, false);\n          } else if (w.globals.isBarHorizontal) {\n            formattedTimeScale = ts.calculateTimeScaleTicks(w.globals.minY, w.globals.maxY);\n            ts.recalcDimensionsBasedOnFormat(formattedTimeScale, true);\n          }\n        }\n      }\n\n      return xyRatios;\n    }\n  }, {\n    key: \"drawAxis\",\n    value: function drawAxis(type, xyRatios) {\n      var gl = this.w.globals;\n      var cnf = this.w.config;\n      var xAxis = new XAxis(this.ctx);\n      var yAxis = new YAxis(this.ctx);\n\n      if (gl.axisCharts && type !== 'radar') {\n        var elXaxis, elYaxis;\n\n        if (gl.isBarHorizontal) {\n          elYaxis = yAxis.drawYaxisInversed(0);\n          elXaxis = xAxis.drawXaxisInversed(0);\n          gl.dom.elGraphical.add(elXaxis);\n          gl.dom.elGraphical.add(elYaxis);\n        } else {\n          elXaxis = xAxis.drawXaxis();\n          gl.dom.elGraphical.add(elXaxis);\n          cnf.yaxis.map(function (yaxe, index) {\n            if (gl.ignoreYAxisIndexes.indexOf(index) === -1) {\n              elYaxis = yAxis.drawYaxis(index);\n              gl.dom.Paper.add(elYaxis);\n            }\n          });\n        }\n      }\n\n      cnf.yaxis.map(function (yaxe, index) {\n        if (gl.ignoreYAxisIndexes.indexOf(index) === -1) {\n          yAxis.yAxisTitleRotate(index, yaxe.opposite);\n        }\n      });\n    }\n  }, {\n    key: \"setupBrushHandler\",\n    value: function setupBrushHandler() {\n      var _this3 = this;\n\n      var w = this.w; // only for brush charts\n\n      if (!w.config.chart.brush.enabled) {\n        return;\n      } // if user has not defined a custom function for selection - we handle the brush chart\n      // otherwise we leave it to the user to define the functionality for selection\n\n\n      if (typeof w.config.chart.events.selection !== 'function') {\n        var targets = w.config.chart.brush.targets || [w.config.chart.brush.target]; // retro compatibility with single target option\n\n        targets.forEach(function (target) {\n          var targetChart = ApexCharts.getChartByID(target);\n          targetChart.w.globals.brushSource = _this3.ctx;\n\n          var updateSourceChart = function updateSourceChart() {\n            _this3.ctx._updateOptions({\n              chart: {\n                selection: {\n                  xaxis: {\n                    min: targetChart.w.globals.minX,\n                    max: targetChart.w.globals.maxX\n                  }\n                }\n              }\n            }, false, false);\n          };\n\n          if (typeof targetChart.w.config.chart.events.zoomed !== 'function') {\n            targetChart.w.config.chart.events.zoomed = function () {\n              updateSourceChart();\n            };\n          }\n\n          if (typeof targetChart.w.config.chart.events.scrolled !== 'function') {\n            targetChart.w.config.chart.events.scrolled = function () {\n              updateSourceChart();\n            };\n          }\n\n          w.config.chart.events.selection = function (chart, e) {\n            var yaxis = Utils.clone(w.config.yaxis);\n\n            if (w.config.chart.brush.autoScaleYaxis) {\n              var scale = new Range(targetChart);\n              yaxis = scale.autoScaleY(targetChart, e);\n            }\n\n            targetChart._updateOptions({\n              xaxis: {\n                min: e.xaxis.min,\n                max: e.xaxis.max\n              },\n              yaxis: yaxis\n            }, false, false, false);\n          };\n        });\n      }\n    }\n  }]);\n\n  return Core;\n}();\n\n/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise$1(fn) {\n  if (!(this instanceof Promise$1))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise$1._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise$1) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise$1._immediateFn(function() {\n      if (!self._handled) {\n        Promise$1._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise$1.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise$1.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise$1.prototype['finally'] = finallyConstructor;\n\nPromise$1.all = function(arr) {\n  return new Promise$1(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise$1.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise$1) {\n    return value;\n  }\n\n  return new Promise$1(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise$1.reject = function(value) {\n  return new Promise$1(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise$1.race = function(values) {\n  return new Promise$1(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise$1._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise$1._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nvar Exports =\n/*#__PURE__*/\nfunction () {\n  function Exports(ctx) {\n    _classCallCheck(this, Exports);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(Exports, [{\n    key: \"getSvgString\",\n    value: function getSvgString() {\n      return this.w.globals.dom.Paper.svg();\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      var w = this.w; // hide some elements to avoid printing them on exported svg\n\n      var xcrosshairs = w.globals.dom.baseEl.querySelector('.apexcharts-xcrosshairs');\n      var ycrosshairs = w.globals.dom.baseEl.querySelector('.apexcharts-ycrosshairs');\n\n      if (xcrosshairs) {\n        xcrosshairs.setAttribute('x', -500);\n      }\n\n      if (ycrosshairs) {\n        ycrosshairs.setAttribute('y1', -100);\n        ycrosshairs.setAttribute('y2', -100);\n      }\n    }\n  }, {\n    key: \"svgUrl\",\n    value: function svgUrl() {\n      this.cleanup();\n      var svgData = this.getSvgString();\n      var svgBlob = new Blob([svgData], {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n      return URL.createObjectURL(svgBlob);\n    }\n  }, {\n    key: \"dataURI\",\n    value: function dataURI() {\n      var _this = this;\n\n      return new Promise$1(function (resolve) {\n        var w = _this.w;\n\n        _this.cleanup();\n\n        var canvas = document.createElement('canvas');\n        canvas.width = w.globals.svgWidth;\n        canvas.height = w.globals.svgHeight;\n        var canvasBg = w.config.chart.background === 'transparent' ? '#fff' : w.config.chart.background;\n        var ctx = canvas.getContext('2d');\n        ctx.fillStyle = canvasBg;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        var DOMURL = window.URL || window.webkitURL || window;\n        var img = new Image();\n        img.crossOrigin = 'anonymous';\n\n        var svgData = _this.getSvgString();\n\n        var svgUrl = 'data:image/svg+xml,' + encodeURIComponent(svgData);\n\n        img.onload = function () {\n          ctx.drawImage(img, 0, 0);\n          DOMURL.revokeObjectURL(svgUrl);\n          var imgURI = canvas.toDataURL('image/png');\n          resolve(imgURI);\n        };\n\n        img.src = svgUrl;\n      });\n    }\n  }, {\n    key: \"exportToSVG\",\n    value: function exportToSVG() {\n      this.triggerDownload(this.svgUrl(), '.svg');\n    }\n  }, {\n    key: \"exportToPng\",\n    value: function exportToPng() {\n      var _this2 = this;\n\n      this.dataURI().then(function (imgURI) {\n        _this2.triggerDownload(imgURI, '.png');\n      });\n    }\n  }, {\n    key: \"triggerDownload\",\n    value: function triggerDownload(href, ext) {\n      var downloadLink = document.createElement('a');\n      downloadLink.href = href;\n      downloadLink.download = this.w.globals.chartID + ext;\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    }\n  }]);\n\n  return Exports;\n}();\n\n/**\n * ApexCharts Grid Class for drawing Cartesian Grid.\n *\n * @module Grid\n **/\n\nvar Grid =\n/*#__PURE__*/\nfunction () {\n  function Grid(ctx) {\n    _classCallCheck(this, Grid);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    var w = this.w;\n    this.anim = new Animations(this.ctx);\n    this.xaxisLabels = w.globals.labels.slice();\n    this.animX = w.config.grid.xaxis.lines.animate && w.config.chart.animations.enabled;\n    this.animY = w.config.grid.yaxis.lines.animate && w.config.chart.animations.enabled;\n\n    if (w.globals.timelineLabels.length > 0) {\n      //  timeline labels are there\n      this.xaxisLabels = w.globals.timelineLabels.slice();\n    }\n  } // .when using sparklines or when showing no grid, we need to have a grid area which is reused at many places for other calculations as well\n\n\n  _createClass(Grid, [{\n    key: \"drawGridArea\",\n    value: function drawGridArea() {\n      var elGrid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n\n      if (elGrid === null) {\n        elGrid = graphics.group({\n          class: 'apexcharts-grid'\n        });\n      }\n\n      var elVerticalLine = graphics.drawLine(w.globals.padHorizontal, 1, w.globals.padHorizontal, w.globals.gridHeight, 'transparent');\n      var elHorzLine = graphics.drawLine(w.globals.padHorizontal, w.globals.gridHeight, w.globals.gridWidth, w.globals.gridHeight, 'transparent');\n      elGrid.add(elHorzLine);\n      elGrid.add(elVerticalLine);\n      return elGrid;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid() {\n      var w = this.w;\n      var xAxis = new XAxis(this.ctx);\n      var yaxis = new YAxis(this.ctx);\n      var gl = this.w.globals;\n      var elgrid = null;\n\n      if (gl.axisCharts) {\n        if (w.config.grid.show) {\n          // grid is drawn after xaxis and yaxis are drawn\n          elgrid = this.renderGrid();\n          gl.dom.elGraphical.add(elgrid.el);\n          this.drawGridArea(elgrid.el);\n        } else {\n          var elgridArea = this.drawGridArea();\n          gl.dom.elGraphical.add(elgridArea);\n        }\n\n        if (elgrid !== null) {\n          xAxis.xAxisLabelCorrections(elgrid.xAxisTickWidth);\n        }\n\n        yaxis.setYAxisTextAlignments();\n      }\n    } // This mask will clip off overflowing graphics from the drawable area\n\n  }, {\n    key: \"createGridMask\",\n    value: function createGridMask() {\n      var w = this.w;\n      var gl = w.globals;\n      var graphics = new Graphics(this.ctx);\n      var strokeSize = Array.isArray(w.config.stroke.width) ? 0 : w.config.stroke.width;\n\n      if (Array.isArray(w.config.stroke.width)) {\n        var strokeMaxSize = 0;\n        w.config.stroke.width.forEach(function (m) {\n          strokeMaxSize = Math.max(strokeMaxSize, m);\n        });\n        strokeSize = strokeMaxSize;\n      }\n\n      gl.dom.elGridRectMask = document.createElementNS(gl.SVGNS, 'clipPath');\n      gl.dom.elGridRectMask.setAttribute('id', \"gridRectMask\".concat(gl.cuid));\n      gl.dom.elGridRectMarkerMask = document.createElementNS(gl.SVGNS, 'clipPath');\n      gl.dom.elGridRectMarkerMask.setAttribute('id', \"gridRectMarkerMask\".concat(gl.cuid));\n      gl.dom.elGridRect = graphics.drawRect(-strokeSize / 2, -strokeSize / 2, gl.gridWidth + strokeSize, gl.gridHeight + strokeSize, 0, '#fff');\n      var coreUtils = new CoreUtils(this);\n      coreUtils.getLargestMarkerSize();\n      var markerSize = w.globals.markers.largestSize + w.config.markers.hover.sizeOffset + 1;\n      if (markerSize < 10) markerSize = 10;\n      gl.dom.elGridRectMarker = graphics.drawRect(-markerSize * 2, -markerSize * 2, gl.gridWidth + markerSize * 4, gl.gridHeight + markerSize * 4, 0, '#fff');\n      gl.dom.elGridRectMask.appendChild(gl.dom.elGridRect.node);\n      gl.dom.elGridRectMarkerMask.appendChild(gl.dom.elGridRectMarker.node);\n      var defs = gl.dom.baseEl.querySelector('defs');\n      defs.appendChild(gl.dom.elGridRectMask);\n      defs.appendChild(gl.dom.elGridRectMarkerMask);\n    } // actual grid rendering\n\n  }, {\n    key: \"renderGrid\",\n    value: function renderGrid() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var strokeDashArray = w.config.grid.strokeDashArray;\n      var elg = graphics.group({\n        class: 'apexcharts-grid'\n      });\n      var elgridLinesH = graphics.group({\n        class: 'apexcharts-gridlines-horizontal'\n      });\n      var elgridLinesV = graphics.group({\n        class: 'apexcharts-gridlines-vertical'\n      });\n      elg.add(elgridLinesH);\n      elg.add(elgridLinesV);\n      var tickAmount = 8;\n\n      for (var i = 0; i < w.globals.series.length; i++) {\n        if (typeof w.globals.yAxisScale[i] !== 'undefined') {\n          tickAmount = w.globals.yAxisScale[i].result.length - 1;\n        }\n\n        if (tickAmount > 2) break;\n      }\n\n      var xCount;\n\n      if (!w.globals.isBarHorizontal) {\n        xCount = this.xaxisLabels.length; // draw vertical lines\n\n        if (w.config.grid.xaxis.lines.show || w.config.xaxis.axisTicks.show) {\n          var x1 = w.globals.padHorizontal;\n          var y1 = 0;\n          var x2;\n          var y2 = w.globals.gridHeight;\n\n          if (w.globals.timelineLabels.length > 0) {\n            for (var _i = 0; _i < xCount; _i++) {\n              x1 = this.xaxisLabels[_i].position;\n              x2 = this.xaxisLabels[_i].position;\n\n              if (w.config.grid.xaxis.lines.show && x1 > 0 && x1 < w.globals.gridWidth) {\n                var line = graphics.drawLine(x1, y1, x2, y2, w.config.grid.borderColor, strokeDashArray);\n                line.node.classList.add('apexcharts-gridline');\n                elgridLinesV.add(line);\n\n                if (this.animX) {\n                  this.animateLine(line, {\n                    x1: 0,\n                    x2: 0\n                  }, {\n                    x1: x1,\n                    x2: x2\n                  });\n                }\n              }\n\n              var xAxis = new XAxis(this.ctx);\n              xAxis.drawXaxisTicks(x1, elg);\n            }\n          } else {\n            var xCountForCategoryCharts = xCount;\n\n            for (var _i2 = 0; _i2 < xCountForCategoryCharts; _i2++) {\n              var x1Count = xCountForCategoryCharts;\n\n              if (w.globals.isXNumeric && w.config.chart.type !== 'bar') {\n                x1Count -= 1;\n              }\n\n              x1 = x1 + w.globals.gridWidth / x1Count;\n              x2 = x1; // skip the last line\n\n              if (_i2 === x1Count - 1) break;\n\n              if (w.config.grid.xaxis.lines.show) {\n                var _line = graphics.drawLine(x1, y1, x2, y2, w.config.grid.borderColor, strokeDashArray);\n\n                _line.node.classList.add('apexcharts-gridline');\n\n                elgridLinesV.add(_line);\n\n                if (this.animX) {\n                  this.animateLine(_line, {\n                    x1: 0,\n                    x2: 0\n                  }, {\n                    x1: x1,\n                    x2: x2\n                  });\n                }\n              }\n\n              var _xAxis = new XAxis(this.ctx);\n\n              _xAxis.drawXaxisTicks(x1, elg);\n            }\n          }\n        } // draw horizontal lines\n\n\n        if (w.config.grid.yaxis.lines.show) {\n          var _x = 0;\n          var _y = 0;\n          var _y2 = 0;\n          var _x2 = w.globals.gridWidth;\n\n          for (var _i3 = 0; _i3 < tickAmount + 1; _i3++) {\n            var _line2 = graphics.drawLine(_x, _y, _x2, _y2, w.config.grid.borderColor, strokeDashArray);\n\n            elgridLinesH.add(_line2);\n\n            _line2.node.classList.add('apexcharts-gridline');\n\n            if (this.animY) {\n              this.animateLine(_line2, {\n                y1: _y + 20,\n                y2: _y2 + 20\n              }, {\n                y1: _y,\n                y2: _y2\n              });\n            }\n\n            _y = _y + w.globals.gridHeight / tickAmount;\n            _y2 = _y;\n          }\n        }\n      } else {\n        xCount = tickAmount; // draw vertical lines\n\n        if (w.config.grid.xaxis.lines.show || w.config.xaxis.axisTicks.show) {\n          var _x3 = w.globals.padHorizontal;\n          var _y3 = 0;\n\n          var _x4;\n\n          var _y4 = w.globals.gridHeight;\n\n          for (var _i4 = 0; _i4 < xCount + 1; _i4++) {\n            _x3 = _x3 + w.globals.gridWidth / xCount + 0.3;\n            _x4 = _x3; // skip the last vertical line\n\n            if (_i4 === xCount - 1) break;\n\n            if (w.config.grid.xaxis.lines.show) {\n              var _line3 = graphics.drawLine(_x3, _y3, _x4, _y4, w.config.grid.borderColor, strokeDashArray);\n\n              _line3.node.classList.add('apexcharts-gridline');\n\n              elgridLinesV.add(_line3);\n\n              if (this.animX) {\n                this.animateLine(_line3, {\n                  x1: 0,\n                  x2: 0\n                }, {\n                  x1: _x3,\n                  x2: _x4\n                });\n              }\n            } // skip the first vertical line\n\n\n            var _xAxis2 = new XAxis(this.ctx);\n\n            _xAxis2.drawXaxisTicks(_x3, elg);\n          }\n        } // draw horizontal lines\n\n\n        if (w.config.grid.yaxis.lines.show) {\n          var _x5 = 0;\n          var _y5 = 0;\n          var _y6 = 0;\n          var _x6 = w.globals.gridWidth;\n\n          for (var _i5 = 0; _i5 < w.globals.dataPoints + 1; _i5++) {\n            var _line4 = graphics.drawLine(_x5, _y5, _x6, _y6, w.config.grid.borderColor, strokeDashArray);\n\n            elgridLinesH.add(_line4);\n\n            _line4.node.classList.add('apexcharts-gridline');\n\n            if (this.animY) {\n              this.animateLine(_line4, {\n                y1: _y5 + 20,\n                y2: _y6 + 20\n              }, {\n                y1: _y5,\n                y2: _y6\n              });\n            }\n\n            _y5 = _y5 + w.globals.gridHeight / w.globals.dataPoints;\n            _y6 = _y5;\n          }\n        }\n      }\n\n      this.drawGridBands(elg, xCount, tickAmount);\n      return {\n        el: elg,\n        xAxisTickWidth: w.globals.gridWidth / xCount\n      };\n    }\n  }, {\n    key: \"drawGridBands\",\n    value: function drawGridBands(elg, xCount, tickAmount) {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx); // rows background bands\n\n      if (w.config.grid.row.colors !== undefined && w.config.grid.row.colors.length > 0) {\n        var x1 = 0;\n        var y1 = 0;\n        var y2 = w.globals.gridHeight / tickAmount;\n        var x2 = w.globals.gridWidth;\n\n        for (var i = 0, c = 0; i < tickAmount; i++, c++) {\n          if (c >= w.config.grid.row.colors.length) {\n            c = 0;\n          }\n\n          var color = w.config.grid.row.colors[c];\n          var rect = graphics.drawRect(x1, y1, x2, y2, 0, color, w.config.grid.row.opacity);\n          elg.add(rect);\n          rect.node.classList.add('apexcharts-gridRow');\n          y1 = y1 + w.globals.gridHeight / tickAmount;\n        }\n      } // columns background bands\n\n\n      if (w.config.grid.column.colors !== undefined && w.config.grid.column.colors.length > 0) {\n        var _x7 = w.globals.padHorizontal;\n        var _y7 = 0;\n\n        var _x8 = w.globals.padHorizontal + w.globals.gridWidth / xCount;\n\n        var _y8 = w.globals.gridHeight;\n\n        for (var _i6 = 0, _c = 0; _i6 < xCount; _i6++, _c++) {\n          if (_c >= w.config.grid.column.colors.length) {\n            _c = 0;\n          }\n\n          var _color = w.config.grid.column.colors[_c];\n\n          var _rect = graphics.drawRect(_x7, _y7, _x8, _y8, 0, _color, w.config.grid.column.opacity);\n\n          _rect.node.classList.add('apexcharts-gridColumn');\n\n          elg.add(_rect);\n          _x7 = _x7 + w.globals.gridWidth / xCount;\n        }\n      }\n    }\n  }, {\n    key: \"animateLine\",\n    value: function animateLine(line, from, to) {\n      var w = this.w;\n      var initialAnim = w.config.chart.animations;\n\n      if (initialAnim && !w.globals.resized && !w.globals.dataChanged) {\n        var speed = initialAnim.speed;\n        this.anim.animateLine(line, from, to, speed);\n      }\n    }\n  }]);\n\n  return Grid;\n}();\n\n/**\n * ApexCharts Legend Class to draw legend.\n *\n * @module Legend\n **/\n\nvar Legend =\n/*#__PURE__*/\nfunction () {\n  function Legend(ctx, opts) {\n    _classCallCheck(this, Legend);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.onLegendClick = this.onLegendClick.bind(this);\n    this.onLegendHovered = this.onLegendHovered.bind(this);\n  }\n\n  _createClass(Legend, [{\n    key: \"init\",\n    value: function init() {\n      var w = this.w;\n      var gl = w.globals;\n      var cnf = w.config;\n      var showLegendAlways = cnf.legend.showForSingleSeries && gl.series.length === 1 || gl.series.length > 1;\n\n      if ((showLegendAlways || !gl.axisCharts) && cnf.legend.show) {\n        while (gl.dom.elLegendWrap.firstChild) {\n          gl.dom.elLegendWrap.removeChild(gl.dom.elLegendWrap.firstChild);\n        }\n\n        this.drawLegends();\n\n        if (!Utils.isIE11()) {\n          this.appendToForeignObject();\n        } else {\n          // IE11 doesn't supports foreignObject, hence append it to <head>\n          document.getElementsByTagName('head')[0].appendChild(this.getLegendStyles());\n        }\n\n        if (cnf.legend.position === 'bottom' || cnf.legend.position === 'top') {\n          this.legendAlignHorizontal();\n        } else if (cnf.legend.position === 'right' || cnf.legend.position === 'left') {\n          this.legendAlignVertical();\n        }\n      }\n    }\n  }, {\n    key: \"appendToForeignObject\",\n    value: function appendToForeignObject() {\n      var gl = this.w.globals;\n      var elForeign = document.createElementNS(gl.SVGNS, 'foreignObject');\n      elForeign.setAttribute('x', 0);\n      elForeign.setAttribute('y', 0);\n      elForeign.setAttribute('width', gl.svgWidth);\n      elForeign.setAttribute('height', gl.svgHeight);\n      gl.dom.elLegendWrap.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n      elForeign.appendChild(gl.dom.elLegendWrap);\n      elForeign.appendChild(this.getLegendStyles());\n      gl.dom.Paper.node.insertBefore(elForeign, gl.dom.elGraphical.node);\n    }\n  }, {\n    key: \"drawLegends\",\n    value: function drawLegends() {\n      var self = this;\n      var w = this.w;\n      var fontFamily = w.config.legend.fontFamily;\n      var legendNames = w.globals.seriesNames;\n      var fillcolor = w.globals.colors.slice();\n\n      if (w.config.chart.type === 'heatmap') {\n        var ranges = w.config.plotOptions.heatmap.colorScale.ranges;\n        legendNames = ranges.map(function (colorScale) {\n          return colorScale.name ? colorScale.name : colorScale.from + ' - ' + colorScale.to;\n        });\n        fillcolor = ranges.map(function (color) {\n          return color.color;\n        });\n      }\n\n      var legendFormatter = w.globals.legendFormatter;\n\n      for (var i = 0; i <= legendNames.length - 1; i++) {\n        var text = legendFormatter(legendNames[i], {\n          seriesIndex: i,\n          w: w\n        });\n        var collapsedSeries = false;\n        var ancillaryCollapsedSeries = false;\n\n        if (w.globals.collapsedSeries.length > 0) {\n          for (var c = 0; c < w.globals.collapsedSeries.length; c++) {\n            if (w.globals.collapsedSeries[c].index === i) {\n              collapsedSeries = true;\n            }\n          }\n        }\n\n        if (w.globals.ancillaryCollapsedSeriesIndices.length > 0) {\n          for (var _c = 0; _c < w.globals.ancillaryCollapsedSeriesIndices.length; _c++) {\n            if (w.globals.ancillaryCollapsedSeriesIndices[_c] === i) {\n              ancillaryCollapsedSeries = true;\n            }\n          }\n        }\n\n        var elMarker = document.createElement('span');\n        elMarker.classList.add('apexcharts-legend-marker');\n        var mOffsetX = w.config.legend.markers.offsetX;\n        var mOffsetY = w.config.legend.markers.offsetY;\n        var mHeight = w.config.legend.markers.height;\n        var mWidth = w.config.legend.markers.width;\n        var mBorderWidth = w.config.legend.markers.strokeWidth;\n        var mBorderColor = w.config.legend.markers.strokeColor;\n        var mBorderRadius = w.config.legend.markers.radius;\n        var mStyle = elMarker.style;\n        mStyle.background = fillcolor[i];\n        mStyle.color = fillcolor[i];\n        mStyle.height = Array.isArray(mHeight) ? parseFloat(mHeight[i]) + 'px' : parseFloat(mHeight) + 'px';\n        mStyle.width = Array.isArray(mWidth) ? parseFloat(mWidth[i]) + 'px' : parseFloat(mWidth) + 'px';\n        mStyle.left = Array.isArray(mOffsetX) ? mOffsetX[i] : mOffsetX;\n        mStyle.top = Array.isArray(mOffsetY) ? mOffsetY[i] : mOffsetY;\n        mStyle.borderWidth = Array.isArray(mBorderWidth) ? mBorderWidth[i] : mBorderWidth;\n        mStyle.borderColor = Array.isArray(mBorderColor) ? mBorderColor[i] : mBorderColor;\n        mStyle.borderRadius = Array.isArray(mBorderRadius) ? parseFloat(mBorderRadius[i]) + 'px' : parseFloat(mBorderRadius) + 'px';\n\n        if (w.config.legend.markers.customHTML) {\n          if (Array.isArray(w.config.legend.markers.customHTML)) {\n            elMarker.innerHTML = w.config.legend.markers.customHTML[i]();\n          } else {\n            elMarker.innerHTML = w.config.legend.markers.customHTML();\n          }\n        }\n\n        Graphics.setAttrs(elMarker, {\n          rel: i + 1,\n          'data:collapsed': collapsedSeries || ancillaryCollapsedSeries\n        });\n\n        if (collapsedSeries || ancillaryCollapsedSeries) {\n          elMarker.classList.add('inactive-legend');\n        }\n\n        var elLegend = document.createElement('div');\n        var elLegendText = document.createElement('span');\n        elLegendText.classList.add('apexcharts-legend-text');\n        elLegendText.innerHTML = text;\n        var textColor = w.config.legend.labels.useSeriesColors ? w.globals.colors[i] : w.config.legend.labels.colors;\n\n        if (!textColor) {\n          textColor = w.config.chart.foreColor;\n        }\n\n        elLegendText.style.color = textColor;\n        elLegendText.style.fontSize = parseFloat(w.config.legend.fontSize) + 'px';\n        elLegendText.style.fontFamily = fontFamily || w.config.chart.fontFamily;\n        Graphics.setAttrs(elLegendText, {\n          rel: i + 1,\n          'data:collapsed': collapsedSeries || ancillaryCollapsedSeries\n        });\n        elLegend.appendChild(elMarker);\n        elLegend.appendChild(elLegendText);\n        var coreUtils = new CoreUtils(this.ctx);\n\n        if (!w.config.legend.showForZeroSeries) {\n          var total = coreUtils.getSeriesTotalByIndex(i);\n\n          if (total === 0 && coreUtils.seriesHaveSameValues(i) && !coreUtils.isSeriesNull(i) && w.globals.collapsedSeriesIndices.indexOf(i) === -1 && w.globals.ancillaryCollapsedSeriesIndices.indexOf(i) === -1) {\n            elLegend.classList.add('apexcharts-hidden-zero-series');\n          }\n        }\n\n        if (!w.config.legend.showForNullSeries) {\n          if (coreUtils.isSeriesNull(i) && w.globals.collapsedSeriesIndices.indexOf(i) === -1 && w.globals.ancillaryCollapsedSeriesIndices.indexOf(i) === -1) {\n            elLegend.classList.add('apexcharts-hidden-null-series');\n          }\n        }\n\n        w.globals.dom.elLegendWrap.appendChild(elLegend);\n        w.globals.dom.elLegendWrap.classList.add(w.config.legend.horizontalAlign); // w.globals.dom.elLegendWrap.classList.add(w.config.legend.verticalAlign)\n\n        w.globals.dom.elLegendWrap.classList.add('position-' + w.config.legend.position);\n        elLegend.classList.add('apexcharts-legend-series');\n        elLegend.style.margin = \"\".concat(w.config.legend.itemMargin.horizontal, \"px \").concat(w.config.legend.itemMargin.vertical, \"px\");\n        w.globals.dom.elLegendWrap.style.width = w.config.legend.width ? w.config.legend.width + 'px' : '';\n        w.globals.dom.elLegendWrap.style.height = w.config.legend.height ? w.config.legend.height + 'px' : '';\n        Graphics.setAttrs(elLegend, {\n          rel: i + 1,\n          'data:collapsed': collapsedSeries || ancillaryCollapsedSeries\n        });\n\n        if (collapsedSeries || ancillaryCollapsedSeries) {\n          elLegend.classList.add('inactive-legend');\n        }\n\n        if (!w.config.legend.onItemClick.toggleDataSeries) {\n          elLegend.classList.add('no-click');\n        }\n      } // for now - just prevent click on heatmap legend - and allow hover only\n\n\n      var clickAllowed = w.config.chart.type !== 'heatmap';\n\n      if (clickAllowed && w.config.legend.onItemClick.toggleDataSeries) {\n        w.globals.dom.elWrap.addEventListener('click', self.onLegendClick, true);\n      }\n\n      if (w.config.legend.onItemHover.highlightDataSeries) {\n        w.globals.dom.elWrap.addEventListener('mousemove', self.onLegendHovered, true);\n        w.globals.dom.elWrap.addEventListener('mouseout', self.onLegendHovered, true);\n      }\n    }\n  }, {\n    key: \"getLegendBBox\",\n    value: function getLegendBBox() {\n      var w = this.w;\n      var currLegendsWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');\n      var currLegendsWrapRect = currLegendsWrap.getBoundingClientRect();\n      var currLegendsWrapWidth = currLegendsWrapRect.width;\n      var currLegendsWrapHeight = currLegendsWrapRect.height;\n      return {\n        clwh: currLegendsWrapHeight,\n        clww: currLegendsWrapWidth\n      };\n    }\n  }, {\n    key: \"setLegendWrapXY\",\n    value: function setLegendWrapXY(offsetX, offsetY) {\n      var w = this.w;\n      var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');\n      var legendRect = elLegendWrap.getBoundingClientRect();\n      var x = 0;\n      var y = 0;\n\n      if (w.config.legend.position === 'bottom') {\n        y = y + (w.globals.svgHeight - legendRect.height / 2);\n      } else if (w.config.legend.position === 'top') {\n        var dim = new Dimensions(this.ctx);\n        var titleH = dim.getTitleSubtitleCoords('title').height;\n        var subtitleH = dim.getTitleSubtitleCoords('subtitle').height;\n        y = y + (titleH > 0 ? titleH - 10 : 0) + (subtitleH > 0 ? subtitleH - 10 : 0);\n      }\n\n      elLegendWrap.style.position = 'absolute';\n      x = x + offsetX + w.config.legend.offsetX;\n      y = y + offsetY + w.config.legend.offsetY;\n      elLegendWrap.style.left = x + 'px';\n      elLegendWrap.style.top = y + 'px';\n\n      if (w.config.legend.position === 'bottom') {\n        elLegendWrap.style.top = 'auto';\n        elLegendWrap.style.bottom = 10 + w.config.legend.offsetY + 'px';\n      } else if (w.config.legend.position === 'right') {\n        elLegendWrap.style.left = 'auto';\n        elLegendWrap.style.right = 25 + w.config.legend.offsetX + 'px';\n      }\n\n      if (elLegendWrap.style.width) {\n        elLegendWrap.style.width = parseInt(w.config.legend.width) + 'px';\n      }\n\n      if (elLegendWrap.style.height) {\n        elLegendWrap.style.height = parseInt(w.config.legend.height) + 'px';\n      }\n    }\n  }, {\n    key: \"legendAlignHorizontal\",\n    value: function legendAlignHorizontal() {\n      var w = this.w;\n      var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');\n      elLegendWrap.style.right = 0;\n      var lRect = this.getLegendBBox();\n      var dimensions = new Dimensions(this.ctx);\n      var titleRect = dimensions.getTitleSubtitleCoords('title');\n      var subtitleRect = dimensions.getTitleSubtitleCoords('subtitle');\n      var offsetX = 20;\n      var offsetY = 0; // the whole legend box is set to bottom\n\n      if (w.config.legend.position === 'bottom') {\n        offsetY = -lRect.clwh / 1.8;\n      } else if (w.config.legend.position === 'top') {\n        offsetY = titleRect.height + subtitleRect.height + w.config.title.margin + w.config.subtitle.margin - 15;\n      }\n\n      this.setLegendWrapXY(offsetX, offsetY);\n    }\n  }, {\n    key: \"legendAlignVertical\",\n    value: function legendAlignVertical() {\n      var w = this.w;\n      var lRect = this.getLegendBBox();\n      var offsetY = 20;\n      var offsetX = 0;\n\n      if (w.config.legend.position === 'left') {\n        offsetX = 20;\n      }\n\n      if (w.config.legend.position === 'right') {\n        offsetX = w.globals.svgWidth - lRect.clww - 10;\n      }\n\n      this.setLegendWrapXY(offsetX, offsetY);\n    }\n  }, {\n    key: \"onLegendHovered\",\n    value: function onLegendHovered(e) {\n      var w = this.w;\n      var hoverOverLegend = e.target.classList.contains('apexcharts-legend-text') || e.target.classList.contains('apexcharts-legend-marker');\n\n      if (w.config.chart.type !== 'heatmap') {\n        if (!e.target.classList.contains('inactive-legend') && hoverOverLegend) {\n          var series = new Series(this.ctx);\n          series.toggleSeriesOnHover(e, e.target);\n        }\n      } else {\n        // for heatmap handling\n        if (hoverOverLegend) {\n          var seriesCnt = parseInt(e.target.getAttribute('rel')) - 1;\n          this.ctx.fireEvent('legendHover', [this.ctx, seriesCnt, this.w]);\n\n          var _series = new Series(this.ctx);\n\n          _series.highlightRangeInSeries(e, e.target);\n        }\n      }\n    }\n  }, {\n    key: \"onLegendClick\",\n    value: function onLegendClick(e) {\n      if (e.target.classList.contains('apexcharts-legend-text') || e.target.classList.contains('apexcharts-legend-marker')) {\n        var seriesCnt = parseInt(e.target.getAttribute('rel')) - 1;\n        var isHidden = e.target.getAttribute('data:collapsed') === 'true';\n        var legendClick = this.w.config.chart.events.legendClick;\n\n        if (typeof legendClick === 'function') {\n          legendClick(this.ctx, seriesCnt, this.w);\n        }\n\n        this.ctx.fireEvent('legendClick', [this.ctx, seriesCnt, this.w]);\n        var markerClick = this.w.config.legend.markers.onClick;\n\n        if (typeof markerClick === 'function' && e.target.classList.contains('apexcharts-legend-marker')) {\n          markerClick(this.ctx, seriesCnt, this.w);\n          this.ctx.fireEvent('legendMarkerClick', [this.ctx, seriesCnt, this.w]);\n        }\n\n        this.toggleDataSeries(seriesCnt, isHidden);\n      }\n    }\n  }, {\n    key: \"getLegendStyles\",\n    value: function getLegendStyles() {\n      var stylesheet = document.createElement('style');\n      stylesheet.setAttribute('type', 'text/css');\n      var text = \"\\n    \\n      .apexcharts-legend {\\n        display: flex;\\n        overflow: auto;\\n        padding: 0 10px;\\n      }\\n\\n      .apexcharts-legend.position-bottom, .apexcharts-legend.position-top {\\n        flex-wrap: wrap\\n      }\\n      .apexcharts-legend.position-right, .apexcharts-legend.position-left {\\n        flex-direction: column;\\n        bottom: 0;\\n      }\\n\\n      .apexcharts-legend.position-bottom.left, .apexcharts-legend.position-top.left, .apexcharts-legend.position-right, .apexcharts-legend.position-left {\\n        justify-content: flex-start;\\n      }\\n\\n      .apexcharts-legend.position-bottom.center, .apexcharts-legend.position-top.center {\\n        justify-content: center;  \\n      }\\n\\n      .apexcharts-legend.position-bottom.right, .apexcharts-legend.position-top.right {\\n        justify-content: flex-end;\\n      }\\n\\n      .apexcharts-legend-series {\\n        cursor: pointer;\\n        line-height: normal;\\n      }\\n\\n      .apexcharts-legend.position-bottom .apexcharts-legend-series, .apexcharts-legend.position-top .apexcharts-legend-series{\\n        display: flex;\\n        align-items: center;\\n      }\\n\\n      .apexcharts-legend-text {\\n        position: relative;\\n        font-size: 14px;\\n      }\\n\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\n        pointer-events: none;\\n      }\\n\\n      .apexcharts-legend-marker {\\n        position: relative;\\n        display: inline-block;\\n        cursor: pointer;\\n        margin-right: 3px;\\n      }\\n      \\n      .apexcharts-legend.right .apexcharts-legend-series, .apexcharts-legend.left .apexcharts-legend-series{\\n        display: inline-block;\\n      }\\n\\n      .apexcharts-legend-series.no-click {\\n        cursor: auto;\\n      }\\n\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\n        display: none !important;\\n      }\\n\\n      .inactive-legend {\\n        opacity: 0.45;\\n      }\";\n      var rules = document.createTextNode(text);\n      stylesheet.appendChild(rules);\n      return stylesheet;\n    }\n  }, {\n    key: \"resetToggleDataSeries\",\n    value: function resetToggleDataSeries() {\n      var w = this.w;\n      var seriesEls = null;\n      var realIndexes = [];\n\n      if (w.globals.axisCharts) {\n        seriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:realIndex]\");\n        seriesEls = Utils.listToArray(seriesEls);\n        seriesEls.forEach(function (v) {\n          realIndexes.push(parseInt(v.getAttribute('data:realIndex')));\n        });\n      } else {\n        seriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[rel]\");\n        seriesEls = Utils.listToArray(seriesEls);\n        seriesEls.forEach(function (v) {\n          realIndexes.push(parseInt(v.getAttribute('rel')) - 1);\n        });\n      }\n\n      realIndexes.sort();\n\n      if (w.globals.collapsedSeries.length > 0) {\n        var risingSeries = w.globals.risingSeries.slice();\n        var series = w.config.series.slice();\n\n        for (var c = 0; c < w.globals.collapsedSeries.length; c++) {\n          var index = realIndexes.indexOf(w.globals.collapsedSeries[c].index);\n\n          if (index !== -1) {\n            if (w.globals.axisCharts) {\n              series[index].data = w.globals.collapsedSeries.slice()[c].data.slice();\n            } else {\n              series[index] = w.globals.collapsedSeries.slice()[c].data;\n            }\n\n            risingSeries.push(index);\n          }\n        }\n\n        w.globals.collapsedSeries = [];\n        w.globals.ancillaryCollapsedSeries = [];\n        w.globals.collapsedSeriesIndices = [];\n        w.globals.ancillaryCollapsedSeriesIndices = [];\n        w.globals.risingSeries = risingSeries;\n        w.config.series = series;\n\n        this.ctx._updateSeries(w.config.series, w.config.chart.animations.dynamicAnimation.enabled);\n      }\n    }\n  }, {\n    key: \"toggleDataSeries\",\n    value: function toggleDataSeries(seriesCnt, isHidden) {\n      var w = this.w;\n\n      if (w.globals.axisCharts || w.config.chart.type === 'radialBar') {\n        w.globals.resized = true; // we don't want initial animations again\n\n        var seriesEl = null;\n        var realIndex = null; // yes, make it null. 1 series will rise at a time\n\n        w.globals.risingSeries = [];\n\n        if (w.globals.axisCharts) {\n          seriesEl = w.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(seriesCnt, \"']\"));\n          realIndex = parseInt(seriesEl.getAttribute('data:realIndex'));\n        } else {\n          seriesEl = w.globals.dom.baseEl.querySelector(\".apexcharts-series[rel='\".concat(seriesCnt + 1, \"']\"));\n          realIndex = parseInt(seriesEl.getAttribute('rel')) - 1;\n        }\n\n        if (isHidden) {\n          this.riseCollapsedSeries(w.globals.collapsedSeries, w.globals.collapsedSeriesIndices, realIndex);\n          this.riseCollapsedSeries(w.globals.ancillaryCollapsedSeries, w.globals.ancillaryCollapsedSeriesIndices, realIndex);\n        } else {\n          if (w.globals.axisCharts) {\n            var shouldNotHideYAxis = false;\n\n            if (w.config.yaxis[realIndex] && w.config.yaxis[realIndex].show && w.config.yaxis[realIndex].showAlways) {\n              shouldNotHideYAxis = true;\n\n              if (w.globals.ancillaryCollapsedSeriesIndices.indexOf(realIndex) < 0) {\n                w.globals.ancillaryCollapsedSeries.push({\n                  index: realIndex,\n                  data: w.config.series[realIndex].data.slice(),\n                  type: seriesEl.parentNode.className.baseVal.split('-')[1]\n                });\n                w.globals.ancillaryCollapsedSeriesIndices.push(realIndex);\n              }\n            }\n\n            if (!shouldNotHideYAxis) {\n              w.globals.collapsedSeries.push({\n                index: realIndex,\n                data: w.config.series[realIndex].data.slice(),\n                type: seriesEl.parentNode.className.baseVal.split('-')[1]\n              });\n              w.globals.collapsedSeriesIndices.push(realIndex);\n              var removeIndexOfRising = w.globals.risingSeries.indexOf(realIndex);\n              w.globals.risingSeries.splice(removeIndexOfRising, 1);\n            } // TODO: AVOID mutating the user's config object below\n\n\n            w.config.series[realIndex].data = [];\n          } else {\n            w.globals.collapsedSeries.push({\n              index: realIndex,\n              data: w.config.series[realIndex]\n            });\n            w.globals.collapsedSeriesIndices.push(realIndex);\n            w.config.series[realIndex] = 0;\n          }\n\n          var seriesChildren = seriesEl.childNodes;\n\n          for (var sc = 0; sc < seriesChildren.length; sc++) {\n            if (seriesChildren[sc].classList.contains('apexcharts-series-markers-wrap')) {\n              if (seriesChildren[sc].classList.contains('apexcharts-hide')) {\n                seriesChildren[sc].classList.remove('apexcharts-hide');\n              } else {\n                seriesChildren[sc].classList.add('apexcharts-hide');\n              }\n            }\n          }\n\n          w.globals.allSeriesCollapsed = w.globals.collapsedSeries.length === w.globals.series.length;\n\n          this.ctx._updateSeries(w.config.series, w.config.chart.animations.dynamicAnimation.enabled);\n        }\n      } else {\n        // for non-axis charts i.e pie / donuts\n        var _seriesEl = w.globals.dom.Paper.select(\" .apexcharts-series[rel='\".concat(seriesCnt + 1, \"'] path\"));\n\n        _seriesEl.fire('click');\n      }\n    }\n  }, {\n    key: \"riseCollapsedSeries\",\n    value: function riseCollapsedSeries(series, seriesIndices, realIndex) {\n      var w = this.w;\n\n      if (series.length > 0) {\n        for (var c = 0; c < series.length; c++) {\n          if (series[c].index === realIndex) {\n            if (w.globals.axisCharts) {\n              w.config.series[realIndex].data = series[c].data.slice();\n              series.splice(c, 1);\n              seriesIndices.splice(c, 1);\n              w.globals.risingSeries.push(realIndex);\n            } else {\n              w.config.series[realIndex] = series[c].data;\n              series.splice(c, 1);\n              seriesIndices.splice(c, 1);\n              w.globals.risingSeries.push(realIndex);\n            }\n\n            this.ctx._updateSeries(w.config.series, w.config.chart.animations.dynamicAnimation.enabled);\n          }\n        }\n      }\n    }\n  }]);\n\n  return Legend;\n}();\n\n/**\n * ApexCharts Responsive Class to override options for different screen sizes.\n *\n * @module Responsive\n **/\n\nvar Responsive =\n/*#__PURE__*/\nfunction () {\n  function Responsive(ctx) {\n    _classCallCheck(this, Responsive);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  } // the opts parameter if not null has to be set overriding everything\n  // as the opts is set by user externally\n\n\n  _createClass(Responsive, [{\n    key: \"checkResponsiveConfig\",\n    value: function checkResponsiveConfig(opts) {\n      var _this = this;\n\n      var w = this.w;\n      var cnf = w.config; // check if responsive config exists\n\n      if (cnf.responsive.length === 0) return;\n      var res = cnf.responsive.slice();\n      res.sort(function (a, b) {\n        return a.breakpoint > b.breakpoint ? 1 : b.breakpoint > a.breakpoint ? -1 : 0;\n      }).reverse();\n      var config = new Config({});\n\n      var iterateResponsiveOptions = function iterateResponsiveOptions() {\n        var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var largestBreakpoint = res[0].breakpoint;\n        var width = window.innerWidth > 0 ? window.innerWidth : screen.width;\n\n        if (width > largestBreakpoint) {\n          var options = CoreUtils.extendArrayProps(config, w.globals.initialConfig);\n          newOptions = Utils.extend(options, newOptions);\n          newOptions = Utils.extend(w.config, newOptions);\n\n          _this.overrideResponsiveOptions(newOptions);\n        } else {\n          for (var i = 0; i < res.length; i++) {\n            if (width < res[i].breakpoint) {\n              newOptions = CoreUtils.extendArrayProps(config, res[i].options);\n              newOptions = Utils.extend(w.config, newOptions);\n\n              _this.overrideResponsiveOptions(newOptions);\n            }\n          }\n        }\n      };\n\n      if (opts) {\n        var options = CoreUtils.extendArrayProps(config, opts);\n        options = Utils.extend(w.config, options);\n        options = Utils.extend(options, opts);\n        iterateResponsiveOptions(options);\n      } else {\n        iterateResponsiveOptions({});\n      }\n    }\n  }, {\n    key: \"overrideResponsiveOptions\",\n    value: function overrideResponsiveOptions(newOptions) {\n      var newConfig = new Config(newOptions).init();\n      this.w.config = newConfig;\n    }\n  }]);\n\n  return Responsive;\n}();\n\n/**\n * ApexCharts Theme Class for setting the colors and palettes.\n *\n * @module Theme\n **/\n\nvar Theme =\n/*#__PURE__*/\nfunction () {\n  function Theme(ctx) {\n    _classCallCheck(this, Theme);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.colors = [];\n  }\n\n  _createClass(Theme, [{\n    key: \"init\",\n    value: function init() {\n      this.setDefaultColors();\n    }\n  }, {\n    key: \"setDefaultColors\",\n    value: function setDefaultColors() {\n      var w = this.w;\n      var utils = new Utils();\n      w.globals.dom.elWrap.classList.add(w.config.theme.mode);\n\n      if (w.config.colors === undefined) {\n        w.globals.colors = this.predefined();\n      } else {\n        w.globals.colors = w.config.colors;\n      }\n\n      if (w.config.theme.monochrome.enabled) {\n        var monoArr = [];\n        var glsCnt = w.globals.series.length;\n\n        if (w.config.plotOptions.bar.distributed && w.config.chart.type === 'bar') {\n          glsCnt = w.globals.series[0].length * w.globals.series.length;\n        }\n\n        var mainColor = w.config.theme.monochrome.color;\n        var part = 1 / (glsCnt / w.config.theme.monochrome.shadeIntensity);\n        var shade = w.config.theme.monochrome.shadeTo;\n        var percent = 0;\n\n        for (var gsl = 0; gsl < glsCnt; gsl++) {\n          var newColor = void 0;\n\n          if (shade === 'dark') {\n            newColor = utils.shadeColor(percent * -1, mainColor);\n            percent = percent + part;\n          } else {\n            newColor = utils.shadeColor(percent, mainColor);\n            percent = percent + part;\n          }\n\n          monoArr.push(newColor);\n        }\n\n        w.globals.colors = monoArr.slice();\n      }\n\n      var defaultColors = w.globals.colors.slice(); // if user specfied less colors than no. of series, push the same colors again\n\n      this.pushExtraColors(w.globals.colors); // The Border colors\n\n      if (w.config.stroke.colors === undefined) {\n        w.globals.stroke.colors = defaultColors;\n      } else {\n        w.globals.stroke.colors = w.config.stroke.colors;\n      }\n\n      this.pushExtraColors(w.globals.stroke.colors); // The FILL colors\n\n      if (w.config.fill.colors === undefined) {\n        w.globals.fill.colors = defaultColors;\n      } else {\n        w.globals.fill.colors = w.config.fill.colors;\n      }\n\n      this.pushExtraColors(w.globals.fill.colors);\n\n      if (w.config.dataLabels.style.colors === undefined) {\n        w.globals.dataLabels.style.colors = defaultColors;\n      } else {\n        w.globals.dataLabels.style.colors = w.config.dataLabels.style.colors;\n      }\n\n      this.pushExtraColors(w.globals.dataLabels.style.colors, 50);\n\n      if (w.config.plotOptions.radar.polygons.fill.colors === undefined) {\n        w.globals.radarPolygons.fill.colors = ['#fff'];\n      } else {\n        w.globals.radarPolygons.fill.colors = w.config.plotOptions.radar.polygons.fill.colors;\n      }\n\n      this.pushExtraColors(w.globals.radarPolygons.fill.colors, 20); // The point colors\n\n      if (w.config.markers.colors === undefined) {\n        w.globals.markers.colors = defaultColors;\n      } else {\n        w.globals.markers.colors = w.config.markers.colors;\n      }\n\n      this.pushExtraColors(w.globals.markers.colors);\n    } // When the number of colors provided is less than the number of series, this method\n    // will push same colors to the list\n    // params:\n    // distributed is only valid for distributed column/bar charts\n\n  }, {\n    key: \"pushExtraColors\",\n    value: function pushExtraColors(colorSeries, length) {\n      var distributed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var w = this.w;\n      var len = length || w.globals.series.length;\n\n      if (distributed === null) {\n        distributed = w.config.chart.type === 'bar' && w.config.plotOptions.bar.distributed || w.config.chart.type === 'heatmap' && w.config.plotOptions.heatmap.colorScale.inverse;\n      }\n\n      if (distributed) {\n        len = w.globals.series[0].length * w.globals.series.length;\n      }\n\n      if (colorSeries.length < len) {\n        var diff = len - colorSeries.length;\n\n        for (var i = 0; i < diff; i++) {\n          colorSeries.push(colorSeries[i]);\n        }\n      }\n    }\n  }, {\n    key: \"updateThemeOptions\",\n    value: function updateThemeOptions(options) {\n      options.chart = options.chart || {};\n      options.tooltip = options.tooltip || {};\n      var mode = options.theme.mode || 'light';\n      var palette = options.theme.palette ? options.theme.palette : mode === 'dark' ? 'palette4' : 'palette1';\n      var foreColor = options.chart.foreColor ? options.chart.foreColor : mode === 'dark' ? '#f6f7f8' : '#373d3f';\n      options.tooltip.theme = mode;\n      options.chart.foreColor = foreColor;\n      options.theme.palette = palette;\n      return options;\n    }\n  }, {\n    key: \"predefined\",\n    value: function predefined() {\n      var palette = this.w.config.theme.palette; // D6E3F8, FCEFEF, DCE0D9, A5978B, EDDDD4, D6E3F8, FEF5EF\n\n      switch (palette) {\n        case 'palette1':\n          this.colors = ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0'];\n          break;\n\n        case 'palette2':\n          this.colors = ['#3f51b5', '#03a9f4', '#4caf50', '#f9ce1d', '#FF9800'];\n          break;\n\n        case 'palette3':\n          this.colors = ['#33b2df', '#546E7A', '#d4526e', '#13d8aa', '#A5978B'];\n          break;\n\n        case 'palette4':\n          this.colors = ['#4ecdc4', '#c7f464', '#81D4FA', '#fd6a6a', '#546E7A'];\n          break;\n\n        case 'palette5':\n          this.colors = ['#2b908f', '#f9a3a4', '#90ee7e', '#fa4443', '#69d2e7'];\n          break;\n\n        case 'palette6':\n          this.colors = ['#449DD1', '#F86624', '#EA3546', '#662E9B', '#C5D86D'];\n          break;\n\n        case 'palette7':\n          this.colors = ['#D7263D', '#1B998B', '#2E294E', '#F46036', '#E2C044'];\n          break;\n\n        case 'palette8':\n          this.colors = ['#662E9B', '#F86624', '#F9C80E', '#EA3546', '#43BCCD'];\n          break;\n\n        case 'palette9':\n          this.colors = ['#5C4742', '#A5978B', '#8D5B4C', '#5A2A27', '#C4BBAF'];\n          break;\n\n        case 'palette10':\n          this.colors = ['#A300D6', '#7D02EB', '#5653FE', '#2983FF', '#00B1F2'];\n          break;\n\n        default:\n          this.colors = ['#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0'];\n          break;\n      }\n\n      return this.colors;\n    }\n  }]);\n\n  return Theme;\n}();\n\nvar Utils$1 =\n/*#__PURE__*/\nfunction () {\n  function Utils(tooltipContext) {\n    _classCallCheck(this, Utils);\n\n    this.w = tooltipContext.w;\n    this.ttCtx = tooltipContext;\n    this.ctx = tooltipContext.ctx;\n  }\n  /**\n   ** When hovering over series, you need to capture which series is being hovered on.\n   ** This function will return both capturedseries index as well as inner index of that series\n   * @memberof Utils\n   * @param {object}\n   * - hoverArea = the rect on which user hovers\n   * - elGrid = dimensions of the hover rect (it can be different than hoverarea)\n   */\n\n\n  _createClass(Utils, [{\n    key: \"getNearestValues\",\n    value: function getNearestValues(_ref) {\n      var hoverArea = _ref.hoverArea,\n          elGrid = _ref.elGrid,\n          clientX = _ref.clientX,\n          clientY = _ref.clientY,\n          hasBars = _ref.hasBars;\n      var w = this.w;\n      var hoverWidth = w.globals.gridWidth;\n      var xDivisor = hoverWidth / (w.globals.dataPoints - 1);\n      var seriesBound = elGrid.getBoundingClientRect();\n\n      if (hasBars && w.globals.comboCharts || hasBars) {\n        xDivisor = hoverWidth / w.globals.dataPoints;\n      }\n\n      var hoverX = clientX - seriesBound.left;\n      var hoverY = clientY - seriesBound.top;\n      var inRect = hoverX < 0 || hoverY < 0 || hoverX > w.globals.gridWidth || hoverY > w.globals.gridHeight;\n\n      if (inRect) {\n        hoverArea.classList.remove('hovering-zoom');\n        hoverArea.classList.remove('hovering-pan');\n      } else {\n        if (w.globals.zoomEnabled) {\n          hoverArea.classList.remove('hovering-pan');\n          hoverArea.classList.add('hovering-zoom');\n        } else if (w.globals.panEnabled) {\n          hoverArea.classList.remove('hovering-zoom');\n          hoverArea.classList.add('hovering-pan');\n        }\n      }\n\n      var j = Math.round(hoverX / xDivisor);\n\n      if (hasBars) {\n        j = Math.ceil(hoverX / xDivisor);\n        j = j - 1;\n      }\n\n      var capturedSeries = null;\n      var closest = null;\n      var seriesXValArr = [];\n      var seriesYValArr = [];\n\n      for (var s = 0; s < w.globals.seriesXvalues.length; s++) {\n        seriesXValArr.push([w.globals.seriesXvalues[s][0] - 0.000001].concat(w.globals.seriesXvalues[s]));\n      }\n\n      seriesXValArr = seriesXValArr.map(function (seriesXVal) {\n        return seriesXVal.filter(function (s) {\n          return s;\n        });\n      });\n      seriesYValArr = w.globals.seriesYvalues.map(function (seriesYVal) {\n        return seriesYVal.filter(function (s) {\n          return s;\n        });\n      }); // if X axis type is not category and tooltip is not shared, then we need to find the cursor position and get the nearest value\n\n      if (w.globals.isXNumeric) {\n        closest = this.closestInMultiArray(hoverX, hoverY, seriesXValArr, seriesYValArr);\n        capturedSeries = closest.index;\n        j = closest.j;\n\n        if (capturedSeries !== null) {\n          // initial push, it should be a little smaller than the 1st val\n          seriesXValArr = w.globals.seriesXvalues[capturedSeries];\n          closest = this.closestInArray(hoverX, seriesXValArr);\n          j = closest.index;\n        }\n      }\n\n      if (!j || j < 1) j = 0;\n      return {\n        capturedSeries: capturedSeries,\n        j: j,\n        hoverX: hoverX,\n        hoverY: hoverY\n      };\n    }\n  }, {\n    key: \"closestInMultiArray\",\n    value: function closestInMultiArray(hoverX, hoverY, Xarrays, Yarrays) {\n      var w = this.w;\n      var activeIndex = 0;\n      var currIndex = null;\n      var j = -1;\n\n      if (w.globals.series.length > 1) {\n        activeIndex = this.getFirstActiveXArray(Xarrays);\n      } else {\n        currIndex = 0;\n      }\n\n      var currY = Yarrays[activeIndex][0];\n      var currX = Xarrays[activeIndex][0];\n      var diffX = Math.abs(hoverX - currX);\n      var diffY = Math.abs(hoverY - currY);\n      var diff = diffY + diffX;\n      Yarrays.map(function (arrY, arrIndex) {\n        arrY.map(function (y, innerKey) {\n          var newdiffY = Math.abs(hoverY - Yarrays[arrIndex][innerKey]);\n          var newdiffX = Math.abs(hoverX - Xarrays[arrIndex][innerKey]);\n          var newdiff = newdiffX + newdiffY;\n\n          if (newdiff < diff) {\n            diff = newdiff;\n            diffX = newdiffX;\n            diffY = newdiffY;\n            currIndex = arrIndex;\n            j = innerKey;\n          }\n        });\n      });\n      return {\n        index: currIndex,\n        j: j\n      };\n    }\n  }, {\n    key: \"getFirstActiveXArray\",\n    value: function getFirstActiveXArray(Xarrays) {\n      var activeIndex = 0;\n      var coreUtils = new CoreUtils(this.ctx);\n      var firstActiveSeriesIndex = Xarrays.map(function (xarr, index) {\n        if (xarr.length > 0) {\n          return index;\n        } else {\n          return -1;\n        }\n      });\n\n      for (var a = 0; a < firstActiveSeriesIndex.length; a++) {\n        var total = coreUtils.getSeriesTotalByIndex(a);\n\n        if (firstActiveSeriesIndex[a] !== -1 && total !== 0 && !coreUtils.seriesHaveSameValues(a)) {\n          activeIndex = firstActiveSeriesIndex[a];\n          break;\n        }\n      }\n\n      return activeIndex;\n    }\n  }, {\n    key: \"closestInArray\",\n    value: function closestInArray(val, arr) {\n      var curr = arr[0];\n      var currIndex = null;\n      var diff = Math.abs(val - curr);\n\n      for (var i = 0; i < arr.length; i++) {\n        var newdiff = Math.abs(val - arr[i]);\n\n        if (newdiff < diff) {\n          diff = newdiff;\n          curr = arr[i];\n          currIndex = i;\n        }\n      }\n\n      return {\n        index: currIndex\n      };\n    }\n    /**\n     * When there are multiple series, it is possible to have different x values for each series.\n     * But it may be possible in those multiple series, that there is same x value for 2 or more\n     * series.\n     * @memberof Utils\n     * @param {int}\n     * - j = is the inner index of series -> (series[i][j])\n     * @return {bool}\n     */\n\n  }, {\n    key: \"isXoverlap\",\n    value: function isXoverlap(j) {\n      var w = this.w;\n      var xSameForAllSeriesJArr = [];\n      var seriesX = w.globals.seriesX.filter(function (s) {\n        return typeof s[0] !== 'undefined';\n      });\n\n      if (seriesX.length > 0) {\n        for (var i = 0; i < seriesX.length - 1; i++) {\n          if (typeof seriesX[i][j] !== 'undefined' && typeof seriesX[i + 1][j] !== 'undefined') {\n            if (seriesX[i][j] !== seriesX[i + 1][j]) {\n              xSameForAllSeriesJArr.push('unEqual');\n            }\n          }\n        }\n      }\n\n      if (xSameForAllSeriesJArr.length === 0) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isinitialSeriesSameLen\",\n    value: function isinitialSeriesSameLen() {\n      var sameLen = true;\n      var initialSeries = this.w.globals.initialSeries;\n\n      for (var i = 0; i < initialSeries.length - 1; i++) {\n        if (initialSeries[i].data.length !== initialSeries[i + 1].data.length) {\n          sameLen = false;\n          break;\n        }\n      }\n\n      return sameLen;\n    }\n  }, {\n    key: \"getBarsHeight\",\n    value: function getBarsHeight(allbars) {\n      var bars = _toConsumableArray(allbars);\n\n      var totalHeight = bars.reduce(function (acc, bar) {\n        return acc + bar.getBBox().height;\n      }, 0);\n      return totalHeight;\n    }\n  }, {\n    key: \"toggleAllTooltipSeriesGroups\",\n    value: function toggleAllTooltipSeriesGroups(state) {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n\n      if (ttCtx.allTooltipSeriesGroups.length === 0) {\n        ttCtx.allTooltipSeriesGroups = w.globals.dom.baseEl.querySelectorAll('.apexcharts-tooltip-series-group');\n      }\n\n      var allTooltipSeriesGroups = ttCtx.allTooltipSeriesGroups;\n\n      for (var i = 0; i < allTooltipSeriesGroups.length; i++) {\n        if (state === 'enable') {\n          allTooltipSeriesGroups[i].classList.add('active');\n          allTooltipSeriesGroups[i].style.display = w.config.tooltip.items.display;\n        } else {\n          allTooltipSeriesGroups[i].classList.remove('active');\n          allTooltipSeriesGroups[i].style.display = 'none';\n        }\n      }\n    }\n  }]);\n\n  return Utils;\n}();\n\n/**\n * ApexCharts Tooltip.Labels Class to draw texts on the tooltip.\n *\n * @module Tooltip.Labels\n **/\n\nvar Labels =\n/*#__PURE__*/\nfunction () {\n  function Labels(tooltipContext) {\n    _classCallCheck(this, Labels);\n\n    this.w = tooltipContext.w;\n    this.ctx = tooltipContext.ctx;\n    this.ttCtx = tooltipContext;\n    this.tooltipUtil = new Utils$1(tooltipContext);\n  }\n\n  _createClass(Labels, [{\n    key: \"drawSeriesTexts\",\n    value: function drawSeriesTexts(_ref) {\n      var _ref$shared = _ref.shared,\n          shared = _ref$shared === void 0 ? true : _ref$shared,\n          ttItems = _ref.ttItems,\n          _ref$i = _ref.i,\n          i = _ref$i === void 0 ? 0 : _ref$i,\n          _ref$j = _ref.j,\n          j = _ref$j === void 0 ? null : _ref$j;\n      var w = this.w;\n\n      if (w.config.tooltip.custom !== undefined) {\n        this.handleCustomTooltip({\n          i: i,\n          j: j\n        });\n      } else {\n        this.toggleActiveInactiveSeries(shared);\n      }\n\n      var values = this.getValuesToPrint({\n        i: i,\n        j: j\n      });\n      this.printLabels({\n        i: i,\n        j: j,\n        values: values,\n        ttItems: ttItems,\n        shared: shared\n      }); // Re-calculate tooltip dimensions now that we have drawn the text\n\n      var tooltipEl = this.ttCtx.getElTooltip();\n      this.ttCtx.tooltipRect.ttWidth = tooltipEl.getBoundingClientRect().width;\n      this.ttCtx.tooltipRect.ttHeight = tooltipEl.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"printLabels\",\n    value: function printLabels(_ref2) {\n      var i = _ref2.i,\n          j = _ref2.j,\n          values = _ref2.values,\n          ttItems = _ref2.ttItems,\n          shared = _ref2.shared;\n      var w = this.w;\n      var val;\n      var xVal = values.xVal,\n          zVal = values.zVal,\n          xAxisTTVal = values.xAxisTTVal;\n      var seriesName = '';\n      var pColor = w.globals.colors[i];\n\n      if (j !== null && w.config.plotOptions.bar.distributed) {\n        pColor = w.globals.colors[j];\n      }\n\n      for (var t = 0, inverset = w.globals.series.length - 1; t < w.globals.series.length; t++, inverset--) {\n        var f = this.getFormatters(i);\n        seriesName = this.getSeriesName({\n          fn: f.yLbTitleFormatter,\n          index: i,\n          seriesIndex: i,\n          j: j\n        });\n\n        if (shared) {\n          var tIndex = w.config.tooltip.inverseOrder ? inverset : t;\n          f = this.getFormatters(tIndex);\n          seriesName = this.getSeriesName({\n            fn: f.yLbTitleFormatter,\n            index: tIndex,\n            seriesIndex: i,\n            j: j\n          });\n          pColor = w.globals.colors[tIndex]; // for plot charts, not for pie/donuts\n\n          val = f.yLbFormatter(w.globals.series[tIndex][j], {\n            series: w.globals.series,\n            seriesIndex: tIndex,\n            dataPointIndex: j,\n            w: w\n          }); // discard 0 values in BARS\n\n          if (this.ttCtx.hasBars() && w.config.chart.stacked && w.globals.series[tIndex][j] === 0 || typeof w.globals.series[tIndex][j] === 'undefined') {\n            val = undefined;\n          }\n        } else {\n          val = f.yLbFormatter(w.globals.series[i][j], {\n            series: w.globals.series,\n            seriesIndex: i,\n            dataPointIndex: j,\n            w: w\n          });\n        } // for pie / donuts\n\n\n        if (j === null) {\n          val = f.yLbFormatter(w.globals.series[i], w);\n        }\n\n        this.DOMHandling({\n          t: t,\n          ttItems: ttItems,\n          values: {\n            val: val,\n            xVal: xVal,\n            xAxisTTVal: xAxisTTVal,\n            zVal: zVal\n          },\n          seriesName: seriesName,\n          shared: shared,\n          pColor: pColor\n        });\n      }\n    }\n  }, {\n    key: \"getFormatters\",\n    value: function getFormatters(i) {\n      var w = this.w;\n      var yLbFormatter = w.globals.yLabelFormatters[i];\n      var yLbTitleFormatter;\n\n      if (w.globals.ttVal !== undefined) {\n        if (Array.isArray(w.globals.ttVal)) {\n          yLbFormatter = w.globals.ttVal[i] && w.globals.ttVal[i].formatter;\n          yLbTitleFormatter = w.globals.ttVal[i] && w.globals.ttVal[i].title && w.globals.ttVal[i].title.formatter;\n        } else {\n          yLbFormatter = w.globals.ttVal.formatter;\n\n          if (typeof w.globals.ttVal.title.formatter === 'function') {\n            yLbTitleFormatter = w.globals.ttVal.title.formatter;\n          }\n        }\n      } else {\n        yLbTitleFormatter = w.config.tooltip.y.title.formatter;\n      }\n\n      if (typeof yLbFormatter !== 'function') {\n        if (w.globals.yLabelFormatters[0]) {\n          yLbFormatter = w.globals.yLabelFormatters[0];\n        } else {\n          yLbFormatter = function yLbFormatter(label) {\n            return label;\n          };\n        }\n      }\n\n      if (typeof yLbTitleFormatter !== 'function') {\n        yLbTitleFormatter = function yLbTitleFormatter(label) {\n          return label;\n        };\n      }\n\n      return {\n        yLbFormatter: yLbFormatter,\n        yLbTitleFormatter: yLbTitleFormatter\n      };\n    }\n  }, {\n    key: \"getSeriesName\",\n    value: function getSeriesName(_ref3) {\n      var fn = _ref3.fn,\n          index = _ref3.index,\n          seriesIndex = _ref3.seriesIndex,\n          j = _ref3.j;\n      var w = this.w;\n      return fn(String(w.globals.seriesNames[index]), {\n        series: w.globals.series,\n        seriesIndex: seriesIndex,\n        dataPointIndex: j,\n        w: w\n      });\n    }\n  }, {\n    key: \"DOMHandling\",\n    value: function DOMHandling(_ref4) {\n      var t = _ref4.t,\n          ttItems = _ref4.ttItems,\n          values = _ref4.values,\n          seriesName = _ref4.seriesName,\n          shared = _ref4.shared,\n          pColor = _ref4.pColor;\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var val = values.val,\n          xVal = values.xVal,\n          xAxisTTVal = values.xAxisTTVal,\n          zVal = values.zVal;\n      var ttItemsChildren = null;\n      ttItemsChildren = ttItems[t].children;\n\n      if (w.config.tooltip.fillSeriesColor) {\n        //  elTooltip.style.backgroundColor = pColor\n        ttItems[t].style.backgroundColor = pColor;\n        ttItemsChildren[0].style.display = 'none';\n      }\n\n      if (ttCtx.showTooltipTitle) {\n        if (ttCtx.tooltipTitle === null) {\n          // get it once if null, and store it in class property\n          ttCtx.tooltipTitle = w.globals.dom.baseEl.querySelector('.apexcharts-tooltip-title');\n        }\n\n        ttCtx.tooltipTitle.innerHTML = xVal;\n      } // if xaxis tooltip is constructed, we need to replace the innerHTML\n\n\n      if (ttCtx.blxaxisTooltip) {\n        ttCtx.xaxisTooltipText.innerHTML = xAxisTTVal !== '' ? xAxisTTVal : xVal;\n      }\n\n      var ttYLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-label');\n\n      if (ttYLabel) {\n        ttYLabel.innerHTML = seriesName ? seriesName + ': ' : '';\n      }\n\n      var ttYVal = ttItems[t].querySelector('.apexcharts-tooltip-text-value');\n\n      if (ttYVal) {\n        ttYVal.innerHTML = val;\n      }\n\n      if (ttItemsChildren[0] && ttItemsChildren[0].classList.contains('apexcharts-tooltip-marker')) {\n        ttItemsChildren[0].style.backgroundColor = pColor;\n      }\n\n      if (!w.config.tooltip.marker.show) {\n        ttItemsChildren[0].style.display = 'none';\n      }\n\n      if (zVal !== null) {\n        var ttZLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-z-label');\n        ttZLabel.innerHTML = w.config.tooltip.z.title;\n        var ttZVal = ttItems[t].querySelector('.apexcharts-tooltip-text-z-value');\n        ttZVal.innerHTML = zVal;\n      }\n\n      if (shared && ttItemsChildren[0]) {\n        // hide when no Val or series collapsed\n        if (typeof val === 'undefined' || val === null || w.globals.collapsedSeriesIndices.indexOf(t) > -1) {\n          ttItemsChildren[0].parentNode.style.display = 'none';\n        } else {\n          ttItemsChildren[0].parentNode.style.display = w.config.tooltip.items.display;\n        }\n      }\n    }\n  }, {\n    key: \"toggleActiveInactiveSeries\",\n    value: function toggleActiveInactiveSeries(shared) {\n      var w = this.w;\n\n      if (shared) {\n        // make all tooltips active\n        this.tooltipUtil.toggleAllTooltipSeriesGroups('enable');\n      } else {\n        // disable all tooltip text groups\n        this.tooltipUtil.toggleAllTooltipSeriesGroups('disable'); // enable the first tooltip text group\n\n        var firstTooltipSeriesGroup = w.globals.dom.baseEl.querySelector('.apexcharts-tooltip-series-group');\n\n        if (firstTooltipSeriesGroup) {\n          firstTooltipSeriesGroup.classList.add('active');\n          firstTooltipSeriesGroup.style.display = w.config.tooltip.items.display;\n        }\n      }\n    }\n  }, {\n    key: \"getValuesToPrint\",\n    value: function getValuesToPrint(_ref5) {\n      var i = _ref5.i,\n          j = _ref5.j;\n      var w = this.w;\n      var filteredSeriesX = this.ctx.series.filteredSeriesX();\n      var xVal = '';\n      var xAxisTTVal = '';\n      var zVal = null;\n      var val = null;\n      var customFormatterOpts = {\n        series: w.globals.series,\n        seriesIndex: i,\n        dataPointIndex: j,\n        w: w\n      };\n      var zFormatter = w.globals.ttZFormatter;\n\n      if (j === null) {\n        val = w.globals.series[i];\n      } else {\n        if (w.globals.isXNumeric) {\n          xVal = filteredSeriesX[i][j];\n\n          if (filteredSeriesX[i].length === 0) {\n            // a series (possibly the first one) might be collapsed, so get the next active index\n            var firstActiveSeriesIndex = this.tooltipUtil.getFirstActiveXArray(filteredSeriesX);\n            xVal = filteredSeriesX[firstActiveSeriesIndex][j];\n          }\n        } else {\n          xVal = typeof w.globals.labels[j] !== 'undefined' ? w.globals.labels[j] : '';\n        }\n      }\n\n      var bufferXVal = xVal;\n\n      if (w.globals.isXNumeric && w.config.xaxis.type === 'datetime') {\n        var xFormat = new Formatters(this.ctx);\n        xVal = xFormat.xLabelFormat(w.globals.ttKeyFormatter, bufferXVal);\n      } else {\n        xVal = w.globals.xLabelFormatter(bufferXVal, customFormatterOpts);\n      } // override default x-axis formatter with tooltip formatter\n\n\n      if (w.config.tooltip.x.formatter !== undefined) {\n        xVal = w.globals.ttKeyFormatter(bufferXVal, customFormatterOpts);\n      }\n\n      if (w.globals.seriesZ.length > 0 && w.globals.seriesZ[0].length > 0) {\n        zVal = zFormatter(w.globals.seriesZ[i][j], w);\n      }\n\n      if (typeof w.config.xaxis.tooltip.formatter === 'function') {\n        xAxisTTVal = w.globals.xaxisTooltipFormatter(bufferXVal, customFormatterOpts);\n      } else {\n        xAxisTTVal = xVal;\n      }\n\n      return {\n        val: val,\n        xVal: xVal,\n        xAxisTTVal: xAxisTTVal,\n        zVal: zVal\n      };\n    }\n  }, {\n    key: \"handleCustomTooltip\",\n    value: function handleCustomTooltip(_ref6) {\n      var i = _ref6.i,\n          j = _ref6.j;\n      var w = this.w;\n      var tooltipEl = this.ttCtx.getElTooltip(); // override everything with a custom html tooltip and replace it\n\n      tooltipEl.innerHTML = w.config.tooltip.custom({\n        ctx: this.ctx,\n        series: w.globals.series,\n        seriesIndex: i,\n        dataPointIndex: j,\n        w: w\n      });\n    }\n  }]);\n\n  return Labels;\n}();\n\n/**\n * ApexCharts Tooltip.Position Class to move the tooltip based on x and y position.\n *\n * @module Tooltip.Position\n **/\n\nvar Position =\n/*#__PURE__*/\nfunction () {\n  function Position(tooltipContext) {\n    _classCallCheck(this, Position);\n\n    this.ttCtx = tooltipContext;\n    this.ctx = tooltipContext.ctx;\n    this.w = tooltipContext.w;\n  }\n  /**\n   * This will move the crosshair (the vertical/horz line that moves along with mouse)\n   * Along with this, this function also calls the xaxisMove function\n   * @memberof Position\n   * @param {int} - cx = point's x position, wherever point's x is, you need to move crosshair\n   */\n\n\n  _createClass(Position, [{\n    key: \"moveXCrosshairs\",\n    value: function moveXCrosshairs(cx) {\n      var j = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var ttCtx = this.ttCtx;\n      var w = this.w;\n      var xcrosshairs = ttCtx.getElXCrosshairs();\n      var x = cx - ttCtx.xcrosshairsWidth / 2;\n      var tickAmount = w.globals.labels.slice().length;\n\n      if (j !== null) {\n        x = w.globals.gridWidth / tickAmount * j;\n      }\n\n      if (w.config.xaxis.crosshairs.width === 'tickWidth' || w.config.xaxis.crosshairs.width === 'barWidth') {\n        if (x + ttCtx.xcrosshairsWidth > w.globals.gridWidth) {\n          x = w.globals.gridWidth - ttCtx.xcrosshairsWidth;\n        }\n      } else {\n        if (j !== null) {\n          x = x + w.globals.gridWidth / tickAmount / 2;\n        }\n      }\n\n      if (x < 0) {\n        x = 0;\n      }\n\n      if (x > w.globals.gridWidth) {\n        x = w.globals.gridWidth;\n      }\n\n      if (xcrosshairs !== null) {\n        xcrosshairs.setAttribute('x', x);\n        xcrosshairs.setAttribute('x1', x);\n        xcrosshairs.setAttribute('x2', x);\n        xcrosshairs.setAttribute('y2', w.globals.gridHeight);\n        xcrosshairs.classList.add('active');\n      }\n\n      if (ttCtx.blxaxisTooltip) {\n        var tx = x;\n\n        if (w.config.xaxis.crosshairs.width === 'tickWidth' || w.config.xaxis.crosshairs.width === 'barWidth') {\n          tx = x + ttCtx.xcrosshairsWidth / 2;\n        }\n\n        this.moveXAxisTooltip(tx);\n      }\n    }\n    /**\n     * This will move the crosshair (the vertical/horz line that moves along with mouse)\n     * Along with this, this function also calls the xaxisMove function\n     * @memberof Position\n     * @param {int} - cx = point's x position, wherever point's x is, you need to move crosshair\n     */\n\n  }, {\n    key: \"moveYCrosshairs\",\n    value: function moveYCrosshairs(cy) {\n      var ttCtx = this.ttCtx;\n\n      if (ttCtx.ycrosshairs !== null) {\n        Graphics.setAttrs(ttCtx.ycrosshairs, {\n          y1: cy,\n          y2: cy\n        });\n        Graphics.setAttrs(ttCtx.ycrosshairsHidden, {\n          y1: cy,\n          y2: cy\n        });\n      }\n    }\n    /**\n     ** AxisTooltip is the small rectangle which appears on x axis with x value, when user moves\n     * @memberof Position\n     * @param {int} - cx = point's x position, wherever point's x is, you need to move\n     */\n\n  }, {\n    key: \"moveXAxisTooltip\",\n    value: function moveXAxisTooltip(cx) {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n\n      if (ttCtx.xaxisTooltip !== null) {\n        ttCtx.xaxisTooltip.classList.add('active');\n        var cy = ttCtx.xaxisOffY + w.config.xaxis.tooltip.offsetY + w.globals.translateY + 1 + w.config.xaxis.offsetY;\n        var xaxisTTText = ttCtx.xaxisTooltip.getBoundingClientRect();\n        var xaxisTTTextWidth = xaxisTTText.width;\n        cx = cx - xaxisTTTextWidth / 2;\n\n        if (!isNaN(cx)) {\n          cx = cx + w.globals.translateX;\n          var textRect = 0;\n          var graphics = new Graphics(this.ctx);\n          textRect = graphics.getTextRects(ttCtx.xaxisTooltipText.innerHTML);\n          ttCtx.xaxisTooltipText.style.minWidth = textRect.width + 'px';\n          ttCtx.xaxisTooltip.style.left = cx + 'px';\n          ttCtx.xaxisTooltip.style.top = cy + 'px';\n        }\n      }\n    }\n  }, {\n    key: \"moveYAxisTooltip\",\n    value: function moveYAxisTooltip(index) {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n\n      if (ttCtx.yaxisTTEls === null) {\n        ttCtx.yaxisTTEls = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxistooltip');\n      }\n\n      var ycrosshairsHiddenRectY1 = parseInt(ttCtx.ycrosshairsHidden.getAttribute('y1'));\n      var cy = w.globals.translateY + ycrosshairsHiddenRectY1;\n      var yAxisTTRect = ttCtx.yaxisTTEls[index].getBoundingClientRect();\n      var yAxisTTHeight = yAxisTTRect.height;\n      var cx = w.globals.translateYAxisX[index] - 2;\n\n      if (w.config.yaxis[index].opposite) {\n        cx = cx - 26;\n      }\n\n      cy = cy - yAxisTTHeight / 2;\n\n      if (w.globals.ignoreYAxisIndexes.indexOf(index) === -1) {\n        ttCtx.yaxisTTEls[index].classList.add('active');\n        ttCtx.yaxisTTEls[index].style.top = cy + 'px';\n        ttCtx.yaxisTTEls[index].style.left = cx + w.config.yaxis[index].tooltip.offsetX + 'px';\n      } else {\n        ttCtx.yaxisTTEls[index].classList.remove('active');\n      }\n    }\n    /**\n     ** moves the whole tooltip by changing x, y attrs\n     * @memberof Position\n     * @param {int} - cx = point's x position, wherever point's x is, you need to move tooltip\n     * @param {int} - cy = point's y position, wherever point's y is, you need to move tooltip\n     * @param {int} - r = point's radius\n     */\n\n  }, {\n    key: \"moveTooltip\",\n    value: function moveTooltip(cx, cy) {\n      var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var tooltipEl = ttCtx.getElTooltip();\n      var tooltipRect = ttCtx.tooltipRect;\n      var pointR = r !== null ? parseInt(r) : 1;\n      var x = parseInt(cx) + pointR + 5;\n      var y = parseInt(cy) + pointR / 2; // - tooltipRect.ttHeight / 2\n\n      if (x > w.globals.gridWidth / 2) {\n        x = x - tooltipRect.ttWidth - pointR - 15;\n      }\n\n      if (x > w.globals.gridWidth - tooltipRect.ttWidth - 10) {\n        x = w.globals.gridWidth - tooltipRect.ttWidth;\n      }\n\n      if (x < -20) {\n        x = -20;\n      }\n\n      if (w.config.tooltip.followCursor) {\n        var elGrid = ttCtx.getElGrid();\n        var seriesBound = elGrid.getBoundingClientRect();\n        y = ttCtx.e.clientY + w.globals.translateY - seriesBound.top - tooltipRect.ttHeight / 2;\n      }\n\n      var newPositions = this.positionChecks(tooltipRect, x, y);\n      x = newPositions.x;\n      y = newPositions.y;\n\n      if (!isNaN(x)) {\n        x = x + w.globals.translateX;\n        tooltipEl.style.left = x + 'px';\n        tooltipEl.style.top = y + 'px';\n      }\n    }\n  }, {\n    key: \"positionChecks\",\n    value: function positionChecks(tooltipRect, x, y) {\n      var w = this.w;\n\n      if (tooltipRect.ttHeight + y > w.globals.gridHeight) {\n        y = w.globals.gridHeight - tooltipRect.ttHeight + w.globals.translateY;\n      }\n\n      if (y < 0) {\n        y = 0;\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"moveMarkers\",\n    value: function moveMarkers(i, j) {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n\n      if (w.globals.markers.size[i] > 0) {\n        var allPoints = w.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(i, \"'] .apexcharts-marker\"));\n\n        for (var p = 0; p < allPoints.length; p++) {\n          if (parseInt(allPoints[p].getAttribute('rel')) === j) {\n            ttCtx.marker.resetPointsSize();\n            ttCtx.marker.enlargeCurrentPoint(j, allPoints[p]);\n          }\n        }\n      } else {\n        ttCtx.marker.resetPointsSize();\n        this.moveDynamicPointOnHover(j, i);\n      }\n    } // This function is used when you need to show markers/points only on hover -\n    // DIFFERENT X VALUES in multiple series\n\n  }, {\n    key: \"moveDynamicPointOnHover\",\n    value: function moveDynamicPointOnHover(j, capturedSeries) {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var cx = 0;\n      var cy = 0;\n      var pointsArr = w.globals.pointsArray;\n      var hoverSize = w.config.markers.hover.size;\n\n      if (hoverSize === undefined) {\n        hoverSize = w.globals.markers.size[capturedSeries] + w.config.markers.hover.sizeOffset;\n      }\n\n      cx = pointsArr[capturedSeries][j][0];\n      cy = pointsArr[capturedSeries][j][1] ? pointsArr[capturedSeries][j][1] : 0;\n      var point = w.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(capturedSeries, \"'] .apexcharts-series-markers circle\"));\n\n      if (point) {\n        point.setAttribute('r', hoverSize);\n        point.setAttribute('cx', cx);\n        point.setAttribute('cy', cy);\n      } // point.style.opacity = w.config.markers.hover.opacity\n\n\n      this.moveXCrosshairs(cx);\n\n      if (!ttCtx.fixedTooltip) {\n        this.moveTooltip(cx, cy, hoverSize);\n      }\n    } // This function is used when you need to show markers/points only on hover -\n    // SAME X VALUES in multiple series\n\n  }, {\n    key: \"moveDynamicPointsOnHover\",\n    value: function moveDynamicPointsOnHover(j) {\n      var ttCtx = this.ttCtx;\n      var w = ttCtx.w;\n      var cx = 0;\n      var cy = 0;\n      var activeSeries = 0;\n      var pointsArr = w.globals.pointsArray;\n      var series = new Series(this.ctx);\n      activeSeries = series.getActiveSeriesIndex();\n      var hoverSize = w.config.markers.hover.size;\n\n      if (hoverSize === undefined) {\n        hoverSize = w.globals.markers.size[activeSeries] + w.config.markers.hover.sizeOffset;\n      }\n\n      if (pointsArr[activeSeries]) {\n        cx = pointsArr[activeSeries][j][0];\n        cy = pointsArr[activeSeries][j][1];\n      }\n\n      var points = null;\n      var allPoints = ttCtx.getAllMarkers();\n\n      if (allPoints !== null) {\n        points = allPoints;\n      } else {\n        points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers circle');\n      }\n\n      if (points !== null) {\n        for (var p = 0; p < points.length; p++) {\n          var pointArr = pointsArr[p];\n\n          if (pointArr && pointArr.length) {\n            var pcy = pointsArr[p][j][1];\n            points[p].setAttribute('cx', cx);\n            var realIndex = parseInt(points[p].parentNode.parentNode.parentNode.getAttribute('data:realIndex'));\n\n            if (pcy !== null) {\n              points[realIndex] && points[realIndex].setAttribute('r', hoverSize);\n              points[realIndex] && points[realIndex].setAttribute('cy', pcy);\n            } else {\n              points[realIndex] && points[realIndex].setAttribute('r', 0);\n            }\n          }\n        }\n      }\n\n      this.moveXCrosshairs(cx);\n\n      if (!ttCtx.fixedTooltip) {\n        var tcy = cy || w.globals.gridHeight;\n        this.moveTooltip(cx, tcy, hoverSize);\n      }\n    }\n  }, {\n    key: \"moveStickyTooltipOverBars\",\n    value: function moveStickyTooltipOverBars(j) {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var jBar = w.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='1'] path[j='\".concat(j, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='1'] path[j='\").concat(j, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='1'] path[j='\").concat(j, \"']\"));\n      var bcx = jBar ? parseFloat(jBar.getAttribute('cx')) : 0;\n      var bcy = 0;\n      var bw = jBar ? parseFloat(jBar.getAttribute('barWidth')) : 0;\n\n      if (w.globals.isXNumeric) {\n        bcx = bcx - bw / 2;\n      } else {\n        bcx = ttCtx.xAxisTicksPositions[j - 1] + ttCtx.dataPointsDividedWidth / 2;\n\n        if (isNaN(bcx)) {\n          bcx = ttCtx.xAxisTicksPositions[j] - ttCtx.dataPointsDividedWidth / 2;\n        }\n      } // tooltip will move vertically along with mouse as it is a shared tooltip\n\n\n      var elGrid = ttCtx.getElGrid();\n      var seriesBound = elGrid.getBoundingClientRect();\n      bcy = ttCtx.e.clientY - seriesBound.top - ttCtx.tooltipRect.ttHeight / 2;\n      this.moveXCrosshairs(bcx);\n\n      if (!ttCtx.fixedTooltip) {\n        var tcy = bcy || w.globals.gridHeight;\n        this.moveTooltip(bcx, tcy);\n      }\n    }\n  }]);\n\n  return Position;\n}();\n\n/**\n * ApexCharts Tooltip.Marker Class to draw texts on the tooltip.\n *\n * @module Tooltip.Marker\n **/\n\nvar Marker =\n/*#__PURE__*/\nfunction () {\n  function Marker(tooltipContext) {\n    _classCallCheck(this, Marker);\n\n    this.w = tooltipContext.w;\n    this.ttCtx = tooltipContext;\n    this.ctx = tooltipContext.ctx;\n    this.tooltipPosition = new Position(tooltipContext);\n  }\n\n  _createClass(Marker, [{\n    key: \"drawDynamicPoints\",\n    value: function drawDynamicPoints() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var marker = new Markers(this.ctx);\n      var elsSeries = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');\n\n      for (var i = 0; i < elsSeries.length; i++) {\n        var seriesIndex = parseInt(elsSeries[i].getAttribute('data:realIndex'));\n        var pointsMain = w.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(seriesIndex, \"'] .apexcharts-series-markers-wrap\"));\n\n        if (pointsMain !== null) {\n          // it can be null as we have tooltips in donut/bar charts\n          var point = void 0;\n          var PointClasses = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));\n\n          if ((w.config.chart.type === 'line' || w.config.chart.type === 'area') && !w.globals.comboCharts && !w.config.tooltip.intersect) {\n            PointClasses += ' no-pointer-events';\n          }\n\n          var elPointOptions = marker.getMarkerConfig(PointClasses, seriesIndex);\n          point = graphics.drawMarker(0, 0, elPointOptions);\n          point.node.setAttribute('default-marker-size', 0);\n          var elPointsG = document.createElementNS(w.globals.SVGNS, 'g');\n          elPointsG.classList.add('apexcharts-series-markers');\n          elPointsG.appendChild(point.node);\n          pointsMain.appendChild(elPointsG);\n        }\n      }\n    }\n  }, {\n    key: \"enlargeCurrentPoint\",\n    value: function enlargeCurrentPoint(rel, point) {\n      var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      var w = this.w;\n\n      if (w.config.chart.type !== 'bubble') {\n        this.newPointSize(rel, point);\n      }\n\n      var cx = point.getAttribute('cx');\n      var cy = point.getAttribute('cy');\n\n      if (x !== null && y !== null) {\n        cx = x;\n        cy = y;\n      }\n\n      this.tooltipPosition.moveXCrosshairs(cx);\n\n      if (!this.fixedTooltip) {\n        if (w.config.chart.type === 'radar') {\n          var elGrid = this.ttCtx.getElGrid();\n          var seriesBound = elGrid.getBoundingClientRect();\n          cx = this.ttCtx.e.clientX - seriesBound.left;\n        }\n\n        this.tooltipPosition.moveTooltip(cx, cy, w.config.markers.hover.size);\n      }\n    }\n  }, {\n    key: \"enlargePoints\",\n    value: function enlargePoints(j) {\n      var w = this.w;\n      var me = this;\n      var ttCtx = this.ttCtx;\n      var col = j;\n      var points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker');\n      var newSize = w.config.markers.hover.size;\n\n      for (var p = 0; p < points.length; p++) {\n        var rel = points[p].getAttribute('rel');\n        var index = points[p].getAttribute('index');\n\n        if (newSize === undefined) {\n          newSize = w.globals.markers.size[index] + w.config.markers.hover.sizeOffset;\n        }\n\n        if (col === parseInt(rel)) {\n          me.newPointSize(col, points[p]);\n          var cx = points[p].getAttribute('cx');\n          var cy = points[p].getAttribute('cy');\n          me.tooltipPosition.moveXCrosshairs(cx);\n\n          if (!ttCtx.fixedTooltip) {\n            me.tooltipPosition.moveTooltip(cx, cy, newSize);\n          }\n        } else {\n          me.oldPointSize(points[p]);\n        }\n      }\n    }\n  }, {\n    key: \"newPointSize\",\n    value: function newPointSize(rel, point) {\n      var w = this.w;\n      var newSize = w.config.markers.hover.size;\n      var elPoint = null;\n\n      if (rel === 0) {\n        elPoint = point.parentNode.firstChild;\n      } else {\n        elPoint = point.parentNode.lastChild;\n      }\n\n      var index = parseInt(elPoint.getAttribute('index'));\n\n      if (newSize === undefined) {\n        newSize = w.globals.markers.size[index] + w.config.markers.hover.sizeOffset;\n      }\n\n      elPoint.setAttribute('r', newSize);\n    }\n  }, {\n    key: \"oldPointSize\",\n    value: function oldPointSize(point) {\n      var size = parseInt(point.getAttribute('default-marker-size'));\n      point.setAttribute('r', size);\n    }\n  }, {\n    key: \"resetPointsSize\",\n    value: function resetPointsSize() {\n      var w = this.w;\n      var points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker');\n\n      for (var p = 0; p < points.length; p++) {\n        var size = parseInt(points[p].getAttribute('default-marker-size'));\n\n        if (Utils.isNumber(size)) {\n          points[p].setAttribute('r', size);\n        } else {\n          points[p].setAttribute('r', 0);\n        }\n      }\n    }\n  }]);\n\n  return Marker;\n}();\n\n/**\n * ApexCharts Tooltip.Intersect Class.\n *\n * @module Tooltip.Intersect\n **/\n\nvar Intersect =\n/*#__PURE__*/\nfunction () {\n  function Intersect(tooltipContext) {\n    _classCallCheck(this, Intersect);\n\n    this.w = tooltipContext.w;\n    this.ttCtx = tooltipContext;\n  }\n\n  _createClass(Intersect, [{\n    key: \"getAttr\",\n    value: function getAttr(e, attr) {\n      return parseFloat(e.target.getAttribute(attr));\n    }\n  }, {\n    key: \"handleHeatTooltip\",\n    value: function handleHeatTooltip(_ref) {\n      var e = _ref.e,\n          opt = _ref.opt,\n          x = _ref.x,\n          y = _ref.y;\n      var ttCtx = this.ttCtx;\n      var w = this.w;\n\n      if (e.target.classList.contains('apexcharts-heatmap-rect')) {\n        var i = this.getAttr(e, 'i');\n        var j = this.getAttr(e, 'j');\n        var cx = this.getAttr(e, 'cx');\n        var cy = this.getAttr(e, 'cy');\n        var width = this.getAttr(e, 'width');\n        var height = this.getAttr(e, 'height');\n        ttCtx.tooltipLabels.drawSeriesTexts({\n          ttItems: opt.ttItems,\n          i: i,\n          j: j,\n          shared: false\n        });\n        x = cx + ttCtx.tooltipRect.ttWidth / 2 + width;\n        y = cy + ttCtx.tooltipRect.ttHeight / 2 - height / 2;\n        ttCtx.tooltipPosition.moveXCrosshairs(cx + width / 2);\n\n        if (x > w.globals.gridWidth / 2) {\n          x = cx - ttCtx.tooltipRect.ttWidth / 2 + width;\n        }\n\n        if (ttCtx.w.config.tooltip.followCursor) {\n          var elGrid = ttCtx.getElGrid();\n          var seriesBound = elGrid.getBoundingClientRect(); // x = ttCtx.e.clientX - seriesBound.left\n\n          y = ttCtx.e.clientY - seriesBound.top + w.globals.translateY / 2 - 10;\n        }\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"handleMarkerTooltip\",\n    value: function handleMarkerTooltip(_ref2) {\n      var e = _ref2.e,\n          opt = _ref2.opt,\n          x = _ref2.x,\n          y = _ref2.y;\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var i;\n      var j;\n\n      if (e.target.classList.contains('apexcharts-marker')) {\n        var cx = parseInt(opt.paths.getAttribute('cx'));\n        var cy = parseInt(opt.paths.getAttribute('cy'));\n        var val = parseFloat(opt.paths.getAttribute('val'));\n        j = parseInt(opt.paths.getAttribute('rel'));\n        i = parseInt(opt.paths.parentNode.parentNode.parentNode.getAttribute('rel')) - 1;\n\n        if (ttCtx.intersect) {\n          var el = Utils.findAncestor(opt.paths, 'apexcharts-series');\n\n          if (el) {\n            i = parseInt(el.getAttribute('data:realIndex'));\n          }\n        }\n\n        ttCtx.tooltipLabels.drawSeriesTexts({\n          ttItems: opt.ttItems,\n          i: i,\n          j: j,\n          shared: ttCtx.showOnIntersect ? false : w.config.tooltip.shared\n        });\n\n        if (e.type === 'mouseup') {\n          ttCtx.markerClick(e, i, j);\n        }\n\n        x = cx;\n        y = cy + w.globals.translateY - ttCtx.tooltipRect.ttHeight * 1.4;\n\n        if (ttCtx.w.config.tooltip.followCursor) {\n          var elGrid = ttCtx.getElGrid();\n          var seriesBound = elGrid.getBoundingClientRect();\n          y = ttCtx.e.clientY + w.globals.translateY - seriesBound.top;\n        }\n\n        if (val < 0) {\n          y = cy;\n        }\n\n        ttCtx.marker.enlargeCurrentPoint(j, opt.paths, x, y);\n      }\n\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"handleBarTooltip\",\n    value: function handleBarTooltip(_ref3) {\n      var e = _ref3.e,\n          opt = _ref3.opt;\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var tooltipEl = ttCtx.getElTooltip();\n      var bx = 0;\n      var x = 0;\n      var y = 0; // let bW = 0\n\n      var i = 0;\n      var strokeWidth;\n      var barXY = this.getBarTooltipXY({\n        e: e,\n        opt: opt\n      });\n      i = barXY.i;\n      var barHeight = barXY.barHeight;\n      var j = barXY.j;\n\n      if (w.globals.isBarHorizontal && ttCtx.hasBars() || !w.config.tooltip.shared) {\n        x = barXY.x;\n        y = barXY.y;\n        strokeWidth = Array.isArray(w.config.stroke.width) ? w.config.stroke.width[i] : w.config.stroke.width; // bW = barXY.barWidth\n\n        bx = x;\n      } else {\n        if (!w.globals.comboCharts && !w.config.tooltip.shared) {\n          bx = bx / 2;\n        }\n      } // y is NaN, make it touch the bottom of grid area\n\n\n      if (isNaN(y)) {\n        y = w.globals.svgHeight - ttCtx.tooltipRect.ttHeight;\n      } // x exceeds gridWidth\n\n\n      if (x + ttCtx.tooltipRect.ttWidth > w.globals.gridWidth) {\n        x = x - ttCtx.tooltipRect.ttWidth;\n      } else if (x < 0) {\n        x = x + ttCtx.tooltipRect.ttWidth;\n      }\n\n      if (ttCtx.w.config.tooltip.followCursor) {\n        var elGrid = ttCtx.getElGrid();\n        var seriesBound = elGrid.getBoundingClientRect();\n        y = ttCtx.e.clientY - seriesBound.top;\n      } // if tooltip is still null, querySelector\n\n\n      if (ttCtx.tooltip === null) {\n        ttCtx.tooltip = w.globals.dom.baseEl.querySelector('.apexcharts-tooltip');\n      }\n\n      if (!w.config.tooltip.shared) {\n        if (w.globals.comboChartsHasBars) {\n          ttCtx.tooltipPosition.moveXCrosshairs(bx + strokeWidth / 2);\n        } else {\n          ttCtx.tooltipPosition.moveXCrosshairs(bx);\n        }\n      } // move tooltip here\n\n\n      if (!ttCtx.fixedTooltip && (!w.config.tooltip.shared || w.globals.isBarHorizontal && ttCtx.hasBars())) {\n        if (isReversed) {\n          x = w.globals.gridWidth - x;\n        }\n\n        tooltipEl.style.left = x + w.globals.translateX + 'px';\n        var seriesIndex = parseInt(opt.paths.parentNode.getAttribute('data:realIndex'));\n        var isReversed = w.globals.isMultipleYAxis ? w.config.yaxis[seriesIndex] && w.config.yaxis[seriesIndex].reversed : w.config.yaxis[0].reversed;\n\n        if (isReversed && !(w.globals.isBarHorizontal && ttCtx.hasBars())) {\n          y = y + barHeight - (w.globals.series[i][j] < 0 ? barHeight : 0) * 2;\n        }\n\n        if (ttCtx.tooltipRect.ttHeight + y > w.globals.gridHeight) {\n          y = w.globals.gridHeight - ttCtx.tooltipRect.ttHeight + w.globals.translateY;\n          tooltipEl.style.top = y + 'px';\n        } else {\n          tooltipEl.style.top = y + w.globals.translateY - ttCtx.tooltipRect.ttHeight / 2 + 'px';\n        }\n      }\n    }\n  }, {\n    key: \"getBarTooltipXY\",\n    value: function getBarTooltipXY(_ref4) {\n      var e = _ref4.e,\n          opt = _ref4.opt;\n      var w = this.w;\n      var j = null;\n      var ttCtx = this.ttCtx;\n      var i = 0;\n      var x = 0;\n      var y = 0;\n      var barWidth = 0;\n      var barHeight = 0;\n      var cl = e.target.classList;\n\n      if (cl.contains('apexcharts-bar-area') || cl.contains('apexcharts-candlestick-area') || cl.contains('apexcharts-rangebar-area')) {\n        var bar = e.target;\n        var barRect = bar.getBoundingClientRect();\n        var seriesBound = opt.elGrid.getBoundingClientRect();\n        var bh = barRect.height;\n        barHeight = barRect.height;\n        var bw = barRect.width;\n        var cx = parseInt(bar.getAttribute('cx'));\n        var cy = parseInt(bar.getAttribute('cy'));\n        barWidth = parseFloat(bar.getAttribute('barWidth'));\n        var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;\n        j = parseInt(bar.getAttribute('j'));\n        i = parseInt(bar.parentNode.getAttribute('rel')) - 1;\n\n        if (w.globals.comboCharts) {\n          i = parseInt(bar.parentNode.getAttribute('data:realIndex'));\n        } // if (w.config.tooltip.shared) {\n        // this check not needed  at the moment\n        //   const yDivisor = w.globals.gridHeight / (w.globals.series.length)\n        //   const hoverY = ttCtx.clientY - ttCtx.seriesBound.top\n        //   j = Math.ceil(hoverY / yDivisor)\n        // }\n\n\n        ttCtx.tooltipLabels.drawSeriesTexts({\n          ttItems: opt.ttItems,\n          i: i,\n          j: j,\n          shared: ttCtx.showOnIntersect ? false : w.config.tooltip.shared\n        });\n\n        if (w.config.tooltip.followCursor) {\n          if (w.globals.isBarHorizontal) {\n            x = clientX - seriesBound.left + 15;\n            y = cy - ttCtx.dataPointsDividedHeight + bh / 2 - ttCtx.tooltipRect.ttHeight / 2;\n          } else {\n            if (w.globals.isXNumeric) {\n              x = cx - bw / 2;\n            } else {\n              x = cx - ttCtx.dataPointsDividedWidth + bw / 2;\n            }\n\n            y = e.clientY - seriesBound.top - ttCtx.tooltipRect.ttHeight / 2 - 15;\n          }\n        } else {\n          if (w.globals.isBarHorizontal) {\n            x = cx;\n\n            if (x < ttCtx.xyRatios.baseLineInvertedY) {\n              x = cx - ttCtx.tooltipRect.ttWidth;\n            }\n\n            y = cy - ttCtx.dataPointsDividedHeight + bh / 2 - ttCtx.tooltipRect.ttHeight / 2;\n          } else {\n            // if columns\n            if (w.globals.isXNumeric) {\n              x = cx - bw / 2;\n            } else {\n              x = cx - ttCtx.dataPointsDividedWidth + bw / 2;\n            }\n\n            y = cy; // - ttCtx.tooltipRect.ttHeight / 2 + 10\n          }\n        }\n      }\n\n      return {\n        x: x,\n        y: y,\n        barHeight: barHeight,\n        barWidth: barWidth,\n        i: i,\n        j: j\n      };\n    }\n  }]);\n\n  return Intersect;\n}();\n\n/**\n * ApexCharts Tooltip.AxesTooltip Class.\n *\n * @module Tooltip.AxesTooltip\n **/\nvar AxesTooltip =\n/*#__PURE__*/\nfunction () {\n  function AxesTooltip(tooltipContext) {\n    _classCallCheck(this, AxesTooltip);\n\n    this.w = tooltipContext.w;\n    this.ttCtx = tooltipContext;\n  }\n  /**\n   * This method adds the secondary tooltip which appears below x axis\n   * @memberof Tooltip\n   **/\n\n\n  _createClass(AxesTooltip, [{\n    key: \"drawXaxisTooltip\",\n    value: function drawXaxisTooltip() {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n      var isBottom = w.config.xaxis.position === 'bottom';\n      ttCtx.xaxisOffY = isBottom ? w.globals.gridHeight + 1 : 1;\n      var tooltipCssClass = isBottom ? 'apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom' : 'apexcharts-xaxistooltip apexcharts-xaxistooltip-top';\n      var renderTo = w.globals.dom.elWrap;\n\n      if (ttCtx.blxaxisTooltip) {\n        var xaxisTooltip = w.globals.dom.baseEl.querySelector('.apexcharts-xaxistooltip');\n\n        if (xaxisTooltip === null) {\n          ttCtx.xaxisTooltip = document.createElement('div');\n          ttCtx.xaxisTooltip.setAttribute('class', tooltipCssClass + ' ' + w.config.tooltip.theme);\n          renderTo.appendChild(ttCtx.xaxisTooltip);\n          ttCtx.xaxisTooltipText = document.createElement('div');\n          ttCtx.xaxisTooltipText.classList.add('apexcharts-xaxistooltip-text');\n          ttCtx.xaxisTooltipText.style.fontFamily = w.config.xaxis.tooltip.style.fontFamily || w.config.chart.fontFamily;\n          ttCtx.xaxisTooltipText.style.fontSize = w.config.xaxis.tooltip.style.fontSize;\n          ttCtx.xaxisTooltip.appendChild(ttCtx.xaxisTooltipText);\n        }\n      }\n    }\n    /**\n     * This method adds the secondary tooltip which appears below x axis\n     * @memberof Tooltip\n     **/\n\n  }, {\n    key: \"drawYaxisTooltip\",\n    value: function drawYaxisTooltip() {\n      var w = this.w;\n      var ttCtx = this.ttCtx;\n\n      for (var i = 0; i < w.config.yaxis.length; i++) {\n        var isRight = w.config.yaxis[i].opposite || w.config.yaxis[i].crosshairs.opposite;\n        ttCtx.yaxisOffX = isRight ? w.globals.gridWidth + 1 : 1;\n        var tooltipCssClass = isRight ? \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, \" apexcharts-yaxistooltip-right\") : \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, \" apexcharts-yaxistooltip-left\");\n        var renderTo = w.globals.dom.elWrap;\n\n        if (ttCtx.blyaxisTooltip) {\n          var yaxisTooltip = w.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i));\n\n          if (yaxisTooltip === null) {\n            ttCtx.yaxisTooltip = document.createElement('div');\n            ttCtx.yaxisTooltip.setAttribute('class', tooltipCssClass + ' ' + w.config.tooltip.theme);\n            renderTo.appendChild(ttCtx.yaxisTooltip);\n            if (i === 0) ttCtx.yaxisTooltipText = [];\n            ttCtx.yaxisTooltipText.push(document.createElement('div'));\n            ttCtx.yaxisTooltipText[i].classList.add('apexcharts-yaxistooltip-text');\n            ttCtx.yaxisTooltip.appendChild(ttCtx.yaxisTooltipText[i]);\n          }\n        }\n      }\n    }\n    /**\n     * @memberof Tooltip\n     **/\n\n  }, {\n    key: \"setXCrosshairWidth\",\n    value: function setXCrosshairWidth() {\n      var w = this.w;\n      var ttCtx = this.ttCtx; // set xcrosshairs width\n\n      var xcrosshairs = ttCtx.getElXCrosshairs();\n      ttCtx.xcrosshairsWidth = parseInt(w.config.xaxis.crosshairs.width);\n\n      if (!w.globals.comboCharts) {\n        if (w.config.xaxis.crosshairs.width === 'tickWidth') {\n          var count = w.globals.labels.length;\n          ttCtx.xcrosshairsWidth = w.globals.gridWidth / count;\n        } else if (w.config.xaxis.crosshairs.width === 'barWidth') {\n          var bar = w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');\n\n          if (bar !== null) {\n            var barWidth = parseFloat(bar.getAttribute('barWidth'));\n            ttCtx.xcrosshairsWidth = barWidth;\n          } else {\n            ttCtx.xcrosshairsWidth = 1;\n          }\n        }\n      } else {\n        var _bar = w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');\n\n        if (_bar !== null && w.config.xaxis.crosshairs.width === 'barWidth') {\n          var _barWidth = parseFloat(_bar.getAttribute('barWidth'));\n\n          ttCtx.xcrosshairsWidth = _barWidth;\n        } else {\n          if (w.config.xaxis.crosshairs.width === 'tickWidth') {\n            var _count = w.globals.labels.length;\n            ttCtx.xcrosshairsWidth = w.globals.gridWidth / _count;\n          }\n        }\n      }\n\n      if (w.globals.isBarHorizontal) {\n        ttCtx.xcrosshairsWidth = 0;\n      }\n\n      if (xcrosshairs !== null && ttCtx.xcrosshairsWidth > 0) {\n        xcrosshairs.setAttribute('width', ttCtx.xcrosshairsWidth);\n      }\n    }\n  }, {\n    key: \"handleYCrosshair\",\n    value: function handleYCrosshair() {\n      var w = this.w;\n      var ttCtx = this.ttCtx; // set ycrosshairs height\n\n      ttCtx.ycrosshairs = w.globals.dom.baseEl.querySelector('.apexcharts-ycrosshairs');\n      ttCtx.ycrosshairsHidden = w.globals.dom.baseEl.querySelector('.apexcharts-ycrosshairs-hidden');\n    }\n  }, {\n    key: \"drawYaxisTooltipText\",\n    value: function drawYaxisTooltipText(index, clientY, xyRatios) {\n      var ttCtx = this.ttCtx;\n      var w = this.w;\n      var lbFormatter = w.globals.yLabelFormatters[index];\n\n      if (ttCtx.blyaxisTooltip) {\n        var elGrid = ttCtx.getElGrid();\n        var seriesBound = elGrid.getBoundingClientRect();\n        var hoverY = (clientY - seriesBound.top) * xyRatios.yRatio[index];\n        var height = w.globals.maxYArr[index] - w.globals.minYArr[index];\n        var val = w.globals.minYArr[index] + (height - hoverY);\n        ttCtx.tooltipPosition.moveYCrosshairs(clientY - seriesBound.top);\n        ttCtx.yaxisTooltipText[index].innerHTML = lbFormatter(val);\n        ttCtx.tooltipPosition.moveYAxisTooltip(index);\n      }\n    }\n  }]);\n\n  return AxesTooltip;\n}();\n\n/**\n * ApexCharts Core Tooltip Class to handle the tooltip generation.\n *\n * @module Tooltip\n **/\n\nvar Tooltip =\n/*#__PURE__*/\nfunction () {\n  function Tooltip(ctx) {\n    _classCallCheck(this, Tooltip);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    var w = this.w;\n    this.tooltipUtil = new Utils$1(this);\n    this.tooltipLabels = new Labels(this);\n    this.tooltipPosition = new Position(this);\n    this.marker = new Marker(this);\n    this.intersect = new Intersect(this);\n    this.axesTooltip = new AxesTooltip(this);\n    this.showOnIntersect = w.config.tooltip.intersect;\n    this.showTooltipTitle = w.config.tooltip.x.show;\n    this.fixedTooltip = w.config.tooltip.fixed.enabled;\n    this.xaxisTooltip = null;\n    this.yaxisTTEls = null;\n    this.isBarShared = !w.globals.isBarHorizontal && w.config.tooltip.shared;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"getElTooltip\",\n    value: function getElTooltip(ctx) {\n      if (!ctx) ctx = this;\n      return ctx.w.globals.dom.baseEl.querySelector('.apexcharts-tooltip');\n    }\n  }, {\n    key: \"getElXCrosshairs\",\n    value: function getElXCrosshairs() {\n      return this.w.globals.dom.baseEl.querySelector('.apexcharts-xcrosshairs');\n    }\n  }, {\n    key: \"getElGrid\",\n    value: function getElGrid() {\n      return this.w.globals.dom.baseEl.querySelector('.apexcharts-grid');\n    }\n  }, {\n    key: \"drawTooltip\",\n    value: function drawTooltip(xyRatios) {\n      var w = this.w;\n      this.xyRatios = xyRatios;\n      this.blxaxisTooltip = w.config.xaxis.tooltip.enabled && w.globals.axisCharts;\n      this.blyaxisTooltip = w.config.yaxis[0].tooltip.enabled && w.globals.axisCharts;\n      this.allTooltipSeriesGroups = [];\n\n      if (!w.globals.axisCharts) {\n        this.showTooltipTitle = false;\n      }\n\n      var tooltipEl = document.createElement('div');\n      tooltipEl.classList.add('apexcharts-tooltip');\n      tooltipEl.classList.add(w.config.tooltip.theme);\n      w.globals.dom.elWrap.appendChild(tooltipEl);\n\n      if (w.globals.axisCharts) {\n        this.axesTooltip.drawXaxisTooltip();\n        this.axesTooltip.drawYaxisTooltip();\n        this.axesTooltip.setXCrosshairWidth();\n        this.axesTooltip.handleYCrosshair();\n        var xAxis = new XAxis(this.ctx);\n        this.xAxisTicksPositions = xAxis.getXAxisTicksPositions();\n      } // we forcefully set intersect true for these conditions\n\n\n      if (w.globals.comboCharts && !w.config.tooltip.shared || w.config.tooltip.intersect && !w.config.tooltip.shared || (w.config.chart.type === 'bar' || w.config.chart.type === 'rangeBar') && !w.config.tooltip.shared) {\n        this.showOnIntersect = true;\n      }\n\n      if (w.config.markers.size === 0 || w.globals.markers.largestSize === 0) {\n        // when user don't want to show points all the time, but only on when hovering on series\n        this.marker.drawDynamicPoints(this);\n      } // no visible series, exit\n\n\n      if (w.globals.collapsedSeries.length === w.globals.series.length) return;\n      this.dataPointsDividedHeight = w.globals.gridHeight / w.globals.dataPoints;\n      this.dataPointsDividedWidth = w.globals.gridWidth / w.globals.dataPoints;\n\n      if (this.showTooltipTitle) {\n        this.tooltipTitle = document.createElement('div');\n        this.tooltipTitle.classList.add('apexcharts-tooltip-title');\n        this.tooltipTitle.style.fontFamily = w.config.tooltip.style.fontFamily || w.config.chart.fontFamily;\n        this.tooltipTitle.style.fontSize = w.config.tooltip.style.fontSize;\n        tooltipEl.appendChild(this.tooltipTitle);\n      }\n\n      var ttItemsCnt = w.globals.series.length; // whether shared or not, default is shared\n\n      if ((w.globals.xyCharts || w.globals.comboCharts) && w.config.tooltip.shared) {\n        if (!this.showOnIntersect) {\n          ttItemsCnt = w.globals.series.length;\n        } else {\n          ttItemsCnt = 1;\n        }\n      }\n\n      this.ttItems = this.createTTElements(ttItemsCnt);\n      this.addSVGEvents();\n    }\n  }, {\n    key: \"createTTElements\",\n    value: function createTTElements(ttItemsCnt) {\n      var w = this.w;\n      var ttItems = [];\n      var tooltipEl = this.getElTooltip();\n\n      for (var i = 0; i < ttItemsCnt; i++) {\n        var gTxt = document.createElement('div');\n        gTxt.classList.add('apexcharts-tooltip-series-group');\n        var point = document.createElement('span');\n        point.classList.add('apexcharts-tooltip-marker');\n        point.style.backgroundColor = w.globals.colors[i];\n        gTxt.appendChild(point);\n        var gYZ = document.createElement('div');\n        gYZ.classList.add('apexcharts-tooltip-text');\n        gYZ.style.fontFamily = w.config.tooltip.style.fontFamily || w.config.chart.fontFamily;\n        gYZ.style.fontSize = w.config.tooltip.style.fontSize; // y values group\n\n        var gYValText = document.createElement('div');\n        gYValText.classList.add('apexcharts-tooltip-y-group');\n        var txtLabel = document.createElement('span');\n        txtLabel.classList.add('apexcharts-tooltip-text-label');\n        gYValText.appendChild(txtLabel);\n        var txtValue = document.createElement('span');\n        txtValue.classList.add('apexcharts-tooltip-text-value');\n        gYValText.appendChild(txtValue); // z values group\n\n        var gZValText = document.createElement('div');\n        gZValText.classList.add('apexcharts-tooltip-z-group');\n        var txtZLabel = document.createElement('span');\n        txtZLabel.classList.add('apexcharts-tooltip-text-z-label');\n        gZValText.appendChild(txtZLabel);\n        var txtZValue = document.createElement('span');\n        txtZValue.classList.add('apexcharts-tooltip-text-z-value');\n        gZValText.appendChild(txtZValue);\n        gYZ.appendChild(gYValText);\n        gYZ.appendChild(gZValText);\n        gTxt.appendChild(gYZ);\n        tooltipEl.appendChild(gTxt);\n        ttItems.push(gTxt);\n      }\n\n      return ttItems;\n    }\n  }, {\n    key: \"addSVGEvents\",\n    value: function addSVGEvents() {\n      var w = this.w;\n      var type = w.config.chart.type;\n      var tooltipEl = this.getElTooltip();\n      var commonBar = !!(type === 'bar' || type === 'candlestick' || type === 'rangeBar');\n      var hoverArea = w.globals.dom.Paper.node;\n      var elGrid = this.getElGrid();\n\n      if (elGrid) {\n        this.seriesBound = elGrid.getBoundingClientRect();\n      }\n\n      var tooltipY = [];\n      var tooltipX = [];\n      var seriesHoverParams = {\n        hoverArea: hoverArea,\n        elGrid: elGrid,\n        tooltipEl: tooltipEl,\n        tooltipY: tooltipY,\n        tooltipX: tooltipX,\n        ttItems: this.ttItems\n      };\n      var points;\n\n      if (w.globals.axisCharts) {\n        if (type === 'area' || type === 'line' || type === 'scatter' || type === 'bubble') {\n          points = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series[data\\\\:longestSeries='true'] .apexcharts-marker\");\n        } else if (commonBar) {\n          points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-rangebar-area');\n        } else if (type === 'heatmap') {\n          points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series .apexcharts-heatmap');\n        } else if (type === 'radar') {\n          points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series .apexcharts-marker');\n        }\n\n        if (points && points.length) {\n          for (var p = 0; p < points.length; p++) {\n            tooltipY.push(points[p].getAttribute('cy'));\n            tooltipX.push(points[p].getAttribute('cx'));\n          }\n        }\n      }\n\n      var validSharedChartTypes = w.globals.xyCharts && !this.showOnIntersect || w.globals.comboCharts && !this.showOnIntersect || commonBar && this.hasBars() && w.config.tooltip.shared;\n\n      if (validSharedChartTypes) {\n        this.addPathsEventListeners([hoverArea], seriesHoverParams);\n      } else if (commonBar && !w.globals.comboCharts) {\n        this.addBarsEventListeners(seriesHoverParams);\n      } else if (type === 'bubble' || type === 'scatter' || type === 'radar' || this.showOnIntersect && (type === 'area' || type === 'line')) {\n        this.addPointsEventsListeners(seriesHoverParams);\n      } else if (!w.globals.axisCharts || type === 'heatmap') {\n        var seriesAll = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');\n        this.addPathsEventListeners(seriesAll, seriesHoverParams);\n      }\n\n      if (this.showOnIntersect) {\n        var linePoints = w.globals.dom.baseEl.querySelectorAll('.apexcharts-line-series .apexcharts-marker');\n\n        if (linePoints.length > 0) {\n          // if we find any lineSeries, addEventListeners for them\n          this.addPathsEventListeners(linePoints, seriesHoverParams);\n        }\n\n        var areaPoints = w.globals.dom.baseEl.querySelectorAll('.apexcharts-area-series .apexcharts-marker');\n\n        if (areaPoints.length > 0) {\n          // if we find any areaSeries, addEventListeners for them\n          this.addPathsEventListeners(areaPoints, seriesHoverParams);\n        } // combo charts may have bars, so add event listeners here too\n\n\n        if (this.hasBars() && !w.config.tooltip.shared) {\n          this.addBarsEventListeners(seriesHoverParams);\n        }\n      }\n    }\n  }, {\n    key: \"drawFixedTooltipRect\",\n    value: function drawFixedTooltipRect() {\n      var w = this.w;\n      var tooltipEl = this.getElTooltip();\n      var tooltipRect = tooltipEl.getBoundingClientRect();\n      var ttWidth = tooltipRect.width + 10;\n      var ttHeight = tooltipRect.height + 10;\n      var x = w.config.tooltip.fixed.offsetX;\n      var y = w.config.tooltip.fixed.offsetY;\n\n      if (w.config.tooltip.fixed.position.toLowerCase().indexOf('right') > -1) {\n        x = x + w.globals.svgWidth - ttWidth + 10;\n      }\n\n      if (w.config.tooltip.fixed.position.toLowerCase().indexOf('bottom') > -1) {\n        y = y + w.globals.svgHeight - ttHeight - 10;\n      }\n\n      tooltipEl.style.left = x + 'px';\n      tooltipEl.style.top = y + 'px';\n      return {\n        x: x,\n        y: y,\n        ttWidth: ttWidth,\n        ttHeight: ttHeight\n      };\n    }\n  }, {\n    key: \"addPointsEventsListeners\",\n    value: function addPointsEventsListeners(seriesHoverParams) {\n      var w = this.w;\n      var points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers .apexcharts-marker');\n      this.addPathsEventListeners(points, seriesHoverParams);\n    }\n  }, {\n    key: \"addBarsEventListeners\",\n    value: function addBarsEventListeners(seriesHoverParams) {\n      var w = this.w;\n      var bars = w.globals.dom.baseEl.querySelectorAll('.apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-rangebar-area');\n      this.addPathsEventListeners(bars, seriesHoverParams);\n    }\n  }, {\n    key: \"addPathsEventListeners\",\n    value: function addPathsEventListeners(paths, opts) {\n      var _this = this;\n\n      var self = this;\n\n      var _loop = function _loop(p) {\n        var extendedOpts = {\n          paths: paths[p],\n          tooltipEl: opts.tooltipEl,\n          tooltipY: opts.tooltipY,\n          tooltipX: opts.tooltipX,\n          elGrid: opts.elGrid,\n          hoverArea: opts.hoverArea,\n          ttItems: opts.ttItems\n        };\n        _this.w.globals.tooltipOpts = extendedOpts;\n        var events = ['mousemove', 'mouseup', 'touchmove', 'mouseout', 'touchend'];\n        events.map(function (ev) {\n          return paths[p].addEventListener(ev, self.seriesHover.bind(self, extendedOpts), {\n            capture: false,\n            passive: true\n          });\n        });\n      };\n\n      for (var p = 0; p < paths.length; p++) {\n        _loop(p);\n      }\n    }\n    /*\n     ** The actual series hover function\n     */\n\n  }, {\n    key: \"seriesHover\",\n    value: function seriesHover(opt, e) {\n      var _this2 = this;\n\n      var chartGroups = [];\n      var w = this.w; // if user has more than one charts in group, we need to sync\n\n      if (w.config.chart.group) {\n        chartGroups = this.ctx.getGroupedCharts();\n      }\n\n      if (w.globals.axisCharts && (w.globals.minX === -Infinity && w.globals.maxX === Infinity || w.globals.dataPoints === 0)) {\n        return;\n      }\n\n      if (chartGroups.length) {\n        chartGroups.forEach(function (ch) {\n          var tooltipEl = _this2.getElTooltip(ch);\n\n          var newOpts = {\n            paths: opt.paths,\n            tooltipEl: tooltipEl,\n            tooltipY: opt.tooltipY,\n            tooltipX: opt.tooltipX,\n            elGrid: opt.elGrid,\n            hoverArea: opt.hoverArea,\n            ttItems: ch.w.globals.tooltip.ttItems // all the charts should have the same minX and maxX (same xaxis) for multiple tooltips to work correctly\n\n          };\n\n          if (ch.w.globals.minX === _this2.w.globals.minX && ch.w.globals.maxX === _this2.w.globals.maxX) {\n            ch.w.globals.tooltip.seriesHoverByContext({\n              chartCtx: ch,\n              ttCtx: ch.w.globals.tooltip,\n              opt: newOpts,\n              e: e\n            });\n          }\n        });\n      } else {\n        this.seriesHoverByContext({\n          chartCtx: this.ctx,\n          ttCtx: this.w.globals.tooltip,\n          opt: opt,\n          e: e\n        });\n      }\n    }\n  }, {\n    key: \"seriesHoverByContext\",\n    value: function seriesHoverByContext(_ref) {\n      var chartCtx = _ref.chartCtx,\n          ttCtx = _ref.ttCtx,\n          opt = _ref.opt,\n          e = _ref.e;\n      var w = chartCtx.w;\n      var tooltipEl = this.getElTooltip(); // tooltipRect is calculated on every mousemove, because the text is dynamic\n\n      ttCtx.tooltipRect = {\n        x: 0,\n        y: 0,\n        ttWidth: tooltipEl.getBoundingClientRect().width,\n        ttHeight: tooltipEl.getBoundingClientRect().height\n      };\n      ttCtx.e = e; // highlight the current hovered bars\n\n      if (ttCtx.hasBars() && !w.globals.comboCharts && !ttCtx.isBarShared) {\n        if (w.config.tooltip.onDatasetHover.highlightDataSeries) {\n          var series = new Series(chartCtx);\n          series.toggleSeriesOnHover(e, e.target.parentNode);\n        }\n      }\n\n      if (ttCtx.fixedTooltip) {\n        ttCtx.drawFixedTooltipRect();\n      }\n\n      if (w.globals.axisCharts) {\n        ttCtx.axisChartsTooltips({\n          e: e,\n          opt: opt,\n          tooltipRect: ttCtx.tooltipRect\n        });\n      } else {\n        // non-plot charts i.e pie/donut/circle\n        ttCtx.nonAxisChartsTooltips({\n          e: e,\n          opt: opt,\n          tooltipRect: ttCtx.tooltipRect\n        });\n      }\n    } // tooltip handling for line/area/bar/columns/scatter\n\n  }, {\n    key: \"axisChartsTooltips\",\n    value: function axisChartsTooltips(_ref2) {\n      var e = _ref2.e,\n          opt = _ref2.opt;\n      var w = this.w;\n      var j, x, y;\n      var self = this;\n      var capj = null;\n      var seriesBound = opt.elGrid.getBoundingClientRect();\n      var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;\n      var clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;\n      this.clientY = clientY;\n      this.clientX = clientX;\n\n      if (clientY < seriesBound.top || clientY > seriesBound.top + seriesBound.height) {\n        self.handleMouseOut(opt);\n        return;\n      }\n\n      var tooltipEl = this.getElTooltip();\n      var xcrosshairs = this.getElXCrosshairs();\n      var isStickyTooltip = w.globals.xyCharts || w.config.chart.type === 'bar' && !w.globals.isBarHorizontal && this.hasBars() && w.config.tooltip.shared || w.globals.comboCharts && this.hasBars;\n\n      if (w.globals.isBarHorizontal && this.hasBars()) {\n        isStickyTooltip = false;\n      }\n\n      if (e.type === 'mousemove' || e.type === 'touchmove' || e.type === 'mouseup') {\n        if (xcrosshairs !== null) {\n          xcrosshairs.classList.add('active');\n        }\n\n        if (self.ycrosshairs !== null && self.blyaxisTooltip) {\n          self.ycrosshairs.classList.add('active');\n        }\n\n        if (isStickyTooltip && !self.showOnIntersect) {\n          capj = self.tooltipUtil.getNearestValues({\n            context: self,\n            hoverArea: opt.hoverArea,\n            elGrid: opt.elGrid,\n            clientX: clientX,\n            clientY: clientY,\n            hasBars: self.hasBars\n          });\n          j = capj.j;\n          var capturedSeries = capj.capturedSeries;\n\n          if (capj.hoverX < 0 || capj.hoverX > w.globals.gridWidth) {\n            self.handleMouseOut(opt);\n            return;\n          }\n\n          if (capturedSeries !== null) {\n            var ignoreNull = w.globals.series[capturedSeries][j] === null;\n\n            if (ignoreNull) {\n              opt.tooltipEl.classList.remove('active');\n              return;\n            }\n\n            if (typeof w.globals.series[capturedSeries][j] !== 'undefined') {\n              if (w.config.tooltip.shared && this.tooltipUtil.isXoverlap(j) && this.tooltipUtil.isinitialSeriesSameLen()) {\n                this.create(e, self, capturedSeries, j, opt.ttItems);\n              } else {\n                this.create(e, self, capturedSeries, j, opt.ttItems, false);\n              }\n            } else {\n              if (this.tooltipUtil.isXoverlap(j)) {\n                self.create(e, self, 0, j, opt.ttItems);\n              }\n            }\n          } else {\n            // couldn't capture any series. check if shared X is same,\n            // if yes, draw a grouped tooltip\n            if (this.tooltipUtil.isXoverlap(j)) {\n              self.create(e, self, 0, j, opt.ttItems);\n            }\n          }\n        } else {\n          if (w.config.chart.type === 'heatmap') {\n            var markerXY = this.intersect.handleHeatTooltip({\n              e: e,\n              opt: opt,\n              x: x,\n              y: y\n            });\n            x = markerXY.x;\n            y = markerXY.y;\n            tooltipEl.style.left = x + 'px';\n            tooltipEl.style.top = y + 'px';\n          } else {\n            if (this.hasBars) {\n              this.intersect.handleBarTooltip({\n                e: e,\n                opt: opt\n              });\n            }\n\n            if (this.hasMarkers) {\n              // intersect - line/area/scatter/bubble\n              this.intersect.handleMarkerTooltip({\n                e: e,\n                opt: opt,\n                x: x,\n                y: y\n              });\n            }\n          }\n        }\n\n        if (this.blyaxisTooltip) {\n          for (var yt = 0; yt < w.config.yaxis.length; yt++) {\n            self.axesTooltip.drawYaxisTooltipText(yt, clientY, self.xyRatios);\n          }\n        }\n\n        opt.tooltipEl.classList.add('active');\n      } else if (e.type === 'mouseout' || e.type === 'touchend') {\n        this.handleMouseOut(opt);\n      }\n    } // tooltip handling for pie/donuts\n\n  }, {\n    key: \"nonAxisChartsTooltips\",\n    value: function nonAxisChartsTooltips(_ref3) {\n      var e = _ref3.e,\n          opt = _ref3.opt,\n          tooltipRect = _ref3.tooltipRect;\n      var w = this.w;\n      var rel = opt.paths.getAttribute('rel');\n      var tooltipEl = this.getElTooltip();\n      var seriesBound = w.globals.dom.elWrap.getBoundingClientRect();\n\n      if (e.type === 'mousemove' || e.type === 'touchmove') {\n        tooltipEl.classList.add('active');\n        this.tooltipLabels.drawSeriesTexts({\n          ttItems: opt.ttItems,\n          i: parseInt(rel) - 1,\n          shared: false\n        });\n        var x = w.globals.clientX - seriesBound.left - tooltipRect.ttWidth / 2;\n        var y = w.globals.clientY - seriesBound.top - tooltipRect.ttHeight - 10;\n        tooltipEl.style.left = x + 'px';\n        tooltipEl.style.top = y + 'px';\n      } else if (e.type === 'mouseout' || e.type === 'touchend') {\n        tooltipEl.classList.remove('active');\n      }\n    }\n  }, {\n    key: \"deactivateHoverFilter\",\n    value: function deactivateHoverFilter() {\n      var w = this.w;\n      var graphics = new Graphics(this.ctx);\n      var allPaths = w.globals.dom.Paper.select(\".apexcharts-bar-area\");\n\n      for (var b = 0; b < allPaths.length; b++) {\n        graphics.pathMouseLeave(allPaths[b]);\n      }\n    }\n  }, {\n    key: \"handleMouseOut\",\n    value: function handleMouseOut(opt) {\n      var w = this.w;\n      var xcrosshairs = this.getElXCrosshairs();\n      opt.tooltipEl.classList.remove('active');\n      this.deactivateHoverFilter();\n\n      if (w.config.chart.type !== 'bubble') {\n        this.marker.resetPointsSize();\n      }\n\n      if (xcrosshairs !== null) {\n        xcrosshairs.classList.remove('active');\n      }\n\n      if (this.ycrosshairs !== null) {\n        this.ycrosshairs.classList.remove('active');\n      }\n\n      if (this.blxaxisTooltip) {\n        this.xaxisTooltip.classList.remove('active');\n      }\n\n      if (this.blyaxisTooltip) {\n        if (this.yaxisTTEls === null) {\n          this.yaxisTTEls = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxistooltip');\n        }\n\n        for (var i = 0; i < this.yaxisTTEls.length; i++) {\n          this.yaxisTTEls[i].classList.remove('active');\n        }\n      }\n    }\n  }, {\n    key: \"getElMarkers\",\n    value: function getElMarkers() {\n      return this.w.globals.dom.baseEl.querySelectorAll(' .apexcharts-series-markers');\n    }\n  }, {\n    key: \"getAllMarkers\",\n    value: function getAllMarkers() {\n      return this.w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers .apexcharts-marker');\n    }\n  }, {\n    key: \"hasMarkers\",\n    value: function hasMarkers() {\n      var markers = this.getElMarkers();\n      return markers.length > 0;\n    }\n  }, {\n    key: \"getElBars\",\n    value: function getElBars() {\n      return this.w.globals.dom.baseEl.querySelectorAll('.apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-rangebar-series');\n    }\n  }, {\n    key: \"hasBars\",\n    value: function hasBars() {\n      var bars = this.getElBars();\n      return bars.length > 0;\n    }\n  }, {\n    key: \"markerClick\",\n    value: function markerClick(e, seriesIndex, dataPointIndex) {\n      var w = this.w;\n\n      if (typeof w.config.chart.events.markerClick === 'function') {\n        w.config.chart.events.markerClick(e, this.ctx, {\n          seriesIndex: seriesIndex,\n          dataPointIndex: dataPointIndex,\n          w: w\n        });\n      }\n\n      this.ctx.fireEvent('markerClick', [e, this.ctx, {\n        seriesIndex: seriesIndex,\n        dataPointIndex: dataPointIndex,\n        w: w\n      }]);\n    }\n  }, {\n    key: \"create\",\n    value: function create(e, context, capturedSeries, j, ttItems) {\n      var shared = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n      var w = this.w;\n      var ttCtx = context;\n\n      if (e.type === 'mouseup') {\n        this.markerClick(e, capturedSeries, j);\n      }\n\n      if (shared === null) shared = w.config.tooltip.shared;\n      var hasMarkers = this.hasMarkers();\n      var bars = this.getElBars();\n\n      if (shared) {\n        ttCtx.tooltipLabels.drawSeriesTexts({\n          ttItems: ttItems,\n          i: capturedSeries,\n          j: j,\n          shared: this.showOnIntersect ? false : w.config.tooltip.shared\n        });\n\n        if (hasMarkers) {\n          if (w.globals.markers.largestSize > 0) {\n            ttCtx.marker.enlargePoints(j);\n          } else {\n            ttCtx.tooltipPosition.moveDynamicPointsOnHover(j);\n          }\n        }\n\n        if (this.hasBars()) {\n          this.barSeriesHeight = this.tooltipUtil.getBarsHeight(bars);\n\n          if (this.barSeriesHeight > 0) {\n            // hover state, activate snap filter\n            var graphics = new Graphics(this.ctx);\n            var paths = w.globals.dom.Paper.select(\".apexcharts-bar-area[j='\".concat(j, \"']\")); // de-activate first\n\n            this.deactivateHoverFilter();\n            this.tooltipPosition.moveStickyTooltipOverBars(j);\n\n            for (var b = 0; b < paths.length; b++) {\n              graphics.pathMouseEnter(paths[b]);\n            }\n          }\n        }\n      } else {\n        ttCtx.tooltipLabels.drawSeriesTexts({\n          shared: false,\n          ttItems: ttItems,\n          i: capturedSeries,\n          j: j\n        });\n\n        if (this.hasBars()) {\n          ttCtx.tooltipPosition.moveStickyTooltipOverBars(j);\n        }\n\n        if (hasMarkers) {\n          ttCtx.tooltipPosition.moveMarkers(capturedSeries, j);\n        }\n      }\n    }\n  }]);\n\n  return Tooltip;\n}();\n\nvar icoPan = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" fill=\\\"#000000\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\">\\n    <defs>\\n        <path d=\\\"M0 0h24v24H0z\\\" id=\\\"a\\\"/>\\n    </defs>\\n    <clipPath id=\\\"b\\\">\\n        <use overflow=\\\"visible\\\" xlink:href=\\\"#a\\\"/>\\n    </clipPath>\\n    <path clip-path=\\\"url(#b)\\\" d=\\\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\\\"/>\\n</svg>\";\n\nvar icoZoom = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"#000000\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\">\\n    <path d=\\\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\\\"/>\\n    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\\\"/>\\n</svg>\";\n\nvar icoReset = \"<svg fill=\\\"#000000\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <path d=\\\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\\\"/>\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n</svg>\";\n\nvar icoZoomIn = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"/>\\n</svg>\\n\";\n\nvar icoZoomOut = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"/>\\n</svg>\\n\";\n\nvar icoSelect = \"<svg fill=\\\"#6E8192\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\\\"/>\\n</svg>\";\n\nvar icoMenu = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><path fill=\\\"none\\\" d=\\\"M0 0h24v24H0V0z\\\"/><path d=\\\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\\\"/></svg>\";\n\n/**\n * ApexCharts Toolbar Class for creating toolbar in axis based charts.\n *\n * @module Toolbar\n **/\n\nvar Toolbar =\n/*#__PURE__*/\nfunction () {\n  function Toolbar(ctx) {\n    _classCallCheck(this, Toolbar);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n    this.ev = this.w.config.chart.events;\n    this.localeValues = this.w.globals.locale.toolbar;\n  }\n\n  _createClass(Toolbar, [{\n    key: \"createToolbar\",\n    value: function createToolbar() {\n      var w = this.w;\n      var elToolbarWrap = document.createElement('div');\n      elToolbarWrap.setAttribute('class', 'apexcharts-toolbar');\n      w.globals.dom.elWrap.appendChild(elToolbarWrap);\n      this.elZoom = document.createElement('div');\n      this.elZoomIn = document.createElement('div');\n      this.elZoomOut = document.createElement('div');\n      this.elPan = document.createElement('div');\n      this.elSelection = document.createElement('div');\n      this.elZoomReset = document.createElement('div');\n      this.elMenuIcon = document.createElement('div');\n      this.elMenu = document.createElement('div');\n      this.elCustomIcons = [];\n      this.t = w.config.chart.toolbar.tools;\n\n      if (Array.isArray(this.t.customIcons)) {\n        for (var i = 0; i < this.t.customIcons.length; i++) {\n          this.elCustomIcons.push(document.createElement('div'));\n        }\n      }\n\n      this.elMenuItems = [];\n      var toolbarControls = [];\n\n      if (this.t.zoomin && w.config.chart.zoom.enabled) {\n        toolbarControls.push({\n          el: this.elZoomIn,\n          icon: typeof this.t.zoomin === 'string' ? this.t.zoomin : icoZoomIn,\n          title: this.localeValues.zoomIn,\n          class: 'apexcharts-zoom-in-icon'\n        });\n      }\n\n      if (this.t.zoomout && w.config.chart.zoom.enabled) {\n        toolbarControls.push({\n          el: this.elZoomOut,\n          icon: typeof this.t.zoomout === 'string' ? this.t.zoomout : icoZoomOut,\n          title: this.localeValues.zoomOut,\n          class: 'apexcharts-zoom-out-icon'\n        });\n      }\n\n      if (this.t.zoom && w.config.chart.zoom.enabled) {\n        toolbarControls.push({\n          el: this.elZoom,\n          icon: typeof this.t.zoom === 'string' ? this.t.zoom : icoZoom,\n          title: this.localeValues.selectionZoom,\n          class: w.globals.isTouchDevice ? 'hidden' : 'apexcharts-zoom-icon'\n        });\n      }\n\n      if (this.t.selection && w.config.chart.selection.enabled) {\n        toolbarControls.push({\n          el: this.elSelection,\n          icon: typeof this.t.selection === 'string' ? this.t.selection : icoSelect,\n          title: this.localeValues.selection,\n          class: w.globals.isTouchDevice ? 'hidden' : 'apexcharts-selection-icon'\n        });\n      }\n\n      if (this.t.pan && w.config.chart.zoom.enabled) {\n        toolbarControls.push({\n          el: this.elPan,\n          icon: typeof this.t.pan === 'string' ? this.t.pan : icoPan,\n          title: this.localeValues.pan,\n          class: w.globals.isTouchDevice ? 'hidden' : 'apexcharts-pan-icon'\n        });\n      }\n\n      if (this.t.reset && w.config.chart.zoom.enabled) {\n        toolbarControls.push({\n          el: this.elZoomReset,\n          icon: typeof this.t.reset === 'string' ? this.t.reset : icoReset,\n          title: this.localeValues.reset,\n          class: 'apexcharts-reset-zoom-icon'\n        });\n      }\n\n      if (this.t.download) {\n        toolbarControls.push({\n          el: this.elMenuIcon,\n          icon: typeof this.t.download === 'string' ? this.t.download : icoMenu,\n          title: this.localeValues.menu,\n          class: 'apexcharts-menu-icon'\n        });\n      }\n\n      for (var _i = 0; _i < this.elCustomIcons.length; _i++) {\n        toolbarControls.push({\n          el: this.elCustomIcons[_i],\n          icon: this.t.customIcons[_i].icon,\n          title: this.t.customIcons[_i].title,\n          index: this.t.customIcons[_i].index,\n          class: 'apexcharts-toolbar-custom-icon ' + this.t.customIcons[_i].class\n        });\n      }\n\n      toolbarControls.forEach(function (t, index) {\n        if (t.index) {\n          Utils.moveIndexInArray(toolbarControls, index, t.index);\n        }\n      });\n\n      for (var _i2 = 0; _i2 < toolbarControls.length; _i2++) {\n        Graphics.setAttrs(toolbarControls[_i2].el, {\n          class: toolbarControls[_i2].class,\n          title: toolbarControls[_i2].title\n        });\n        toolbarControls[_i2].el.innerHTML = toolbarControls[_i2].icon;\n        elToolbarWrap.appendChild(toolbarControls[_i2].el);\n      }\n\n      elToolbarWrap.appendChild(this.elMenu);\n      Graphics.setAttrs(this.elMenu, {\n        class: 'apexcharts-menu'\n      });\n      var menuItems = [{\n        name: 'exportSVG',\n        title: this.localeValues.exportToSVG\n      }, {\n        name: 'exportPNG',\n        title: this.localeValues.exportToPNG\n      }];\n\n      for (var _i3 = 0; _i3 < menuItems.length; _i3++) {\n        this.elMenuItems.push(document.createElement('div'));\n        this.elMenuItems[_i3].innerHTML = menuItems[_i3].title;\n        Graphics.setAttrs(this.elMenuItems[_i3], {\n          class: \"apexcharts-menu-item \".concat(menuItems[_i3].name),\n          title: menuItems[_i3].title\n        });\n        this.elMenu.appendChild(this.elMenuItems[_i3]);\n      }\n\n      if (w.globals.zoomEnabled) {\n        this.elZoom.classList.add('selected');\n      } else if (w.globals.panEnabled) {\n        this.elPan.classList.add('selected');\n      } else if (w.globals.selectionEnabled) {\n        this.elSelection.classList.add('selected');\n      }\n\n      this.addToolbarEventListeners();\n    }\n  }, {\n    key: \"addToolbarEventListeners\",\n    value: function addToolbarEventListeners() {\n      var _this = this;\n\n      this.elZoomReset.addEventListener('click', this.handleZoomReset.bind(this));\n      this.elSelection.addEventListener('click', this.toggleSelection.bind(this));\n      this.elZoom.addEventListener('click', this.toggleZooming.bind(this));\n      this.elZoomIn.addEventListener('click', this.handleZoomIn.bind(this));\n      this.elZoomOut.addEventListener('click', this.handleZoomOut.bind(this));\n      this.elPan.addEventListener('click', this.togglePanning.bind(this));\n      this.elMenuIcon.addEventListener('click', this.toggleMenu.bind(this));\n      this.elMenuItems.forEach(function (m) {\n        if (m.classList.contains('exportSVG')) {\n          m.addEventListener('click', _this.downloadSVG.bind(_this));\n        } else if (m.classList.contains('exportPNG')) {\n          m.addEventListener('click', _this.downloadPNG.bind(_this));\n        }\n      });\n\n      for (var i = 0; i < this.t.customIcons.length; i++) {\n        this.elCustomIcons[i].addEventListener('click', this.t.customIcons[i].click);\n      }\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection() {\n      this.toggleOtherControls();\n      this.w.globals.selectionEnabled = !this.w.globals.selectionEnabled;\n\n      if (!this.elSelection.classList.contains('selected')) {\n        this.elSelection.classList.add('selected');\n      } else {\n        this.elSelection.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"toggleZooming\",\n    value: function toggleZooming() {\n      this.toggleOtherControls();\n      this.w.globals.zoomEnabled = !this.w.globals.zoomEnabled;\n\n      if (!this.elZoom.classList.contains('selected')) {\n        this.elZoom.classList.add('selected');\n      } else {\n        this.elZoom.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"getToolbarIconsReference\",\n    value: function getToolbarIconsReference() {\n      var w = this.w;\n\n      if (!this.elZoom) {\n        this.elZoom = w.globals.dom.baseEl.querySelector('.apexcharts-zoom-icon');\n      }\n\n      if (!this.elPan) {\n        this.elPan = w.globals.dom.baseEl.querySelector('.apexcharts-pan-icon');\n      }\n\n      if (!this.elSelection) {\n        this.elSelection = w.globals.dom.baseEl.querySelector('.apexcharts-selection-icon');\n      }\n    }\n  }, {\n    key: \"enableZooming\",\n    value: function enableZooming() {\n      this.toggleOtherControls();\n      this.w.globals.zoomEnabled = true;\n\n      if (this.elZoom) {\n        this.elZoom.classList.add('selected');\n      }\n\n      if (this.elPan) {\n        this.elPan.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"enablePanning\",\n    value: function enablePanning() {\n      this.toggleOtherControls();\n      this.w.globals.panEnabled = true;\n\n      if (this.elPan) {\n        this.elPan.classList.add('selected');\n      }\n\n      if (this.elZoom) {\n        this.elZoom.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"togglePanning\",\n    value: function togglePanning() {\n      this.toggleOtherControls();\n      this.w.globals.panEnabled = !this.w.globals.panEnabled;\n\n      if (!this.elPan.classList.contains('selected')) {\n        this.elPan.classList.add('selected');\n      } else {\n        this.elPan.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"toggleOtherControls\",\n    value: function toggleOtherControls() {\n      var w = this.w;\n      w.globals.panEnabled = false;\n      w.globals.zoomEnabled = false;\n      w.globals.selectionEnabled = false;\n      this.getToolbarIconsReference();\n\n      if (this.elPan) {\n        this.elPan.classList.remove('selected');\n      }\n\n      if (this.elSelection) {\n        this.elSelection.classList.remove('selected');\n      }\n\n      if (this.elZoom) {\n        this.elZoom.classList.remove('selected');\n      }\n    }\n  }, {\n    key: \"handleZoomIn\",\n    value: function handleZoomIn() {\n      var w = this.w;\n      var centerX = (w.globals.minX + w.globals.maxX) / 2;\n      var newMinX = (w.globals.minX + centerX) / 2;\n      var newMaxX = (w.globals.maxX + centerX) / 2;\n\n      if (!w.globals.disableZoomIn) {\n        this.zoomUpdateOptions(newMinX, newMaxX);\n      }\n    }\n  }, {\n    key: \"handleZoomOut\",\n    value: function handleZoomOut() {\n      var w = this.w; // avoid zooming out beyond 1000 which may result in NaN values being printed on x-axis\n\n      if (w.config.xaxis.type === 'datetime' && new Date(w.globals.minX).getUTCFullYear() < 1000) {\n        return;\n      }\n\n      var centerX = (w.globals.minX + w.globals.maxX) / 2;\n      var newMinX = w.globals.minX - (centerX - w.globals.minX);\n      var newMaxX = w.globals.maxX - (centerX - w.globals.maxX);\n\n      if (!w.globals.disableZoomOut) {\n        this.zoomUpdateOptions(newMinX, newMaxX);\n      }\n    }\n  }, {\n    key: \"zoomUpdateOptions\",\n    value: function zoomUpdateOptions(newMinX, newMaxX) {\n      var xaxis = {\n        min: newMinX,\n        max: newMaxX\n      };\n      var beforeZoomRange = this.getBeforeZoomRange(xaxis);\n\n      if (beforeZoomRange) {\n        xaxis = beforeZoomRange.xaxis;\n      }\n\n      this.w.globals.zoomed = true;\n\n      this.ctx._updateOptions({\n        xaxis: xaxis\n      }, false, this.w.config.chart.animations.dynamicAnimation.enabled);\n\n      this.zoomCallback(xaxis);\n    }\n  }, {\n    key: \"zoomCallback\",\n    value: function zoomCallback(xaxis, yaxis) {\n      if (typeof this.ev.zoomed === 'function') {\n        this.ev.zoomed(this.ctx, {\n          xaxis: xaxis,\n          yaxis: yaxis\n        });\n      }\n    }\n  }, {\n    key: \"getBeforeZoomRange\",\n    value: function getBeforeZoomRange(xaxis, yaxis) {\n      var newRange = null;\n\n      if (typeof this.ev.beforeZoom === 'function') {\n        newRange = this.ev.beforeZoom(this, {\n          xaxis: xaxis,\n          yaxis: yaxis\n        });\n      }\n\n      return newRange;\n    }\n  }, {\n    key: \"toggleMenu\",\n    value: function toggleMenu() {\n      if (this.elMenu.classList.contains('open')) {\n        this.elMenu.classList.remove('open');\n      } else {\n        this.elMenu.classList.add('open');\n      }\n    }\n  }, {\n    key: \"downloadPNG\",\n    value: function downloadPNG() {\n      var downloadPNG = new Exports(this.ctx);\n      downloadPNG.exportToPng(this.ctx);\n      this.toggleMenu();\n    }\n  }, {\n    key: \"downloadSVG\",\n    value: function downloadSVG() {\n      var downloadSVG = new Exports(this.ctx);\n      downloadSVG.exportToSVG();\n      this.toggleMenu();\n    }\n  }, {\n    key: \"handleZoomReset\",\n    value: function handleZoomReset(e) {\n      var _this2 = this;\n\n      var charts = this.ctx.getSyncedCharts();\n      charts.forEach(function (ch) {\n        var w = ch.w;\n\n        if (w.globals.minX !== w.globals.initialminX && w.globals.maxX !== w.globals.initialmaxX) {\n          ch.revertDefaultAxisMinMax();\n\n          if (typeof w.config.chart.events.zoomed === 'function') {\n            _this2.zoomCallback({\n              min: w.config.xaxis.min,\n              max: w.config.xaxis.max\n            });\n          }\n\n          w.globals.zoomed = false;\n\n          ch._updateSeries(w.globals.initialSeries, w.config.chart.animations.dynamicAnimation.enabled);\n        }\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.elZoomReset) {\n        this.elZoomReset.removeEventListener('click', this.handleZoomReset.bind(this));\n        this.elSelection.removeEventListener('click', this.toggleSelection.bind(this));\n        this.elZoom.removeEventListener('click', this.toggleZooming.bind(this));\n        this.elZoomIn.removeEventListener('click', this.handleZoomIn.bind(this));\n        this.elZoomOut.removeEventListener('click', this.handleZoomOut.bind(this));\n        this.elPan.removeEventListener('click', this.togglePanning.bind(this));\n        this.elMenuIcon.removeEventListener('click', this.toggleMenu.bind(this));\n      }\n\n      this.elZoom = null;\n      this.elZoomIn = null;\n      this.elZoomOut = null;\n      this.elPan = null;\n      this.elSelection = null;\n      this.elZoomReset = null;\n      this.elMenuIcon = null;\n    }\n  }]);\n\n  return Toolbar;\n}();\n\n/**\n * ApexCharts Zoom Class for handling zooming and panning on axes based charts.\n *\n * @module ZoomPanSelection\n **/\n\nvar ZoomPanSelection =\n/*#__PURE__*/\nfunction (_Toolbar) {\n  _inherits(ZoomPanSelection, _Toolbar);\n\n  function ZoomPanSelection(ctx) {\n    var _this;\n\n    _classCallCheck(this, ZoomPanSelection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ZoomPanSelection).call(this, ctx));\n    _this.ctx = ctx;\n    _this.w = ctx.w;\n    _this.dragged = false;\n    _this.graphics = new Graphics(_this.ctx);\n    _this.eventList = ['mousedown', 'mousemove', 'touchstart', 'touchmove', 'mouseup', 'touchend'];\n    _this.clientX = 0;\n    _this.clientY = 0;\n    _this.startX = 0;\n    _this.endX = 0;\n    _this.dragX = 0;\n    _this.startY = 0;\n    _this.endY = 0;\n    _this.dragY = 0;\n    return _this;\n  }\n\n  _createClass(ZoomPanSelection, [{\n    key: \"init\",\n    value: function init(_ref) {\n      var _this2 = this;\n\n      var xyRatios = _ref.xyRatios;\n      var w = this.w;\n      var me = this;\n      this.xyRatios = xyRatios;\n      this.zoomRect = this.graphics.drawRect(0, 0, 0, 0);\n      this.selectionRect = this.graphics.drawRect(0, 0, 0, 0);\n      this.gridRect = w.globals.dom.baseEl.querySelector('.apexcharts-grid');\n      this.zoomRect.node.classList.add('apexcharts-zoom-rect');\n      this.selectionRect.node.classList.add('apexcharts-selection-rect');\n      w.globals.dom.elGraphical.add(this.zoomRect);\n      w.globals.dom.elGraphical.add(this.selectionRect);\n\n      if (w.config.chart.selection.type === 'x') {\n        this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          minY: 0,\n          maxX: w.globals.gridWidth,\n          maxY: w.globals.gridHeight\n        }).on('dragmove', this.selectionDragging.bind(this, 'dragging'));\n      } else if (w.config.chart.selection.type === 'y') {\n        this.slDraggableRect = this.selectionRect.draggable({\n          minX: 0,\n          maxX: w.globals.gridWidth\n        }).on('dragmove', this.selectionDragging.bind(this, 'dragging'));\n      } else {\n        this.slDraggableRect = this.selectionRect.draggable().on('dragmove', this.selectionDragging.bind(this, 'dragging'));\n      }\n\n      this.preselectedSelection();\n      this.hoverArea = w.globals.dom.baseEl.querySelector(w.globals.chartClass);\n      this.hoverArea.classList.add('zoomable');\n      this.eventList.forEach(function (event) {\n        _this2.hoverArea.addEventListener(event, me.svgMouseEvents.bind(me, xyRatios), {\n          capture: false,\n          passive: true\n        });\n      });\n    } // remove the event listeners which were previously added on hover area\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this3 = this;\n\n      var me = this;\n      this.eventList.forEach(function (event) {\n        if (_this3.hoverArea) {\n          _this3.hoverArea.removeEventListener(event, me.svgMouseEvents.bind(me, me.xyRatios), {\n            capture: false,\n            passive: true\n          });\n        }\n      });\n\n      if (this.slDraggableRect) {\n        this.slDraggableRect.draggable(false);\n        this.slDraggableRect.off();\n        this.selectionRect.off();\n      }\n\n      this.selectionRect = null;\n      this.zoomRect = null;\n      this.gridRect = null;\n    }\n  }, {\n    key: \"svgMouseEvents\",\n    value: function svgMouseEvents(xyRatios, e) {\n      var w = this.w;\n      var me = this;\n      var toolbar = this.ctx.toolbar;\n      var zoomtype = w.globals.zoomEnabled ? w.config.chart.zoom.type : w.config.chart.selection.type;\n\n      if (e.shiftKey) {\n        this.shiftWasPressed = true;\n        toolbar.enablePanning();\n      } else {\n        if (this.shiftWasPressed) {\n          toolbar.enableZooming();\n          this.shiftWasPressed = false;\n        }\n      }\n\n      var falsePositives = e.target.classList.contains('apexcharts-selection-rect') || e.target.parentNode.classList.contains('apexcharts-toolbar');\n      if (falsePositives) return;\n      me.clientX = e.type === 'touchmove' || e.type === 'touchstart' ? e.touches[0].clientX : e.type === 'touchend' ? e.changedTouches[0].clientX : e.clientX;\n      me.clientY = e.type === 'touchmove' || e.type === 'touchstart' ? e.touches[0].clientY : e.type === 'touchend' ? e.changedTouches[0].clientY : e.clientY;\n\n      if (e.type === 'mousedown' && e.which === 1) {\n        var gridRectDim = me.gridRect.getBoundingClientRect();\n        me.startX = me.clientX - gridRectDim.left;\n        me.startY = me.clientY - gridRectDim.top;\n        me.dragged = false;\n        me.w.globals.mousedown = true;\n      }\n\n      if (e.type === 'mousemove' && e.which === 1 || e.type === 'touchmove') {\n        me.dragged = true;\n\n        if (w.globals.panEnabled) {\n          w.globals.selection = null;\n\n          if (me.w.globals.mousedown) {\n            me.panDragging({\n              context: me,\n              zoomtype: zoomtype,\n              xyRatios: xyRatios\n            });\n          }\n        } else {\n          if (me.w.globals.mousedown && w.globals.zoomEnabled || me.w.globals.mousedown && w.globals.selectionEnabled) {\n            me.selection = me.selectionDrawing({\n              context: me,\n              zoomtype: zoomtype\n            });\n          }\n        }\n      }\n\n      if (e.type === 'mouseup' || e.type === 'touchend') {\n        // we will be calling getBoundingClientRect on each mousedown/mousemove/mouseup\n        var _gridRectDim = me.gridRect.getBoundingClientRect();\n\n        if (me.w.globals.mousedown) {\n          // user released the drag, now do all the calculations\n          me.endX = me.clientX - _gridRectDim.left;\n          me.endY = me.clientY - _gridRectDim.top;\n          me.dragX = Math.abs(me.endX - me.startX);\n          me.dragY = Math.abs(me.endY - me.startY);\n\n          if (w.globals.zoomEnabled || w.globals.selectionEnabled) {\n            me.selectionDrawn({\n              context: me,\n              zoomtype: zoomtype\n            });\n          }\n        }\n\n        if (w.globals.zoomEnabled) {\n          me.hideSelectionRect(this.selectionRect);\n        }\n\n        me.dragged = false;\n        me.w.globals.mousedown = false;\n      }\n\n      this.makeSelectionRectDraggable();\n    }\n  }, {\n    key: \"makeSelectionRectDraggable\",\n    value: function makeSelectionRectDraggable() {\n      var w = this.w;\n      if (!this.selectionRect) return;\n      var rectDim = this.selectionRect.node.getBoundingClientRect();\n\n      if (rectDim.width > 0 && rectDim.height > 0) {\n        this.slDraggableRect.selectize().resize({\n          constraint: {\n            minX: 0,\n            minY: 0,\n            maxX: w.globals.gridWidth,\n            maxY: w.globals.gridHeight\n          }\n        }).on('resizing', this.selectionDragging.bind(this, 'resizing'));\n      }\n    }\n  }, {\n    key: \"preselectedSelection\",\n    value: function preselectedSelection() {\n      var w = this.w;\n      var xyRatios = this.xyRatios;\n\n      if (!w.globals.zoomEnabled) {\n        if (typeof w.globals.selection !== 'undefined' && w.globals.selection !== null) {\n          this.drawSelectionRect(w.globals.selection);\n        } else {\n          if (w.config.chart.selection.xaxis.min !== undefined && w.config.chart.selection.xaxis.max !== undefined) {\n            var x = (w.config.chart.selection.xaxis.min - w.globals.minX) / xyRatios.xRatio;\n            var width = w.globals.gridWidth - (w.globals.maxX - w.config.chart.selection.xaxis.max) / xyRatios.xRatio - x;\n            var selectionRect = {\n              x: x,\n              y: 0,\n              width: width,\n              height: w.globals.gridHeight,\n              translateX: 0,\n              translateY: 0,\n              selectionEnabled: true\n            };\n            this.drawSelectionRect(selectionRect);\n            this.makeSelectionRectDraggable();\n\n            if (typeof w.config.chart.events.selection === 'function') {\n              w.config.chart.events.selection(this.ctx, {\n                xaxis: {\n                  min: w.config.chart.selection.xaxis.min,\n                  max: w.config.chart.selection.xaxis.max\n                },\n                yaxis: {}\n              });\n            }\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawSelectionRect\",\n    value: function drawSelectionRect(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          width = _ref2.width,\n          height = _ref2.height,\n          translateX = _ref2.translateX,\n          translateY = _ref2.translateY;\n      var w = this.w;\n      var zoomRect = this.zoomRect;\n      var selectionRect = this.selectionRect;\n\n      if (this.dragged || w.globals.selection !== null) {\n        var scalingAttrs = {\n          transform: 'translate(' + translateX + ', ' + translateY + ')' // change styles based on zoom or selection\n          // zoom is Enabled and user has dragged, so draw blue rect\n\n        };\n\n        if (w.globals.zoomEnabled && this.dragged) {\n          zoomRect.attr({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            fill: w.config.chart.zoom.zoomedArea.fill.color,\n            'fill-opacity': w.config.chart.zoom.zoomedArea.fill.opacity,\n            stroke: w.config.chart.zoom.zoomedArea.stroke.color,\n            'stroke-width': w.config.chart.zoom.zoomedArea.stroke.width,\n            'stroke-opacity': w.config.chart.zoom.zoomedArea.stroke.opacity\n          });\n          Graphics.setAttrs(zoomRect.node, scalingAttrs);\n        } // selection is enabled\n\n\n        if (w.globals.selectionEnabled) {\n          selectionRect.attr({\n            x: x,\n            y: y,\n            width: width > 0 ? width : 0,\n            height: height > 0 ? height : 0,\n            fill: w.config.chart.selection.fill.color,\n            'fill-opacity': w.config.chart.selection.fill.opacity,\n            stroke: w.config.chart.selection.stroke.color,\n            'stroke-width': w.config.chart.selection.stroke.width,\n            'stroke-dasharray': w.config.chart.selection.stroke.dashArray,\n            'stroke-opacity': w.config.chart.selection.stroke.opacity\n          });\n          Graphics.setAttrs(selectionRect.node, scalingAttrs);\n        }\n      }\n    }\n  }, {\n    key: \"hideSelectionRect\",\n    value: function hideSelectionRect(rect) {\n      if (rect) {\n        rect.attr({\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        });\n      }\n    }\n  }, {\n    key: \"selectionDrawing\",\n    value: function selectionDrawing(_ref3) {\n      var context = _ref3.context,\n          zoomtype = _ref3.zoomtype;\n      var w = this.w;\n      var me = context;\n      var gridRectDim = this.gridRect.getBoundingClientRect();\n      var startX = me.startX - 1;\n      var startY = me.startY;\n      var selectionWidth = me.clientX - gridRectDim.left - startX;\n      var selectionHeight = me.clientY - gridRectDim.top - startY;\n      var translateX = 0;\n      var translateY = 0;\n      var selectionRect = {};\n\n      if (Math.abs(selectionWidth + startX) > w.globals.gridWidth || me.clientX - gridRectDim.left < 0) {\n        // user dragged the mouse outside drawing area\n        // TODO: test the selectionRect and make sure it doesn't crosses drawing area\n        me.hideSelectionRect(this.zoomRect);\n        me.dragged = false;\n        me.w.globals.mousedown = false;\n      } // inverse selection X\n\n\n      if (startX > me.clientX - gridRectDim.left) {\n        selectionWidth = Math.abs(selectionWidth);\n        translateX = -selectionWidth;\n      } // inverse selection Y\n\n\n      if (startY > me.clientY - gridRectDim.top) {\n        selectionHeight = Math.abs(selectionHeight);\n        translateY = -selectionHeight;\n      }\n\n      if (zoomtype === 'x') {\n        selectionRect = {\n          x: startX,\n          y: 0,\n          width: selectionWidth,\n          height: w.globals.gridHeight,\n          translateX: translateX,\n          translateY: 0\n        };\n      } else if (zoomtype === 'y') {\n        selectionRect = {\n          x: 0,\n          y: startY,\n          width: w.globals.gridWidth,\n          height: selectionHeight,\n          translateX: 0,\n          translateY: translateY\n        };\n      } else {\n        selectionRect = {\n          x: startX,\n          y: startY,\n          width: selectionWidth,\n          height: selectionHeight,\n          translateX: translateX,\n          translateY: translateY\n        };\n      }\n\n      me.drawSelectionRect(selectionRect);\n      me.selectionDragging('resizing');\n      return selectionRect;\n    }\n  }, {\n    key: \"selectionDragging\",\n    value: function selectionDragging(type, e) {\n      var _this4 = this;\n\n      var w = this.w;\n      var xyRatios = this.xyRatios;\n      var selRect = this.selectionRect;\n      var timerInterval = 0;\n\n      if (type === 'resizing') {\n        timerInterval = 30;\n      }\n\n      if (typeof w.config.chart.events.selection === 'function') {\n        // a small debouncer is required when resizing to avoid freezing the chart\n        clearTimeout(this.w.globals.selectionResizeTimer);\n        this.w.globals.selectionResizeTimer = window.setTimeout(function () {\n          var gridRectDim = _this4.gridRect.getBoundingClientRect();\n\n          var selectionRect = selRect.node.getBoundingClientRect();\n          var minX = w.globals.xAxisScale.niceMin + (selectionRect.left - gridRectDim.left) * xyRatios.xRatio;\n          var maxX = w.globals.xAxisScale.niceMin + (selectionRect.right - gridRectDim.left) * xyRatios.xRatio;\n          var minY = w.globals.yAxisScale[0].niceMin + (gridRectDim.bottom - selectionRect.bottom) * xyRatios.yRatio[0];\n          var maxY = w.globals.yAxisScale[0].niceMax - (selectionRect.top - gridRectDim.top) * xyRatios.yRatio[0];\n          w.config.chart.events.selection(_this4.ctx, {\n            xaxis: {\n              min: minX,\n              max: maxX\n            },\n            yaxis: {\n              min: minY,\n              max: maxY\n            }\n          });\n        }, timerInterval);\n      }\n    }\n  }, {\n    key: \"selectionDrawn\",\n    value: function selectionDrawn(_ref4) {\n      var context = _ref4.context,\n          zoomtype = _ref4.zoomtype;\n      var w = this.w;\n      var me = context;\n      var xyRatios = this.xyRatios;\n      var toolbar = this.ctx.toolbar;\n\n      if (me.startX > me.endX) {\n        var tempX = me.startX;\n        me.startX = me.endX;\n        me.endX = tempX;\n      }\n\n      if (me.startY > me.endY) {\n        var tempY = me.startY;\n        me.startY = me.endY;\n        me.endY = tempY;\n      }\n\n      var xLowestValue = w.globals.xAxisScale.niceMin + me.startX * xyRatios.xRatio;\n      var xHighestValue = w.globals.xAxisScale.niceMin + me.endX * xyRatios.xRatio; // TODO: we will consider the 1st y axis values here for getting highest and lowest y\n\n      var yHighestValue = [];\n      var yLowestValue = [];\n      w.config.yaxis.forEach(function (yaxe, index) {\n        yHighestValue.push(Math.floor(w.globals.yAxisScale[index].niceMax - xyRatios.yRatio[index] * me.startY));\n        yLowestValue.push(Math.floor(w.globals.yAxisScale[index].niceMax - xyRatios.yRatio[index] * me.endY));\n      });\n\n      if (me.dragged && (me.dragX > 10 || me.dragY > 10) && xLowestValue !== xHighestValue) {\n        if (w.globals.zoomEnabled) {\n          var yaxis = Utils.clone(w.config.yaxis); // before zooming in/out, store the last yaxis and xaxis range, so that when user hits the RESET button, we get the original range\n          // also - make sure user is not already zoomed in/out - otherwise we will store zoomed values in lastAxis\n\n          if (!w.globals.zoomed) {\n            w.globals.lastXAxis = Utils.clone(w.config.xaxis);\n            w.globals.lastYAxis = Utils.clone(w.config.yaxis);\n          }\n\n          var xaxis = {\n            min: xLowestValue,\n            max: xHighestValue\n          };\n\n          if (zoomtype === 'xy' || zoomtype === 'y') {\n            yaxis.forEach(function (yaxe, index) {\n              yaxis[index].min = yLowestValue[index];\n              yaxis[index].max = yHighestValue[index];\n            });\n          }\n\n          if (w.config.chart.zoom.autoScaleYaxis) {\n            var scale = new Range(me.ctx);\n            yaxis = scale.autoScaleY(me.ctx, {\n              xaxis: xaxis\n            });\n          }\n\n          if (toolbar) {\n            var beforeZoomRange = toolbar.getBeforeZoomRange(xaxis, yaxis);\n\n            if (beforeZoomRange) {\n              xaxis = beforeZoomRange.xaxis ? beforeZoomRange.xaxis : xaxis;\n              yaxis = beforeZoomRange.yaxis ? beforeZoomRange.yaxe : yaxis;\n            }\n          }\n\n          if (zoomtype === 'x') {\n            me.ctx._updateOptions({\n              xaxis: xaxis\n            }, false, me.w.config.chart.animations.dynamicAnimation.enabled);\n          } else if (zoomtype === 'y') {\n            me.ctx._updateOptions({\n              yaxis: yaxis\n            }, false, me.w.config.chart.animations.dynamicAnimation.enabled);\n          } else {\n            me.ctx._updateOptions({\n              xaxis: xaxis,\n              yaxis: yaxis\n            }, false, me.w.config.chart.animations.dynamicAnimation.enabled);\n          }\n\n          if (typeof w.config.chart.events.zoomed === 'function') {\n            toolbar.zoomCallback(xaxis, yaxis);\n          }\n\n          w.globals.zoomed = true;\n        } else if (w.globals.selectionEnabled) {\n          var _yaxis = null;\n          var _xaxis = null;\n          _xaxis = {\n            min: xLowestValue,\n            max: xHighestValue\n          };\n\n          if (zoomtype === 'xy' || zoomtype === 'y') {\n            _yaxis = Utils.clone(w.config.yaxis);\n\n            _yaxis.forEach(function (yaxe, index) {\n              _yaxis[index].min = yLowestValue[index];\n              _yaxis[index].max = yHighestValue[index];\n            });\n          }\n\n          w.globals.selection = me.selection;\n\n          if (typeof w.config.chart.events.selection === 'function') {\n            w.config.chart.events.selection(me.ctx, {\n              xaxis: _xaxis,\n              yaxis: _yaxis\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"panDragging\",\n    value: function panDragging(_ref5) {\n      var context = _ref5.context,\n          zoomtype = _ref5.zoomtype;\n      var w = this.w;\n      var me = context;\n      var moveDirection; // check to make sure there is data to compare against\n\n      if (typeof w.globals.lastClientPosition.x !== 'undefined') {\n        // get the change from last position to this position\n        var deltaX = w.globals.lastClientPosition.x - me.clientX;\n        var deltaY = w.globals.lastClientPosition.y - me.clientY; // check which direction had the highest amplitude and then figure out direction by checking if the value is greater or less than zero\n\n        if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > 0) {\n          moveDirection = 'left';\n        } else if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX < 0) {\n          moveDirection = 'right';\n        } else if (Math.abs(deltaY) > Math.abs(deltaX) && deltaY > 0) {\n          moveDirection = 'up';\n        } else if (Math.abs(deltaY) > Math.abs(deltaX) && deltaY < 0) {\n          moveDirection = 'down';\n        }\n      } // set the new last position to the current for next time (to get the position of drag)\n\n\n      w.globals.lastClientPosition = {\n        x: me.clientX,\n        y: me.clientY\n      };\n      var xLowestValue = w.globals.minX;\n      var xHighestValue = w.globals.maxX;\n      this.panScrolled(moveDirection, xLowestValue, xHighestValue);\n    }\n  }, {\n    key: \"panScrolled\",\n    value: function panScrolled(moveDirection, xLowestValue, xHighestValue) {\n      var w = this.w;\n      var xyRatios = this.xyRatios;\n      var yaxis = Utils.clone(w.config.yaxis);\n\n      if (moveDirection === 'left') {\n        xLowestValue = w.globals.minX + w.globals.gridWidth / 15 * xyRatios.xRatio;\n        xHighestValue = w.globals.maxX + w.globals.gridWidth / 15 * xyRatios.xRatio;\n      } else if (moveDirection === 'right') {\n        xLowestValue = w.globals.minX - w.globals.gridWidth / 15 * xyRatios.xRatio;\n        xHighestValue = w.globals.maxX - w.globals.gridWidth / 15 * xyRatios.xRatio;\n      }\n\n      if (xLowestValue < w.globals.initialminX || xHighestValue > w.globals.initialmaxX) {\n        xLowestValue = w.globals.minX;\n        xHighestValue = w.globals.maxX;\n      }\n\n      var xaxis = {\n        min: xLowestValue,\n        max: xHighestValue\n      };\n\n      if (w.config.chart.zoom.autoScaleYaxis) {\n        var scale = new Range(me.ctx);\n        yaxis = scale.autoScaleY(me.ctx, {\n          xaxis: xaxis\n        });\n      }\n\n      this.ctx._updateOptions({\n        xaxis: {\n          min: xLowestValue,\n          max: xHighestValue\n        },\n        yaxis: yaxis\n      }, false, false);\n\n      if (typeof w.config.chart.events.scrolled === 'function') {\n        w.config.chart.events.scrolled(this.ctx, {\n          xaxis: {\n            min: xLowestValue,\n            max: xHighestValue\n          }\n        });\n      }\n    }\n  }]);\n\n  return ZoomPanSelection;\n}(Toolbar);\n\nvar TitleSubtitle =\n/*#__PURE__*/\nfunction () {\n  function TitleSubtitle(ctx) {\n    _classCallCheck(this, TitleSubtitle);\n\n    this.ctx = ctx;\n    this.w = ctx.w;\n  }\n\n  _createClass(TitleSubtitle, [{\n    key: \"draw\",\n    value: function draw() {\n      this.drawTitleSubtitle('title');\n      this.drawTitleSubtitle('subtitle');\n    }\n  }, {\n    key: \"drawTitleSubtitle\",\n    value: function drawTitleSubtitle(type) {\n      var w = this.w;\n      var tsConfig = type === 'title' ? w.config.title : w.config.subtitle;\n      var x = w.globals.svgWidth / 2;\n      var y = tsConfig.offsetY;\n      var textAnchor = 'middle';\n\n      if (tsConfig.align === 'left') {\n        x = 10;\n        textAnchor = 'start';\n      } else if (tsConfig.align === 'right') {\n        x = w.globals.svgWidth - 10;\n        textAnchor = 'end';\n      }\n\n      x = x + tsConfig.offsetX;\n      y = y + parseInt(tsConfig.style.fontSize) + 2;\n\n      if (tsConfig.text !== undefined) {\n        var graphics = new Graphics(this.ctx);\n        var titleText = graphics.drawText({\n          x: x,\n          y: y,\n          text: tsConfig.text,\n          textAnchor: textAnchor,\n          fontSize: tsConfig.style.fontSize,\n          fontFamily: tsConfig.style.fontFamily,\n          foreColor: tsConfig.style.color,\n          opacity: 1\n        });\n        titleText.node.setAttribute('class', \"apexcharts-\".concat(type, \"-text\"));\n        w.globals.dom.Paper.add(titleText);\n      }\n    }\n  }]);\n\n  return TitleSubtitle;\n}();\n\n(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    define(function () {\n      return factory(root, root.document);\n    });\n    /* below check fixes #412 */\n  } else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined') {\n    module.exports = root.document ? factory(root, root.document) : function (w) {\n      return factory(w, w.document);\n    };\n  } else {\n    root.SVG = factory(root, root.document);\n  }\n})(typeof window !== 'undefined' ? window : undefined, function (window, document) {\n  // Find global reference - uses 'this' by default when available,\n  // falls back to 'window' otherwise (for bundlers like Webpack)\n  var globalRef = typeof this !== 'undefined' ? this : window; // The main wrapping element\n\n  var SVG = globalRef.SVG = function (element) {\n    if (SVG.supported) {\n      element = new SVG.Doc(element);\n\n      if (!SVG.parser.draw) {\n        SVG.prepare();\n      }\n\n      return element;\n    }\n  }; // Default namespaces\n\n\n  SVG.ns = 'http://www.w3.org/2000/svg';\n  SVG.xmlns = 'http://www.w3.org/2000/xmlns/';\n  SVG.xlink = 'http://www.w3.org/1999/xlink';\n  SVG.svgjs = 'http://svgjs.com/svgjs'; // Svg support test\n\n  SVG.supported = function () {\n    return true; // !!document.createElementNS &&\n    //     !! document.createElementNS(SVG.ns,'svg').createSVGRect\n  }(); // Don't bother to continue if SVG is not supported\n\n\n  if (!SVG.supported) return false; // Element id sequence\n\n  SVG.did = 1000; // Get next named element id\n\n  SVG.eid = function (name) {\n    return 'Svgjs' + capitalize(name) + SVG.did++;\n  }; // Method for element creation\n\n\n  SVG.create = function (name) {\n    // create element\n    var element = document.createElementNS(this.ns, name); // apply unique id\n\n    element.setAttribute('id', this.eid(name));\n    return element;\n  }; // Method for extending objects\n\n\n  SVG.extend = function () {\n    var modules, methods, key, i; // Get list of modules\n\n    modules = [].slice.call(arguments); // Get object with extensions\n\n    methods = modules.pop();\n\n    for (i = modules.length - 1; i >= 0; i--) {\n      if (modules[i]) {\n        for (key in methods) {\n          modules[i].prototype[key] = methods[key];\n        }\n      }\n    } // Make sure SVG.Set inherits any newly added methods\n\n\n    if (SVG.Set && SVG.Set.inherit) {\n      SVG.Set.inherit();\n    }\n  }; // Invent new element\n\n\n  SVG.invent = function (config) {\n    // Create element initializer\n    var initializer = typeof config.create === 'function' ? config.create : function () {\n      this.constructor.call(this, SVG.create(config.create));\n    }; // Inherit prototype\n\n    if (config.inherit) {\n      initializer.prototype = new config.inherit();\n    } // Extend with methods\n\n\n    if (config.extend) {\n      SVG.extend(initializer, config.extend);\n    } // Attach construct method to parent\n\n\n    if (config.construct) {\n      SVG.extend(config.parent || SVG.Container, config.construct);\n    }\n\n    return initializer;\n  }; // Adopt existing svg elements\n\n\n  SVG.adopt = function (node) {\n    // check for presence of node\n    if (!node) return null; // make sure a node isn't already adopted\n\n    if (node.instance) return node.instance; // initialize variables\n\n    var element; // adopt with element-specific settings\n\n    if (node.nodeName == 'svg') {\n      element = node.parentNode instanceof window.SVGElement ? new SVG.Nested() : new SVG.Doc();\n    } else if (node.nodeName == 'linearGradient') {\n      element = new SVG.Gradient('linear');\n    } else if (node.nodeName == 'radialGradient') {\n      element = new SVG.Gradient('radial');\n    } else if (SVG[capitalize(node.nodeName)]) {\n      element = new SVG[capitalize(node.nodeName)]();\n    } else {\n      element = new SVG.Element(node);\n    } // ensure references\n\n\n    element.type = node.nodeName;\n    element.node = node;\n    node.instance = element; // SVG.Class specific preparations\n\n    if (element instanceof SVG.Doc) {\n      element.namespace().defs();\n    } // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\n\n\n    element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {});\n    return element;\n  }; // Initialize parsing element\n\n\n  SVG.prepare = function () {\n    // Select document body and create invisible svg element\n    var body = document.getElementsByTagName('body')[0],\n        draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0); // Create parser object\n\n    SVG.parser = {\n      body: body || document.documentElement,\n      draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').node,\n      poly: draw.polyline().node,\n      path: draw.path().node,\n      native: SVG.create('svg')\n    };\n  };\n\n  SVG.parser = {\n    native: SVG.create('svg')\n  };\n  document.addEventListener('DOMContentLoaded', function () {\n    if (!SVG.parser.draw) {\n      SVG.prepare();\n    }\n  }, false); // Storage for regular expressions\n\n  SVG.regex = {\n    // Parse unit value\n    numberAndUnit: /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i,\n    // Parse hex value\n    hex: /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i,\n    // Parse rgb value\n    rgb: /rgb\\((\\d+),(\\d+),(\\d+)\\)/,\n    // Parse reference id\n    reference: /#([a-z0-9\\-_]+)/i,\n    // splits a transformation chain\n    transforms: /\\)\\s*,?\\s*/,\n    // Whitespace\n    whitespace: /\\s/g,\n    // Test hex value\n    isHex: /^#[a-f0-9]{3,6}$/i,\n    // Test rgb value\n    isRgb: /^rgb\\(/,\n    // Test css declaration\n    isCss: /[^:]+:[^;]+;?/,\n    // Test for blank string\n    isBlank: /^(\\s+)?$/,\n    // Test for numeric string\n    isNumber: /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\n    // Test for percent value\n    isPercent: /^-?[\\d\\.]+%$/,\n    // Test for image url\n    isImage: /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i,\n    // split at whitespace and comma\n    delimiter: /[\\s,]+/,\n    // The following regex are used to parse the d attribute of a path\n    // Matches all hyphens which are not after an exponent\n    hyphen: /([^e])\\-/gi,\n    // Replaces and tests for all path letters\n    pathLetters: /[MLHVCSQTAZ]/gi,\n    // yes we need this one, too\n    isPathLetter: /[MLHVCSQTAZ]/i,\n    // matches 0.154.23.45\n    numbersWithDots: /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi,\n    // matches .\n    dots: /\\./g\n  };\n  SVG.utils = {\n    // Map function\n    map: function map(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        result.push(block(array[i]));\n      }\n\n      return result;\n    },\n    // Filter function\n    filter: function filter(array, block) {\n      var i,\n          il = array.length,\n          result = [];\n\n      for (i = 0; i < il; i++) {\n        if (block(array[i])) {\n          result.push(array[i]);\n        }\n      }\n\n      return result;\n    },\n    // Degrees to radians\n    radians: function radians(d) {\n      return d % 360 * Math.PI / 180;\n    },\n    // Radians to degrees\n    degrees: function degrees(r) {\n      return r * 180 / Math.PI % 360;\n    },\n    filterSVGElements: function filterSVGElements(nodes) {\n      return this.filter(nodes, function (el) {\n        return el instanceof window.SVGElement;\n      });\n    }\n  };\n  SVG.defaults = {\n    // Default attribute values\n    attrs: {\n      // fill and stroke\n      'fill-opacity': 1,\n      'stroke-opacity': 1,\n      'stroke-width': 0,\n      'stroke-linejoin': 'miter',\n      'stroke-linecap': 'butt',\n      fill: '#000000',\n      stroke: '#000000',\n      opacity: 1,\n      // position\n      x: 0,\n      y: 0,\n      cx: 0,\n      cy: 0,\n      // size\n      width: 0,\n      height: 0,\n      // radius\n      r: 0,\n      rx: 0,\n      ry: 0,\n      // gradient\n      offset: 0,\n      'stop-opacity': 1,\n      'stop-color': '#000000',\n      // text\n      'font-size': 16,\n      'font-family': 'Helvetica, Arial, sans-serif',\n      'text-anchor': 'start'\n    } // Module for color convertions\n\n  };\n\n  SVG.Color = function (color) {\n    var match; // initialize defaults\n\n    this.r = 0;\n    this.g = 0;\n    this.b = 0;\n    if (!color) return; // parse color\n\n    if (typeof color === 'string') {\n      if (SVG.regex.isRgb.test(color)) {\n        // get rgb values\n        match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace, '')); // parse numeric values\n\n        this.r = parseInt(match[1]);\n        this.g = parseInt(match[2]);\n        this.b = parseInt(match[3]);\n      } else if (SVG.regex.isHex.test(color)) {\n        // get hex values\n        match = SVG.regex.hex.exec(fullHex(color)); // parse numeric values\n\n        this.r = parseInt(match[1], 16);\n        this.g = parseInt(match[2], 16);\n        this.b = parseInt(match[3], 16);\n      }\n    } else if (_typeof(color) === 'object') {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n    }\n  };\n\n  SVG.extend(SVG.Color, {\n    // Default to hex conversion\n    toString: function toString() {\n      return this.toHex();\n    },\n    // Build hex value\n    toHex: function toHex() {\n      return '#' + compToHex(this.r) + compToHex(this.g) + compToHex(this.b);\n    },\n    // Build rgb value\n    toRgb: function toRgb() {\n      return 'rgb(' + [this.r, this.g, this.b].join() + ')';\n    },\n    // Calculate true brightness\n    brightness: function brightness() {\n      return this.r / 255 * 0.30 + this.g / 255 * 0.59 + this.b / 255 * 0.11;\n    },\n    // Make color morphable\n    morph: function morph(color) {\n      this.destination = new SVG.Color(color);\n      return this;\n    },\n    // Get morphed color at given position\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // normalise pos\n\n      pos = pos < 0 ? 0 : pos > 1 ? 1 : pos; // generate morphed color\n\n      return new SVG.Color({\n        r: ~~(this.r + (this.destination.r - this.r) * pos),\n        g: ~~(this.g + (this.destination.g - this.g) * pos),\n        b: ~~(this.b + (this.destination.b - this.b) * pos)\n      });\n    }\n  }); // Testers\n  // Test if given value is a color string\n\n  SVG.Color.test = function (color) {\n    color += '';\n    return SVG.regex.isHex.test(color) || SVG.regex.isRgb.test(color);\n  }; // Test if given value is a rgb object\n\n\n  SVG.Color.isRgb = function (color) {\n    return color && typeof color.r === 'number' && typeof color.g === 'number' && typeof color.b === 'number';\n  }; // Test if given value is a color\n\n\n  SVG.Color.isColor = function (color) {\n    return SVG.Color.isRgb(color) || SVG.Color.test(color);\n  }; // Module for array conversion\n\n\n  SVG.Array = function (array, fallback) {\n    array = (array || []).valueOf(); // if array is empty and fallback is provided, use fallback\n\n    if (array.length == 0 && fallback) {\n      array = fallback.valueOf();\n    } // parse array\n\n\n    this.value = this.parse(array);\n  };\n\n  SVG.extend(SVG.Array, {\n    // Make array morphable\n    morph: function morph(array) {\n      this.destination = this.parse(array); // normalize length of arrays\n\n      if (this.value.length != this.destination.length) {\n        var lastValue = this.value[this.value.length - 1],\n            lastDestination = this.destination[this.destination.length - 1];\n\n        while (this.value.length > this.destination.length) {\n          this.destination.push(lastDestination);\n        }\n\n        while (this.value.length < this.destination.length) {\n          this.value.push(lastValue);\n        }\n      }\n\n      return this;\n    },\n    // Clean up any duplicate points\n    settle: function settle() {\n      // find all unique values\n      for (var i = 0, il = this.value.length, seen = []; i < il; i++) {\n        if (seen.indexOf(this.value[i]) == -1) {\n          seen.push(this.value[i]);\n        }\n      } // set new value\n\n\n      return this.value = seen;\n    },\n    // Get morphed array at given position\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed array\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos);\n      }\n\n      return new SVG.Array(array);\n    },\n    // Convert array to string\n    toString: function toString() {\n      return this.value.join(' ');\n    },\n    // Real value\n    valueOf: function valueOf() {\n      return this.value;\n    },\n    // Parse whitespace separated string\n    parse: function parse(array) {\n      array = array.valueOf(); // if already is an array, no need to parse it\n\n      if (Array.isArray(array)) return array;\n      return this.split(array);\n    },\n    // Strip unnecessary whitespace\n    split: function split(string) {\n      return string.trim().split(SVG.regex.delimiter).map(parseFloat);\n    },\n    // Reverse array\n    reverse: function reverse() {\n      this.value.reverse();\n      return this;\n    },\n    clone: function clone() {\n      var clone = new this.constructor();\n      clone.value = array_clone(this.value);\n      return clone;\n    }\n  }); // Poly points array\n\n  SVG.PointArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [[0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PointArray.prototype = new SVG.Array();\n  SVG.PointArray.prototype.constructor = SVG.PointArray;\n  SVG.extend(SVG.PointArray, {\n    // Convert array to string\n    toString: function toString() {\n      // convert to a poly point string\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push(this.value[i].join(','));\n      }\n\n      return array.join(' ');\n    },\n    // Convert array to line object\n    toLine: function toLine() {\n      return {\n        x1: this.value[0][0],\n        y1: this.value[0][1],\n        x2: this.value[1][0],\n        y2: this.value[1][1]\n      };\n    },\n    // Get morphed array at given position\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this; // generate morphed point string\n\n      for (var i = 0, il = this.value.length, array = []; i < il; i++) {\n        array.push([this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos, this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos]);\n      }\n\n      return new SVG.PointArray(array);\n    },\n    // Parse point string and flat array\n    parse: function parse(array) {\n      var points = [];\n      array = array.valueOf(); // if it is an array\n\n      if (Array.isArray(array)) {\n        // and it is not flat, there is no need to parse it\n        if (Array.isArray(array[0])) {\n          // make sure to use a clone\n          return array.map(function (el) {\n            return el.slice();\n          });\n        } else if (array[0].x != null) {\n          // allow point objects to be passed\n          return array.map(function (el) {\n            return [el.x, el.y];\n          });\n        }\n      } else {\n        // Else, it is considered as a string\n        // parse points\n        array = array.trim().split(SVG.regex.delimiter).map(parseFloat);\n      } // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\n      // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\n\n\n      if (array.length % 2 !== 0) array.pop(); // wrap points in two-tuples and parse points as floats\n\n      for (var i = 0, len = array.length; i < len; i = i + 2) {\n        points.push([array[i], array[i + 1]]);\n      }\n\n      return points;\n    },\n    // Move point string\n    move: function move(x, y) {\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y; // move every point\n\n      if (!isNaN(x) && !isNaN(y)) {\n        for (var i = this.value.length - 1; i >= 0; i--) {\n          this.value[i] = [this.value[i][0] + x, this.value[i][1] + y];\n        }\n      }\n\n      return this;\n    },\n    // Resize poly string\n    size: function size(width, height) {\n      var i,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        if (box.width) this.value[i][0] = (this.value[i][0] - box.x) * width / box.width + box.x;\n        if (box.height) this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n      }\n\n      return this;\n    },\n    // Get bounding box of points\n    bbox: function bbox() {\n      if (!SVG.parser.draw) {\n        SVG.prepare();\n      }\n\n      SVG.parser.poly.setAttribute('points', this.toString());\n      return SVG.parser.poly.getBBox();\n    }\n  });\n  var pathHandlers = {\n    M: function M(c, p, p0) {\n      p.x = p0.x = c[0];\n      p.y = p0.y = c[1];\n      return ['M', p.x, p.y];\n    },\n    L: function L(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['L', c[0], c[1]];\n    },\n    H: function H(c, p) {\n      p.x = c[0];\n      return ['H', c[0]];\n    },\n    V: function V(c, p) {\n      p.y = c[0];\n      return ['V', c[0]];\n    },\n    C: function C(c, p) {\n      p.x = c[4];\n      p.y = c[5];\n      return ['C', c[0], c[1], c[2], c[3], c[4], c[5]];\n    },\n    S: function S(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['S', c[0], c[1], c[2], c[3]];\n    },\n    Q: function Q(c, p) {\n      p.x = c[2];\n      p.y = c[3];\n      return ['Q', c[0], c[1], c[2], c[3]];\n    },\n    T: function T(c, p) {\n      p.x = c[0];\n      p.y = c[1];\n      return ['T', c[0], c[1]];\n    },\n    Z: function Z(c, p, p0) {\n      p.x = p0.x;\n      p.y = p0.y;\n      return ['Z'];\n    },\n    A: function A(c, p) {\n      p.x = c[5];\n      p.y = c[6];\n      return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]];\n    }\n  };\n  var mlhvqtcsa = 'mlhvqtcsaz'.split('');\n\n  for (var i = 0, il = mlhvqtcsa.length; i < il; ++i) {\n    pathHandlers[mlhvqtcsa[i]] = function (i) {\n      return function (c, p, p0) {\n        if (i == 'H') c[0] = c[0] + p.x;else if (i == 'V') c[0] = c[0] + p.y;else if (i == 'A') {\n          c[5] = c[5] + p.x, c[6] = c[6] + p.y;\n        } else {\n          for (var j = 0, jl = c.length; j < jl; ++j) {\n            c[j] = c[j] + (j % 2 ? p.y : p.x);\n          }\n        }\n        return pathHandlers[i](c, p, p0);\n      };\n    }(mlhvqtcsa[i].toUpperCase());\n  } // Path points array\n\n\n  SVG.PathArray = function (array, fallback) {\n    SVG.Array.call(this, array, fallback || [['M', 0, 0]]);\n  }; // Inherit from SVG.Array\n\n\n  SVG.PathArray.prototype = new SVG.Array();\n  SVG.PathArray.prototype.constructor = SVG.PathArray;\n  SVG.extend(SVG.PathArray, {\n    // Convert array to string\n    toString: function toString() {\n      return arrayToString(this.value);\n    },\n    // Move path string\n    move: function move(x, y) {\n      // get bounding box of current situation\n      var box = this.bbox(); // get relative offset\n\n      x -= box.x;\n      y -= box.y;\n\n      if (!isNaN(x) && !isNaN(y)) {\n        // move every point\n        for (var l, i = this.value.length - 1; i >= 0; i--) {\n          l = this.value[i][0];\n\n          if (l == 'M' || l == 'L' || l == 'T') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n          } else if (l == 'H') {\n            this.value[i][1] += x;\n          } else if (l == 'V') {\n            this.value[i][1] += y;\n          } else if (l == 'C' || l == 'S' || l == 'Q') {\n            this.value[i][1] += x;\n            this.value[i][2] += y;\n            this.value[i][3] += x;\n            this.value[i][4] += y;\n\n            if (l == 'C') {\n              this.value[i][5] += x;\n              this.value[i][6] += y;\n            }\n          } else if (l == 'A') {\n            this.value[i][6] += x;\n            this.value[i][7] += y;\n          }\n        }\n      }\n\n      return this;\n    },\n    // Resize path string\n    size: function size(width, height) {\n      // get bounding box of current situation\n      var i,\n          l,\n          box = this.bbox(); // recalculate position of all points according to new size\n\n      for (i = this.value.length - 1; i >= 0; i--) {\n        l = this.value[i][0];\n\n        if (l == 'M' || l == 'L' || l == 'T') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n        } else if (l == 'H') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n        } else if (l == 'V') {\n          this.value[i][1] = (this.value[i][1] - box.y) * height / box.height + box.y;\n        } else if (l == 'C' || l == 'S' || l == 'Q') {\n          this.value[i][1] = (this.value[i][1] - box.x) * width / box.width + box.x;\n          this.value[i][2] = (this.value[i][2] - box.y) * height / box.height + box.y;\n          this.value[i][3] = (this.value[i][3] - box.x) * width / box.width + box.x;\n          this.value[i][4] = (this.value[i][4] - box.y) * height / box.height + box.y;\n\n          if (l == 'C') {\n            this.value[i][5] = (this.value[i][5] - box.x) * width / box.width + box.x;\n            this.value[i][6] = (this.value[i][6] - box.y) * height / box.height + box.y;\n          }\n        } else if (l == 'A') {\n          // resize radii\n          this.value[i][1] = this.value[i][1] * width / box.width;\n          this.value[i][2] = this.value[i][2] * height / box.height; // move position values\n\n          this.value[i][6] = (this.value[i][6] - box.x) * width / box.width + box.x;\n          this.value[i][7] = (this.value[i][7] - box.y) * height / box.height + box.y;\n        }\n      }\n\n      return this;\n    },\n    // Test if the passed path array use the same path data commands as this path array\n    equalCommands: function equalCommands(pathArray) {\n      var i, il, equalCommands;\n      pathArray = new SVG.PathArray(pathArray);\n      equalCommands = this.value.length === pathArray.value.length;\n\n      for (i = 0, il = this.value.length; equalCommands && i < il; i++) {\n        equalCommands = this.value[i][0] === pathArray.value[i][0];\n      }\n\n      return equalCommands;\n    },\n    // Make path array morphable\n    morph: function morph(pathArray) {\n      pathArray = new SVG.PathArray(pathArray);\n\n      if (this.equalCommands(pathArray)) {\n        this.destination = pathArray;\n      } else {\n        this.destination = null;\n      }\n\n      return this;\n    },\n    // Get morphed path array at given position\n    at: function at(pos) {\n      // make sure a destination is defined\n      if (!this.destination) return this;\n      var sourceArray = this.value,\n          destinationArray = this.destination.value,\n          array = [],\n          pathArray = new SVG.PathArray(),\n          i,\n          il,\n          j,\n          jl; // Animate has specified in the SVG spec\n      // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\n\n      for (i = 0, il = sourceArray.length; i < il; i++) {\n        array[i] = [sourceArray[i][0]];\n\n        for (j = 1, jl = sourceArray[i].length; j < jl; j++) {\n          array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos;\n        } // For the two flags of the elliptical arc command, the SVG spec say:\n        // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\n        // Elliptical arc command as an array followed by corresponding indexes:\n        // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\n        //   0    1   2        3                 4             5      6  7\n\n\n        if (array[i][0] === 'A') {\n          array[i][4] = +(array[i][4] != 0);\n          array[i][5] = +(array[i][5] != 0);\n        }\n      } // Directly modify the value of a path array, this is done this way for performance\n\n\n      pathArray.value = array;\n      return pathArray;\n    },\n    // Absolutize and parse path to array\n    parse: function parse(array) {\n      // if it's already a patharray, no need to parse it\n      if (array instanceof SVG.PathArray) return array.valueOf(); // prepare for parsing\n\n      var s,\n          arr,\n          paramCnt = {\n        'M': 2,\n        'L': 2,\n        'H': 1,\n        'V': 1,\n        'C': 6,\n        'S': 4,\n        'Q': 4,\n        'T': 2,\n        'A': 7,\n        'Z': 0\n      };\n\n      if (typeof array === 'string') {\n        array = array.replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\n        .replace(SVG.regex.hyphen, '$1 -') // add space before hyphen\n        .trim() // trim\n        .split(SVG.regex.delimiter); // split into array\n      } else {\n        array = array.reduce(function (prev, curr) {\n          return [].concat.call(prev, curr);\n        }, []);\n      } // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\n\n\n      var arr = [],\n          p = new SVG.Point(),\n          p0 = new SVG.Point(),\n          index = 0,\n          len = array.length;\n\n      do {\n        // Test if we have a path letter\n        if (SVG.regex.isPathLetter.test(array[index])) {\n          s = array[index];\n          ++index; // If last letter was a move command and we got no new, it defaults to [L]ine\n        } else if (s == 'M') {\n          s = 'L';\n        } else if (s == 'm') {\n          s = 'l';\n        }\n\n        arr.push(pathHandlers[s].call(null, array.slice(index, index = index + paramCnt[s.toUpperCase()]).map(parseFloat), p, p0));\n      } while (len > index);\n\n      return arr;\n    },\n    // Get bounding box of path\n    bbox: function bbox() {\n      if (!SVG.parser.draw) {\n        SVG.prepare();\n      }\n\n      SVG.parser.path.setAttribute('d', this.toString());\n      return SVG.parser.path.getBBox();\n    }\n  }); // Module for unit convertions\n\n  SVG.Number = SVG.invent({\n    // Initialize\n    create: function create(value, unit) {\n      // initialize defaults\n      this.value = 0;\n      this.unit = unit || ''; // parse value\n\n      if (typeof value === 'number') {\n        // ensure a valid numeric value\n        this.value = isNaN(value) ? 0 : !isFinite(value) ? value < 0 ? -3.4e+38 : +3.4e+38 : value;\n      } else if (typeof value === 'string') {\n        unit = value.match(SVG.regex.numberAndUnit);\n\n        if (unit) {\n          // make value numeric\n          this.value = parseFloat(unit[1]); // normalize\n\n          if (unit[5] == '%') {\n            this.value /= 100;\n          } else if (unit[5] == 's') {\n            this.value *= 1000;\n          } // store unit\n\n\n          this.unit = unit[5];\n        }\n      } else {\n        if (value instanceof SVG.Number) {\n          this.value = value.valueOf();\n          this.unit = value.unit;\n        }\n      }\n    },\n    // Add methods\n    extend: {\n      // Stringalize\n      toString: function toString() {\n        return (this.unit == '%' ? ~~(this.value * 1e8) / 1e6 : this.unit == 's' ? this.value / 1e3 : this.value) + this.unit;\n      },\n      toJSON: function toJSON() {\n        return this.toString();\n      },\n      // Convert to primitive\n      valueOf: function valueOf() {\n        return this.value;\n      },\n      // Add number\n      plus: function plus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this + number, this.unit || number.unit);\n      },\n      // Subtract number\n      minus: function minus(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this - number, this.unit || number.unit);\n      },\n      // Multiply number\n      times: function times(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this * number, this.unit || number.unit);\n      },\n      // Divide number\n      divide: function divide(number) {\n        number = new SVG.Number(number);\n        return new SVG.Number(this / number, this.unit || number.unit);\n      },\n      // Convert to different unit\n      to: function to(unit) {\n        var number = new SVG.Number(this);\n\n        if (typeof unit === 'string') {\n          number.unit = unit;\n        }\n\n        return number;\n      },\n      // Make number morphable\n      morph: function morph(number) {\n        this.destination = new SVG.Number(number);\n\n        if (number.relative) {\n          this.destination.value += this.value;\n        }\n\n        return this;\n      },\n      // Get morphed number at given position\n      at: function at(pos) {\n        // Make sure a destination is defined\n        if (!this.destination) return this; // Generate new morphed number\n\n        return new SVG.Number(this.destination).minus(this).times(pos).plus(this);\n      }\n    }\n  });\n  SVG.Element = SVG.invent({\n    // Initialize node\n    create: function create(node) {\n      // make stroke value accessible dynamically\n      this._stroke = SVG.defaults.attrs.stroke;\n      this._event = null; // initialize data object\n\n      this.dom = {}; // create circular reference\n\n      if (this.node = node) {\n        this.type = node.nodeName;\n        this.node.instance = this; // store current attribute value\n\n        this._stroke = node.getAttribute('stroke') || this._stroke;\n      }\n    },\n    // Add class methods\n    extend: {\n      // Move over x-axis\n      x: function x(_x) {\n        return this.attr('x', _x);\n      },\n      // Move over y-axis\n      y: function y(_y) {\n        return this.attr('y', _y);\n      },\n      // Move by center over x-axis\n      cx: function cx(x) {\n        return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2);\n      },\n      // Move by center over y-axis\n      cy: function cy(y) {\n        return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2);\n      },\n      // Move element to given x and y values\n      move: function move(x, y) {\n        return this.x(x).y(y);\n      },\n      // Move element by its center\n      center: function center(x, y) {\n        return this.cx(x).cy(y);\n      },\n      // Set width of element\n      width: function width(_width) {\n        return this.attr('width', _width);\n      },\n      // Set height of element\n      height: function height(_height) {\n        return this.attr('height', _height);\n      },\n      // Set element size to given width and height\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.width(new SVG.Number(p.width)).height(new SVG.Number(p.height));\n      },\n      // Clone element\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // clone element and assign new id\n\n        var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) parent.add(clone);else this.after(clone);\n        return clone;\n      },\n      // Remove element\n      remove: function remove() {\n        if (this.parent()) {\n          this.parent().removeElement(this);\n        }\n\n        return this;\n      },\n      // Replace element\n      replace: function replace(element) {\n        this.after(element).remove();\n        return element;\n      },\n      // Add element to given container and return self\n      addTo: function addTo(parent) {\n        return parent.put(this);\n      },\n      // Add element to given container and return container\n      putIn: function putIn(parent) {\n        return parent.add(this);\n      },\n      // Get / set id\n      id: function id(_id) {\n        return this.attr('id', _id);\n      },\n      // Checks whether the given point inside the bounding box of the element\n      inside: function inside(x, y) {\n        var box = this.bbox();\n        return x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height;\n      },\n      // Show element\n      show: function show() {\n        return this.style('display', '');\n      },\n      // Hide element\n      hide: function hide() {\n        return this.style('display', 'none');\n      },\n      // Is element visible?\n      visible: function visible() {\n        return this.style('display') != 'none';\n      },\n      // Return id on string conversion\n      toString: function toString() {\n        return this.attr('id');\n      },\n      // Return array of classes on the node\n      classes: function classes() {\n        var attr = this.attr('class');\n        return attr == null ? [] : attr.trim().split(SVG.regex.delimiter);\n      },\n      // Return true if class exists on the node, false otherwise\n      hasClass: function hasClass(name) {\n        return this.classes().indexOf(name) != -1;\n      },\n      // Add class to the node\n      addClass: function addClass(name) {\n        if (!this.hasClass(name)) {\n          var array = this.classes();\n          array.push(name);\n          this.attr('class', array.join(' '));\n        }\n\n        return this;\n      },\n      // Remove class from the node\n      removeClass: function removeClass(name) {\n        if (this.hasClass(name)) {\n          this.attr('class', this.classes().filter(function (c) {\n            return c != name;\n          }).join(' '));\n        }\n\n        return this;\n      },\n      // Toggle the presence of a class on the node\n      toggleClass: function toggleClass(name) {\n        return this.hasClass(name) ? this.removeClass(name) : this.addClass(name);\n      },\n      // Get referenced element form attribute value\n      reference: function reference(attr) {\n        return SVG.get(this.attr(attr));\n      },\n      // Returns the parent element instance\n      parent: function parent(type) {\n        var parent = this; // check for parent\n\n        if (!parent.node.parentNode) return null; // get parent element\n\n        parent = SVG.adopt(parent.node.parentNode);\n        if (!type) return parent; // loop trough ancestors if type is given\n\n        while (parent && parent.node instanceof window.SVGElement) {\n          if (typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent;\n          if (!parent.node.parentNode || parent.node.parentNode.nodeName == '#document') return null; // #759, #720\n\n          parent = SVG.adopt(parent.node.parentNode);\n        }\n      },\n      // Get parent document\n      doc: function doc() {\n        return this instanceof SVG.Doc ? this : this.parent(SVG.Doc);\n      },\n      // return array of all ancestors of given type up to the root svg\n      parents: function parents(type) {\n        var parents = [],\n            parent = this;\n\n        do {\n          parent = parent.parent(type);\n          if (!parent || !parent.node) break;\n          parents.push(parent);\n        } while (parent.parent);\n\n        return parents;\n      },\n      // matches the element vs a css selector\n      matches: function matches(selector) {\n        return _matches(this.node, selector);\n      },\n      // Returns the svg node to call native svg methods on it\n      native: function native() {\n        return this.node;\n      },\n      // Import raw svg\n      svg: function svg(_svg) {\n        // create temporary holder\n        var well = document.createElement('svg'); // act as a setter if svg is given\n\n        if (_svg && this instanceof SVG.Parent) {\n          // dump raw svg\n          well.innerHTML = '<svg>' + _svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'; // transplant nodes\n\n          for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++) {\n            this.node.appendChild(well.firstChild.firstChild);\n          } // otherwise act as a getter\n\n        } else {\n          // create a wrapping svg element in case of partial content\n          well.appendChild(_svg = document.createElement('svg')); // write svgjs data to the dom\n\n          this.writeDataToDom(); // insert a copy of this node\n\n          _svg.appendChild(this.node.cloneNode(true)); // return target element\n\n\n          return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '');\n        }\n\n        return this;\n      },\n      // write svgjs data to the dom\n      writeDataToDom: function writeDataToDom() {\n        // dump variables recursively\n        if (this.each || this.lines) {\n          var fn = this.each ? this : this.lines();\n          fn.each(function () {\n            this.writeDataToDom();\n          });\n        } // remove previously set data\n\n\n        this.node.removeAttribute('svgjs:data');\n\n        if (Object.keys(this.dom).length) {\n          this.node.setAttribute('svgjs:data', JSON.stringify(this.dom));\n        } // see #428\n\n\n        return this;\n      },\n      // set given data to the elements data property\n      setData: function setData(o) {\n        this.dom = o;\n        return this;\n      },\n      is: function is(obj) {\n        return _is(this, obj);\n      }\n    }\n  });\n  SVG.easing = {\n    '-': function _(pos) {\n      return pos;\n    },\n    '<>': function _(pos) {\n      return -Math.cos(pos * Math.PI) / 2 + 0.5;\n    },\n    '>': function _(pos) {\n      return Math.sin(pos * Math.PI / 2);\n    },\n    '<': function _(pos) {\n      return -Math.cos(pos * Math.PI / 2) + 1;\n    }\n  };\n\n  SVG.morph = function (pos) {\n    return function (from, to) {\n      return new SVG.MorphObj(from, to).at(pos);\n    };\n  };\n\n  SVG.Situation = SVG.invent({\n    create: function create(o) {\n      this.init = false;\n      this.reversed = false;\n      this.reversing = false;\n      this.duration = new SVG.Number(o.duration).valueOf();\n      this.delay = new SVG.Number(o.delay).valueOf();\n      this.start = +new Date() + this.delay;\n      this.finish = this.start + this.duration;\n      this.ease = o.ease; // this.loop is incremented from 0 to this.loops\n      // it is also incremented when in an infinite loop (when this.loops is true)\n\n      this.loop = 0;\n      this.loops = false;\n      this.animations = {// functionToCall: [list of morphable objects]\n        // e.g. move: [SVG.Number, SVG.Number]\n      };\n      this.attrs = {// holds all attributes which are not represented from a function svg.js provides\n        // e.g. someAttr: SVG.Number\n      };\n      this.styles = {// holds all styles which should be animated\n        // e.g. fill-color: SVG.Color\n      };\n      this.transforms = [// holds all transformations as transformation objects\n        // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\n      ];\n      this.once = {// functions to fire at a specific position\n        // e.g. \"0.5\": function foo(){}\n      };\n    }\n  });\n  SVG.FX = SVG.invent({\n    create: function create(element) {\n      this._target = element;\n      this.situations = [];\n      this.active = false;\n      this.situation = null;\n      this.paused = false;\n      this.lastPos = 0;\n      this.pos = 0; // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\n      // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\n\n      this.absPos = 0;\n      this._speed = 1;\n    },\n    extend: {\n      /**\n       * sets or returns the target of this animation\n       * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\n       * @param ease function || string Function which should be used for easing or easing keyword\n       * @param delay Number indicating the delay before the animation starts\n       * @return target || this\n       */\n      animate: function animate(o, ease, delay) {\n        if (_typeof(o) === 'object') {\n          ease = o.ease;\n          delay = o.delay;\n          o = o.duration;\n        }\n\n        var situation = new SVG.Situation({\n          duration: o || 1000,\n          delay: delay || 0,\n          ease: SVG.easing[ease || '-'] || ease\n        });\n        this.queue(situation);\n        return this;\n      },\n\n      /**\n      * sets a delay before the next element of the queue is called\n      * @param delay Duration of delay in milliseconds\n      * @return this.target()\n      */\n      delay: function delay(_delay) {\n        // The delay is performed by an empty situation with its duration\n        // attribute set to the duration of the delay\n        var situation = new SVG.Situation({\n          duration: _delay,\n          delay: 0,\n          ease: SVG.easing['-']\n        });\n        return this.queue(situation);\n      },\n\n      /**\n      * sets or returns the target of this animation\n      * @param null || target SVG.Element which should be set as new target\n      * @return target || this\n      */\n      target: function target(_target) {\n        if (_target && _target instanceof SVG.Element) {\n          this._target = _target;\n          return this;\n        }\n\n        return this._target;\n      },\n      // returns the absolute position at a given time\n      timeToAbsPos: function timeToAbsPos(timestamp) {\n        return (timestamp - this.situation.start) / (this.situation.duration / this._speed);\n      },\n      // returns the timestamp from a given absolute positon\n      absPosToTime: function absPosToTime(absPos) {\n        return this.situation.duration / this._speed * absPos + this.situation.start;\n      },\n      // starts the animationloop\n      startAnimFrame: function startAnimFrame() {\n        this.stopAnimFrame();\n        this.animationFrame = window.requestAnimationFrame(function () {\n          this.step();\n        }.bind(this));\n      },\n      // cancels the animationframe\n      stopAnimFrame: function stopAnimFrame() {\n        window.cancelAnimationFrame(this.animationFrame);\n      },\n      // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\n      start: function start() {\n        // dont start if already started\n        if (!this.active && this.situation) {\n          this.active = true;\n          this.startCurrent();\n        }\n\n        return this;\n      },\n      // start the current situation\n      startCurrent: function startCurrent() {\n        this.situation.start = +new Date() + this.situation.delay / this._speed;\n        this.situation.finish = this.situation.start + this.situation.duration / this._speed;\n        return this.initAnimations().step();\n      },\n\n      /**\n      * adds a function / Situation to the animation queue\n      * @param fn function / situation to add\n      * @return this\n      */\n      queue: function queue(fn) {\n        if (typeof fn === 'function' || fn instanceof SVG.Situation) {\n          this.situations.push(fn);\n        }\n\n        if (!this.situation) this.situation = this.situations.shift();\n        return this;\n      },\n\n      /**\n      * pulls next element from the queue and execute it\n      * @return this\n      */\n      dequeue: function dequeue() {\n        // stop current animation\n        this.stop(); // get next animation from queue\n\n        this.situation = this.situations.shift();\n\n        if (this.situation) {\n          if (this.situation instanceof SVG.Situation) {\n            this.start();\n          } else {\n            // If it is not a SVG.Situation, then it is a function, we execute it\n            this.situation.call(this);\n          }\n        }\n\n        return this;\n      },\n      // updates all animations to the current state of the element\n      // this is important when one property could be changed from another property\n      initAnimations: function initAnimations() {\n        var i, j, source;\n        var s = this.situation;\n        if (s.init) return this;\n\n        for (i in s.animations) {\n          source = this.target()[i]();\n\n          if (!Array.isArray(source)) {\n            source = [source];\n          }\n\n          if (!Array.isArray(s.animations[i])) {\n            s.animations[i] = [s.animations[i]];\n          } // if(s.animations[i].length > source.length) {\n          //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\n          // }\n\n\n          for (j = source.length; j--;) {\n            // The condition is because some methods return a normal number instead\n            // of a SVG.Number\n            if (s.animations[i][j] instanceof SVG.Number) {\n              source[j] = new SVG.Number(source[j]);\n            }\n\n            s.animations[i][j] = source[j].morph(s.animations[i][j]);\n          }\n        }\n\n        for (i in s.attrs) {\n          s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i]);\n        }\n\n        for (i in s.styles) {\n          s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i]);\n        }\n\n        s.initialTransformation = this.target().matrixify();\n        s.init = true;\n        return this;\n      },\n      clearQueue: function clearQueue() {\n        this.situations = [];\n        return this;\n      },\n      clearCurrent: function clearCurrent() {\n        this.situation = null;\n        return this;\n      },\n\n      /** stops the animation immediately\n      * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\n      * @param clearQueue A Boolean indicating whether to remove queued animation as well.\n      * @return this\n      */\n      stop: function stop(jumpToEnd, clearQueue) {\n        var active = this.active;\n        this.active = false;\n\n        if (clearQueue) {\n          this.clearQueue();\n        }\n\n        if (jumpToEnd && this.situation) {\n          // initialize the situation if it was not\n          !active && this.startCurrent();\n          this.atEnd();\n        }\n\n        this.stopAnimFrame();\n        return this.clearCurrent();\n      },\n\n      /** resets the element to the state where the current element has started\n      * @return this\n      */\n      reset: function reset() {\n        if (this.situation) {\n          var temp = this.situation;\n          this.stop();\n          this.situation = temp;\n          this.atStart();\n        }\n\n        return this;\n      },\n      // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\n      finish: function finish() {\n        this.stop(true, false);\n\n        while (this.dequeue().situation && this.stop(true, false)) {\n        }\n\n        this.clearQueue().clearCurrent();\n        return this;\n      },\n      // set the internal animation pointer at the start position, before any loops, and updates the visualisation\n      atStart: function atStart() {\n        return this.at(0, true);\n      },\n      // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\n      atEnd: function atEnd() {\n        if (this.situation.loops === true) {\n          // If in a infinite loop, we end the current iteration\n          this.situation.loops = this.situation.loop + 1;\n        }\n\n        if (typeof this.situation.loops === 'number') {\n          // If performing a finite number of loops, we go after all the loops\n          return this.at(this.situation.loops, true);\n        } else {\n          // If no loops, we just go at the end\n          return this.at(1, true);\n        }\n      },\n      // set the internal animation pointer to the specified position and updates the visualisation\n      // if isAbsPos is true, pos is treated as an absolute position\n      at: function at(pos, isAbsPos) {\n        var durDivSpd = this.situation.duration / this._speed;\n        this.absPos = pos; // If pos is not an absolute position, we convert it into one\n\n        if (!isAbsPos) {\n          if (this.situation.reversed) this.absPos = 1 - this.absPos;\n          this.absPos += this.situation.loop;\n        }\n\n        this.situation.start = +new Date() - this.absPos * durDivSpd;\n        this.situation.finish = this.situation.start + durDivSpd;\n        return this.step(true);\n      },\n\n      /**\n      * sets or returns the speed of the animations\n      * @param speed null || Number The new speed of the animations\n      * @return Number || this\n      */\n      speed: function speed(_speed) {\n        if (_speed === 0) return this.pause();\n\n        if (_speed) {\n          this._speed = _speed; // We use an absolute position here so that speed can affect the delay before the animation\n\n          return this.at(this.absPos, true);\n        } else return this._speed;\n      },\n      // Make loopable\n      loop: function loop(times, reverse) {\n        var c = this.last(); // store total loops\n\n        c.loops = times != null ? times : true;\n        c.loop = 0;\n        if (reverse) c.reversing = true;\n        return this;\n      },\n      // pauses the animation\n      pause: function pause() {\n        this.paused = true;\n        this.stopAnimFrame();\n        return this;\n      },\n      // unpause the animation\n      play: function play() {\n        if (!this.paused) return this;\n        this.paused = false; // We use an absolute position here so that the delay before the animation can be paused\n\n        return this.at(this.absPos, true);\n      },\n\n      /**\n      * toggle or set the direction of the animation\n      * true sets direction to backwards while false sets it to forwards\n      * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\n      * @return this\n      */\n      reverse: function reverse(reversed) {\n        var c = this.last();\n        if (typeof reversed === 'undefined') c.reversed = !c.reversed;else c.reversed = reversed;\n        return this;\n      },\n\n      /**\n      * returns a float from 0-1 indicating the progress of the current animation\n      * @param eased Boolean indicating whether the returned position should be eased or not\n      * @return number\n      */\n      progress: function progress(easeIt) {\n        return easeIt ? this.situation.ease(this.pos) : this.pos;\n      },\n\n      /**\n      * adds a callback function which is called when the current animation is finished\n      * @param fn Function which should be executed as callback\n      * @return number\n      */\n      after: function after(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, c);\n            this.off('finished.fx', wrapper); // prevent memory leak\n          }\n        };\n\n        this.target().on('finished.fx', wrapper);\n        return this._callStart();\n      },\n      // adds a callback which is called whenever one animation step is performed\n      during: function during(fn) {\n        var c = this.last(),\n            wrapper = function wrapper(e) {\n          if (e.detail.situation == c) {\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c);\n          }\n        }; // see above\n\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.after(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      },\n      // calls after ALL animations in the queue are finished\n      afterAll: function afterAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this);\n          this.off('allfinished.fx', wrapper);\n        }; // see above\n\n\n        this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper);\n        return this._callStart();\n      },\n      // calls on every animation step for all animations\n      duringAll: function duringAll(fn) {\n        var wrapper = function wrapper(e) {\n          fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation);\n        };\n\n        this.target().off('during.fx', wrapper).on('during.fx', wrapper);\n        this.afterAll(function () {\n          this.off('during.fx', wrapper);\n        });\n        return this._callStart();\n      },\n      last: function last() {\n        return this.situations.length ? this.situations[this.situations.length - 1] : this.situation;\n      },\n      // adds one property to the animations\n      add: function add(method, args, type) {\n        this.last()[type || 'animations'][method] = args;\n        return this._callStart();\n      },\n\n      /** perform one step of the animation\n      *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\n      *  @return this\n      */\n      step: function step(ignoreTime) {\n        // convert current time to an absolute position\n        if (!ignoreTime) this.absPos = this.timeToAbsPos(+new Date()); // This part convert an absolute position to a position\n\n        if (this.situation.loops !== false) {\n          var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0\n\n          absPos = Math.max(this.absPos, 0);\n          absPosInt = Math.floor(absPos);\n\n          if (this.situation.loops === true || absPosInt < this.situation.loops) {\n            this.pos = absPos - absPosInt;\n            lastLoop = this.situation.loop;\n            this.situation.loop = absPosInt;\n          } else {\n            this.absPos = this.situation.loops;\n            this.pos = 1; // The -1 here is because we don't want to toggle reversed when all the loops have been completed\n\n            lastLoop = this.situation.loop - 1;\n            this.situation.loop = this.situation.loops;\n          }\n\n          if (this.situation.reversing) {\n            // Toggle reversed if an odd number of loops as occured since the last call of step\n            this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2);\n          }\n        } else {\n          // If there are no loop, the absolute position must not be above 1\n          this.absPos = Math.min(this.absPos, 1);\n          this.pos = this.absPos;\n        } // while the absolute position can be below 0, the position must not be below 0\n\n\n        if (this.pos < 0) this.pos = 0;\n        if (this.situation.reversed) this.pos = 1 - this.pos; // apply easing\n\n        var eased = this.situation.ease(this.pos); // call once-callbacks\n\n        for (var i in this.situation.once) {\n          if (i > this.lastPos && i <= eased) {\n            this.situation.once[i].call(this.target(), this.pos, eased);\n            delete this.situation.once[i];\n          }\n        } // fire during callback with position, eased position and current situation as parameter\n\n\n        if (this.active) this.target().fire('during', {\n          pos: this.pos,\n          eased: eased,\n          fx: this,\n          situation: this.situation\n        }); // the user may call stop or finish in the during callback\n        // so make sure that we still have a valid situation\n\n        if (!this.situation) {\n          return this;\n        } // apply the actual animation to every property\n\n\n        this.eachAt(); // do final code when situation is finished\n\n        if (this.pos == 1 && !this.situation.reversed || this.situation.reversed && this.pos == 0) {\n          // stop animation callback\n          this.stopAnimFrame(); // fire finished callback with current situation as parameter\n\n          this.target().fire('finished', {\n            fx: this,\n            situation: this.situation\n          });\n\n          if (!this.situations.length) {\n            this.target().fire('allfinished'); // Recheck the length since the user may call animate in the afterAll callback\n\n            if (!this.situations.length) {\n              this.target().off('.fx'); // there shouldnt be any binding left, but to make sure...\n\n              this.active = false;\n            }\n          } // start next animation\n\n\n          if (this.active) this.dequeue();else this.clearCurrent();\n        } else if (!this.paused && this.active) {\n          // we continue animating when we are not at the end\n          this.startAnimFrame();\n        } // save last eased position for once callback triggering\n\n\n        this.lastPos = eased;\n        return this;\n      },\n      // calculates the step for every property and calls block with it\n      eachAt: function eachAt() {\n        var i,\n            len,\n            at,\n            self = this,\n            target = this.target(),\n            s = this.situation; // apply animations which can be called trough a method\n\n        for (i in s.animations) {\n          at = [].concat(s.animations[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target[i].apply(target, at);\n        } // apply animation which has to be applied with attr()\n\n\n        for (i in s.attrs) {\n          at = [i].concat(s.attrs[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.attr.apply(target, at);\n        } // apply animation which has to be applied with style()\n\n\n        for (i in s.styles) {\n          at = [i].concat(s.styles[i]).map(function (el) {\n            return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el;\n          });\n          target.style.apply(target, at);\n        } // animate initialTransformation which has to be chained\n\n\n        if (s.transforms.length) {\n          // get initial initialTransformation\n          at = s.initialTransformation;\n\n          for (i = 0, len = s.transforms.length; i < len; i++) {\n            // get next transformation in chain\n            var a = s.transforms[i]; // multiply matrix directly\n\n            if (a instanceof SVG.Matrix) {\n              if (a.relative) {\n                at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)));\n              } else {\n                at = at.morph(a).at(s.ease(this.pos));\n              }\n\n              continue;\n            } // when transformation is absolute we have to reset the needed transformation first\n\n\n            if (!a.relative) {\n              a.undo(at.extract());\n            } // and reapply it after\n\n\n            at = at.multiply(a.at(s.ease(this.pos)));\n          } // set new matrix on element\n\n\n          target.matrix(at);\n        }\n\n        return this;\n      },\n      // adds an once-callback which is called at a specific position and never again\n      once: function once(pos, fn, isEased) {\n        var c = this.last();\n        if (!isEased) pos = c.ease(pos);\n        c.once[pos] = fn;\n        return this;\n      },\n      _callStart: function _callStart() {\n        setTimeout(function () {\n          this.start();\n        }.bind(this), 0);\n        return this;\n      }\n    },\n    parent: SVG.Element,\n    // Add method to parent elements\n    construct: {\n      // Get fx module or create a new one, then animate with given duration and ease\n      animate: function animate(o, ease, delay) {\n        return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay);\n      },\n      delay: function delay(_delay2) {\n        return (this.fx || (this.fx = new SVG.FX(this))).delay(_delay2);\n      },\n      stop: function stop(jumpToEnd, clearQueue) {\n        if (this.fx) {\n          this.fx.stop(jumpToEnd, clearQueue);\n        }\n\n        return this;\n      },\n      finish: function finish() {\n        if (this.fx) {\n          this.fx.finish();\n        }\n\n        return this;\n      },\n      // Pause current animation\n      pause: function pause() {\n        if (this.fx) {\n          this.fx.pause();\n        }\n\n        return this;\n      },\n      // Play paused current animation\n      play: function play() {\n        if (this.fx) {\n          this.fx.play();\n        }\n\n        return this;\n      },\n      // Set/Get the speed of the animations\n      speed: function speed(_speed2) {\n        if (this.fx) {\n          if (_speed2 == null) {\n            return this.fx.speed();\n          } else {\n            this.fx.speed(_speed2);\n          }\n        }\n\n        return this;\n      }\n    }\n  }); // MorphObj is used whenever no morphable object is given\n\n  SVG.MorphObj = SVG.invent({\n    create: function create(from, to) {\n      // prepare color for morphing\n      if (SVG.Color.isColor(to)) return new SVG.Color(from).morph(to); // check if we have a list of values\n\n      if (SVG.regex.delimiter.test(from)) {\n        // prepare path for morphing\n        if (SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to); // prepare value list for morphing\n        else return new SVG.Array(from).morph(to);\n      } // prepare number for morphing\n\n\n      if (SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to); // prepare for plain morphing\n\n      this.value = from;\n      this.destination = to;\n    },\n    extend: {\n      at: function at(pos, real) {\n        return real < 1 ? this.value : this.destination;\n      },\n      valueOf: function valueOf() {\n        return this.value;\n      }\n    }\n  });\n  SVG.extend(SVG.FX, {\n    // Add animatable attributes\n    attr: function attr(a, v, relative) {\n      // apply attributes individually\n      if (_typeof(a) === 'object') {\n        for (var key in a) {\n          this.attr(key, a[key]);\n        }\n      } else {\n        this.add(a, v, 'attrs');\n      }\n\n      return this;\n    },\n    // Add animatable styles\n    style: function style(s, v) {\n      if (_typeof(s) === 'object') {\n        for (var key in s) {\n          this.style(key, s[key]);\n        }\n      } else {\n        this.add(s, v, 'styles');\n      }\n\n      return this;\n    },\n    // Animatable x-axis\n    x: function x(_x2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          x: _x2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_x2);\n      num.relative = relative;\n      return this.add('x', num);\n    },\n    // Animatable y-axis\n    y: function y(_y2, relative) {\n      if (this.target() instanceof SVG.G) {\n        this.transform({\n          y: _y2\n        }, relative);\n        return this;\n      }\n\n      var num = new SVG.Number(_y2);\n      num.relative = relative;\n      return this.add('y', num);\n    },\n    // Animatable center x-axis\n    cx: function cx(x) {\n      return this.add('cx', new SVG.Number(x));\n    },\n    // Animatable center y-axis\n    cy: function cy(y) {\n      return this.add('cy', new SVG.Number(y));\n    },\n    // Add animatable move\n    move: function move(x, y) {\n      return this.x(x).y(y);\n    },\n    // Add animatable center\n    center: function center(x, y) {\n      return this.cx(x).cy(y);\n    },\n    // Add animatable size\n    size: function size(width, height) {\n      if (this.target() instanceof SVG.Text) {\n        // animate font size for Text elements\n        this.attr('font-size', width);\n      } else {\n        // animate bbox based size for all other elements\n        var box;\n\n        if (!width || !height) {\n          box = this.target().bbox();\n        }\n\n        if (!width) {\n          width = box.width / box.height * height;\n        }\n\n        if (!height) {\n          height = box.height / box.width * width;\n        }\n\n        this.add('width', new SVG.Number(width)).add('height', new SVG.Number(height));\n      }\n\n      return this;\n    },\n    // Add animatable width\n    width: function width(_width2) {\n      return this.add('width', new SVG.Number(_width2));\n    },\n    // Add animatable height\n    height: function height(_height2) {\n      return this.add('height', new SVG.Number(_height2));\n    },\n    // Add animatable plot\n    plot: function plot(a, b, c, d) {\n      // Lines can be plotted with 4 arguments\n      if (arguments.length == 4) {\n        return this.plot([a, b, c, d]);\n      }\n\n      return this.add('plot', new (this.target().morphArray)(a));\n    },\n    // Add leading method\n    leading: function leading(value) {\n      return this.target().leading ? this.add('leading', new SVG.Number(value)) : this;\n    },\n    // Add animatable viewbox\n    viewbox: function viewbox(x, y, width, height) {\n      if (this.target() instanceof SVG.Container) {\n        this.add('viewbox', new SVG.ViewBox(x, y, width, height));\n      }\n\n      return this;\n    },\n    update: function update(o) {\n      if (this.target() instanceof SVG.Stop) {\n        if (typeof o === 'number' || o instanceof SVG.Number) {\n          return this.update({\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          });\n        }\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', o.offset);\n      }\n\n      return this;\n    }\n  });\n  SVG.Box = SVG.invent({\n    create: function create(x, y, width, height) {\n      if (_typeof(x) === 'object' && !(x instanceof SVG.Element)) {\n        // chromes getBoundingClientRect has no x and y property\n        return SVG.Box.call(this, x.left != null ? x.left : x.x, x.top != null ? x.top : x.y, x.width, x.height);\n      } else if (arguments.length == 4) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n      } // add center, right, bottom...\n\n\n      fullBox(this);\n    },\n    extend: {\n      // Merge rect box with another, return a new instance\n      merge: function merge(box) {\n        var b = new this.constructor(); // merge boxes\n\n        b.x = Math.min(this.x, box.x);\n        b.y = Math.min(this.y, box.y);\n        b.width = Math.max(this.x + this.width, box.x + box.width) - b.x;\n        b.height = Math.max(this.y + this.height, box.y + box.height) - b.y;\n        return fullBox(b);\n      },\n      transform: function transform(m) {\n        var xMin = Infinity,\n            xMax = -Infinity,\n            yMin = Infinity,\n            yMax = -Infinity,\n            bbox;\n        var pts = [new SVG.Point(this.x, this.y), new SVG.Point(this.x2, this.y), new SVG.Point(this.x, this.y2), new SVG.Point(this.x2, this.y2)];\n        pts.forEach(function (p) {\n          p = p.transform(m);\n          xMin = Math.min(xMin, p.x);\n          xMax = Math.max(xMax, p.x);\n          yMin = Math.min(yMin, p.y);\n          yMax = Math.max(yMax, p.y);\n        });\n        bbox = new this.constructor();\n        bbox.x = xMin;\n        bbox.width = xMax - xMin;\n        bbox.y = yMin;\n        bbox.height = yMax - yMin;\n        fullBox(bbox);\n        return bbox;\n      }\n    }\n  });\n  SVG.BBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments)); // get values if element is given\n\n      if (element instanceof SVG.Element) {\n        var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\n\n        try {\n          if (!document.documentElement.contains) {\n            // This is IE - it does not support contains() for top-level SVGs\n            var topParent = element.node;\n\n            while (topParent.parentNode) {\n              topParent = topParent.parentNode;\n            }\n\n            if (topParent != document) throw new Error('Element not in the dom');\n          } // the element is NOT in the dom, throw error\n          // disabling the check below which fixes issue #76\n          // if (!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\n          // find native bbox\n\n\n          box = element.node.getBBox();\n        } catch (e) {\n          if (element instanceof SVG.Shape) {\n            if (!SVG.parser.draw) {\n              // fixes apexcharts/vue-apexcharts #14\n              SVG.prepare();\n            }\n\n            var clone = element.clone(SVG.parser.draw.instance).show();\n            box = clone.node.getBBox();\n            clone.remove();\n          } else {\n            box = {\n              x: element.node.clientLeft,\n              y: element.node.clientTop,\n              width: element.node.clientWidth,\n              height: element.node.clientHeight\n            };\n          }\n        }\n\n        SVG.Box.call(this, box);\n      }\n    },\n    // Define ancestor\n    inherit: SVG.Box,\n    // Define Parent\n    parent: SVG.Element,\n    // Constructor\n    construct: {\n      // Get bounding box\n      bbox: function bbox() {\n        return new SVG.BBox(this);\n      }\n    }\n  });\n  SVG.BBox.prototype.constructor = SVG.BBox;\n  SVG.extend(SVG.Element, {\n    tbox: function tbox() {\n      console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.');\n      return this.rbox(this.doc());\n    }\n  });\n  SVG.RBox = SVG.invent({\n    // Initialize\n    create: function create(element) {\n      SVG.Box.apply(this, [].slice.call(arguments));\n\n      if (element instanceof SVG.Element) {\n        SVG.Box.call(this, element.node.getBoundingClientRect());\n      }\n    },\n    inherit: SVG.Box,\n    // define Parent\n    parent: SVG.Element,\n    extend: {\n      addOffset: function addOffset() {\n        // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\n        this.x += window.pageXOffset;\n        this.y += window.pageYOffset;\n        return this;\n      }\n    },\n    // Constructor\n    construct: {\n      // Get rect box\n      rbox: function rbox(el) {\n        if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse());\n        return new SVG.RBox(this).addOffset();\n      }\n    }\n  });\n  SVG.RBox.prototype.constructor = SVG.RBox;\n  SVG.Matrix = SVG.invent({\n    // Initialize\n    create: function create(source) {\n      var i,\n          base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object\n\n      source = source instanceof SVG.Element ? source.matrixify() : typeof source === 'string' ? arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) : arguments.length == 6 ? arrayToMatrix([].slice.call(arguments)) : Array.isArray(source) ? arrayToMatrix(source) : _typeof(source) === 'object' ? source : base; // merge source\n\n      for (i = abcdef.length - 1; i >= 0; --i) {\n        this[abcdef[i]] = source[abcdef[i]] != null ? source[abcdef[i]] : base[abcdef[i]];\n      }\n    },\n    // Add methods\n    extend: {\n      // Extract individual transformations\n      extract: function extract() {\n        // find delta transform points\n        var px = deltaTransformPoint(this, 0, 1),\n            py = deltaTransformPoint(this, 1, 0),\n            skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n        return {\n          // translation\n          x: this.e,\n          y: this.f,\n          transformedX: (this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b),\n          transformedY: (this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d),\n          // skew\n          skewX: -skewX,\n          skewY: 180 / Math.PI * Math.atan2(py.y, py.x),\n          // scale\n          scaleX: Math.sqrt(this.a * this.a + this.b * this.b),\n          scaleY: Math.sqrt(this.c * this.c + this.d * this.d),\n          // rotation\n          rotation: skewX,\n          a: this.a,\n          b: this.b,\n          c: this.c,\n          d: this.d,\n          e: this.e,\n          f: this.f,\n          matrix: new SVG.Matrix(this)\n        };\n      },\n      // Clone matrix\n      clone: function clone() {\n        return new SVG.Matrix(this);\n      },\n      // Morph one matrix into another\n      morph: function morph(matrix) {\n        // store new destination\n        this.destination = new SVG.Matrix(matrix);\n        return this;\n      },\n      // Get morphed matrix at a given position\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var matrix = new SVG.Matrix({\n          a: this.a + (this.destination.a - this.a) * pos,\n          b: this.b + (this.destination.b - this.b) * pos,\n          c: this.c + (this.destination.c - this.c) * pos,\n          d: this.d + (this.destination.d - this.d) * pos,\n          e: this.e + (this.destination.e - this.e) * pos,\n          f: this.f + (this.destination.f - this.f) * pos\n        });\n        return matrix;\n      },\n      // Multiplies by given matrix\n      multiply: function multiply(matrix) {\n        return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()));\n      },\n      // Inverses matrix\n      inverse: function inverse() {\n        return new SVG.Matrix(this.native().inverse());\n      },\n      // Translate matrix\n      translate: function translate(x, y) {\n        return new SVG.Matrix(this.native().translate(x || 0, y || 0));\n      },\n      // Scale matrix\n      scale: function scale(x, y, cx, cy) {\n        // support uniformal scale\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        }\n\n        return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0));\n      },\n      // Rotate matrix\n      rotate: function rotate(r, cx, cy) {\n        // convert degrees to radians\n        r = SVG.utils.radians(r);\n        return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0));\n      },\n      // Flip matrix on x or y, at a given offset\n      flip: function flip(a, o) {\n        return a == 'x' ? this.scale(-1, 1, o, 0) : a == 'y' ? this.scale(1, -1, 0, o) : this.scale(-1, -1, a, o != null ? o : a);\n      },\n      // Skew\n      skew: function skew(x, y, cx, cy) {\n        // support uniformal skew\n        if (arguments.length == 1) {\n          y = x;\n        } else if (arguments.length == 3) {\n          cy = cx;\n          cx = y;\n          y = x;\n        } // convert degrees to radians\n\n\n        x = SVG.utils.radians(x);\n        y = SVG.utils.radians(y);\n        return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0));\n      },\n      // SkewX\n      skewX: function skewX(x, cx, cy) {\n        return this.skew(x, 0, cx, cy);\n      },\n      // SkewY\n      skewY: function skewY(y, cx, cy) {\n        return this.skew(0, y, cx, cy);\n      },\n      // Transform around a center point\n      around: function around(cx, cy, matrix) {\n        return this.multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0)).multiply(matrix).multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0));\n      },\n      // Convert to native SVGMatrix\n      native: function native() {\n        // create new matrix\n        var matrix = SVG.parser.native.createSVGMatrix(); // update with current values\n\n        for (var i = abcdef.length - 1; i >= 0; i--) {\n          matrix[abcdef[i]] = this[abcdef[i]];\n        }\n\n        return matrix;\n      },\n      // Convert matrix to string\n      toString: function toString() {\n        // Construct the matrix directly, avoid values that are too small\n        return 'matrix(' + float32String(this.a) + ',' + float32String(this.b) + ',' + float32String(this.c) + ',' + float32String(this.d) + ',' + float32String(this.e) + ',' + float32String(this.f) + ')';\n      }\n    },\n    // Define parent\n    parent: SVG.Element,\n    // Add parent method\n    construct: {\n      // Get current matrix\n      ctm: function ctm() {\n        return new SVG.Matrix(this.node.getCTM());\n      },\n      // Get current screen matrix\n      screenCTM: function screenCTM() {\n        /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\n           This is needed because FF does not return the transformation matrix\n           for the inner coordinate system when getScreenCTM() is called on nested svgs.\n           However all other Browsers do that */\n        if (this instanceof SVG.Nested) {\n          var rect = this.rect(1, 1);\n          var m = rect.node.getScreenCTM();\n          rect.remove();\n          return new SVG.Matrix(m);\n        }\n\n        return new SVG.Matrix(this.node.getScreenCTM());\n      }\n    }\n  });\n  SVG.Point = SVG.invent({\n    // Initialize\n    create: function create(x, y) {\n      var source,\n          base = {\n        x: 0,\n        y: 0 // ensure source as object\n\n      };\n      source = Array.isArray(x) ? {\n        x: x[0],\n        y: x[1]\n      } : _typeof(x) === 'object' ? {\n        x: x.x,\n        y: x.y\n      } : x != null ? {\n        x: x,\n        y: y != null ? y : x\n      } : base; // If y has no value, then x is used has its value\n      // merge source\n\n      this.x = source.x;\n      this.y = source.y;\n    },\n    // Add methods\n    extend: {\n      // Clone point\n      clone: function clone() {\n        return new SVG.Point(this);\n      },\n      // Morph one point into another\n      morph: function morph(x, y) {\n        // store new destination\n        this.destination = new SVG.Point(x, y);\n        return this;\n      },\n      // Get morphed point at a given position\n      at: function at(pos) {\n        // make sure a destination is defined\n        if (!this.destination) return this; // calculate morphed matrix at a given position\n\n        var point = new SVG.Point({\n          x: this.x + (this.destination.x - this.x) * pos,\n          y: this.y + (this.destination.y - this.y) * pos\n        });\n        return point;\n      },\n      // Convert to native SVGPoint\n      native: function native() {\n        // create new point\n        var point = SVG.parser.native.createSVGPoint(); // update with current values\n\n        point.x = this.x;\n        point.y = this.y;\n        return point;\n      },\n      // transform point with matrix\n      transform: function transform(matrix) {\n        return new SVG.Point(this.native().matrixTransform(matrix.native()));\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Get point\n    point: function point(x, y) {\n      return new SVG.Point(x, y).transform(this.screenCTM().inverse());\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Set svg element attribute\n    attr: function attr(a, v, n) {\n      // act as full getter\n      if (a == null) {\n        // get an object of attributes\n        a = {};\n        v = this.node.attributes;\n\n        for (n = v.length - 1; n >= 0; n--) {\n          a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue;\n        }\n\n        return a;\n      } else if (_typeof(a) === 'object') {\n        // apply every attribute individually if an object is passed\n        for (v in a) {\n          this.attr(v, a[v]);\n        }\n      } else if (v === null) {\n        // remove value\n        this.node.removeAttribute(a);\n      } else if (v == null) {\n        // act as a getter if the first and only argument is not an object\n        v = this.node.getAttribute(a);\n        return v == null ? SVG.defaults.attrs[a] : SVG.regex.isNumber.test(v) ? parseFloat(v) : v;\n      } else {\n        // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\n        if (a == 'stroke-width') {\n          this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null);\n        } else if (a == 'stroke') {\n          this._stroke = v;\n        } // convert image fill and stroke to patterns\n\n\n        if (a == 'fill' || a == 'stroke') {\n          if (SVG.regex.isImage.test(v)) {\n            v = this.doc().defs().image(v, 0, 0);\n          }\n\n          if (v instanceof SVG.Image) {\n            v = this.doc().defs().pattern(0, 0, function () {\n              this.add(v);\n            });\n          }\n        } // ensure correct numeric values (also accepts NaN and Infinity)\n\n\n        if (typeof v === 'number') {\n          v = new SVG.Number(v);\n        } // ensure full hex color\n        else if (SVG.Color.isColor(v)) {\n            v = new SVG.Color(v);\n          } // parse array values\n          else if (Array.isArray(v)) {\n              v = new SVG.Array(v);\n            } // if the passed attribute is leading...\n\n\n        if (a == 'leading') {\n          // ... call the leading method instead\n          if (this.leading) {\n            this.leading(v);\n          }\n        } else {\n          // set given attribute on node\n          typeof n === 'string' ? this.node.setAttributeNS(n, a, v.toString()) : this.node.setAttribute(a, v.toString());\n        } // rebuild if required\n\n\n        if (this.rebuild && (a == 'font-size' || a == 'x')) {\n          this.rebuild(a, v);\n        }\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Add transformations\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this,\n          matrix,\n          bbox; // act as a getter\n\n      if (_typeof(o) !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // get current matrix\n\n\n      matrix = new SVG.Matrix(target); // ensure relative flag\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = relative // relative\n        ? matrix.multiply(new SVG.Matrix(o)) // absolute\n        : new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = relative // relative\n        ? matrix.rotate(o.rotation, o.cx, o.cy) // absolute\n        : matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n\n        if (!relative) {\n          // absolute; multiply inversed values\n          var e = matrix.extract();\n          o.scaleX = o.scaleX * 1 / e.scaleX;\n          o.scaleY = o.scaleY * 1 / e.scaleY;\n        }\n\n        matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skew != null || o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0;\n\n        if (!relative) {\n          // absolute; reset skew values\n          var e = matrix.extract();\n          matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse());\n        }\n\n        matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        if (relative) {\n          // relative\n          matrix = matrix.translate(o.x, o.y);\n        } else {\n          // absolute\n          if (o.x != null) matrix.e = o.x;\n          if (o.y != null) matrix.f = o.y;\n        }\n      }\n\n      return this.attr('transform', matrix);\n    }\n  });\n  SVG.extend(SVG.FX, {\n    transform: function transform(o, relative) {\n      // get target in case of the fx module, otherwise reference this\n      var target = this.target(),\n          matrix,\n          bbox; // act as a getter\n\n      if (_typeof(o) !== 'object') {\n        // get current matrix\n        matrix = new SVG.Matrix(target).extract();\n        return typeof o === 'string' ? matrix[o] : matrix;\n      } // ensure relative flag\n\n\n      relative = !!relative || !!o.relative; // act on matrix\n\n      if (o.a != null) {\n        matrix = new SVG.Matrix(o); // act on rotation\n      } else if (o.rotation != null) {\n        // ensure centre point\n        ensureCentre(o, target); // apply transformation\n\n        matrix = new SVG.Rotate(o.rotation, o.cx, o.cy); // act on scale\n      } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure scale values on both axes\n\n        o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1;\n        o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1;\n        matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy); // act on skew\n      } else if (o.skewX != null || o.skewY != null) {\n        // ensure centre point\n        ensureCentre(o, target); // ensure skew values on both axes\n\n        o.skewX = o.skewX != null ? o.skewX : 0;\n        o.skewY = o.skewY != null ? o.skewY : 0;\n        matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy); // act on flip\n      } else if (o.flip) {\n        if (o.flip == 'x' || o.flip == 'y') {\n          o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset;\n        } else {\n          if (o.offset == null) {\n            bbox = target.bbox();\n            o.flip = bbox.cx;\n            o.offset = bbox.cy;\n          } else {\n            o.flip = o.offset;\n          }\n        }\n\n        matrix = new SVG.Matrix().flip(o.flip, o.offset); // act on translate\n      } else if (o.x != null || o.y != null) {\n        matrix = new SVG.Translate(o.x, o.y);\n      }\n\n      if (!matrix) return this;\n      matrix.relative = relative;\n      this.last().transforms.push(matrix);\n      return this._callStart();\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Reset all transformations\n    untransform: function untransform() {\n      return this.attr('transform', null);\n    },\n    // merge the whole transformation chain into one matrix and returns it\n    matrixify: function matrixify() {\n      var matrix = (this.attr('transform') || ''). // split transformations\n      split(SVG.regex.transforms).slice(0, -1).map(function (str) {\n        // generate key => value pairs\n        var kv = str.trim().split('(');\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function (str) {\n          return parseFloat(str);\n        })];\n      }) // merge every transformation into one matrix\n      .reduce(function (matrix, transform) {\n        if (transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]));\n        return matrix[transform[0]].apply(matrix, transform[1]);\n      }, new SVG.Matrix());\n      return matrix;\n    },\n    // add an element to another parent without changing the visual representation on the screen\n    toParent: function toParent(parent) {\n      if (this == parent) return this;\n      var ctm = this.screenCTM();\n      var pCtm = parent.screenCTM().inverse();\n      this.addTo(parent).untransform().transform(pCtm.multiply(ctm));\n      return this;\n    },\n    // same as above with parent equals root-svg\n    toDoc: function toDoc() {\n      return this.toParent(this.doc());\n    }\n  });\n  SVG.Transformation = SVG.invent({\n    create: function create(source, inversed) {\n      if (arguments.length > 1 && typeof inversed !== 'boolean') {\n        return this.constructor.call(this, [].slice.call(arguments));\n      }\n\n      if (Array.isArray(source)) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[i];\n        }\n      } else if (_typeof(source) === 'object') {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          this[this.arguments[i]] = source[this.arguments[i]];\n        }\n      }\n\n      this.inversed = false;\n\n      if (inversed === true) {\n        this.inversed = true;\n      }\n    },\n    extend: {\n      arguments: [],\n      method: '',\n      at: function at(pos) {\n        var params = [];\n\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          params.push(this[this.arguments[i]]);\n        }\n\n        var m = this._undo || new SVG.Matrix();\n        m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        for (var i = 0, len = this.arguments.length; i < len; ++i) {\n          o[this.arguments[i]] = typeof this[this.arguments[i]] === 'undefined' ? 0 : o[this.arguments[i]];\n        } // The method SVG.Matrix.extract which was used before calling this\n        // method to obtain a value for the parameter o doesn't return a cx and\n        // a cy so we use the ones that were provided to this object at its creation\n\n\n        o.cx = this.cx;\n        o.cy = this.cy;\n        this._undo = new SVG[capitalize(this.method)](o, true).at(1);\n        return this;\n      }\n    }\n  });\n  SVG.Translate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['transformedX', 'transformedY'],\n      method: 'translate'\n    }\n  });\n  SVG.Rotate = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['rotation', 'cx', 'cy'],\n      method: 'rotate',\n      at: function at(pos) {\n        var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy);\n        return this.inversed ? m.inverse() : m;\n      },\n      undo: function undo(o) {\n        this._undo = o;\n        return this;\n      }\n    }\n  });\n  SVG.Scale = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['scaleX', 'scaleY', 'cx', 'cy'],\n      method: 'scale'\n    }\n  });\n  SVG.Skew = SVG.invent({\n    parent: SVG.Matrix,\n    inherit: SVG.Transformation,\n    create: function create(source, inversed) {\n      this.constructor.apply(this, [].slice.call(arguments));\n    },\n    extend: {\n      arguments: ['skewX', 'skewY', 'cx', 'cy'],\n      method: 'skew'\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Dynamic style generator\n    style: function style(s, v) {\n      if (arguments.length == 0) {\n        // get full style\n        return this.node.style.cssText || '';\n      } else if (arguments.length < 2) {\n        // apply every style individually if an object is passed\n        if (_typeof(s) === 'object') {\n          for (v in s) {\n            this.style(v, s[v]);\n          }\n        } else if (SVG.regex.isCss.test(s)) {\n          // parse css string\n          s = s.split(/\\s*;\\s*/) // filter out suffix ; and stuff like ;;\n          .filter(function (e) {\n            return !!e;\n          }).map(function (e) {\n            return e.split(/\\s*:\\s*/);\n          }); // apply every definition individually\n\n          while (v = s.pop()) {\n            this.style(v[0], v[1]);\n          }\n        } else {\n          // act as a getter if the first and only argument is not an object\n          return this.node.style[camelCase(s)];\n        }\n      } else {\n        this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v;\n      }\n\n      return this;\n    }\n  });\n  SVG.Parent = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    },\n    // Inherit from\n    inherit: SVG.Element,\n    // Add class methods\n    extend: {\n      // Returns all child elements\n      children: function children() {\n        return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function (node) {\n          return SVG.adopt(node);\n        });\n      },\n      // Add given element at a position\n      add: function add(element, i) {\n        if (i == null) {\n          this.node.appendChild(element.node);\n        } else if (element.node != this.node.childNodes[i]) {\n          this.node.insertBefore(element.node, this.node.childNodes[i]);\n        }\n\n        return this;\n      },\n      // Basically does the same as `add()` but returns the added element instead\n      put: function put(element, i) {\n        this.add(element, i);\n        return element;\n      },\n      // Checks if the given element is a child\n      has: function has(element) {\n        return this.index(element) >= 0;\n      },\n      // Gets index of given element\n      index: function index(element) {\n        return [].slice.call(this.node.childNodes).indexOf(element.node);\n      },\n      // Get a element at the given index\n      get: function get(i) {\n        return SVG.adopt(this.node.childNodes[i]);\n      },\n      // Get first child\n      first: function first() {\n        return this.get(0);\n      },\n      // Get the last child\n      last: function last() {\n        return this.get(this.node.childNodes.length - 1);\n      },\n      // Iterates over all children and invokes a given block\n      each: function each(block, deep) {\n        var i,\n            il,\n            children = this.children();\n\n        for (i = 0, il = children.length; i < il; i++) {\n          if (children[i] instanceof SVG.Element) {\n            block.apply(children[i], [i, children]);\n          }\n\n          if (deep && children[i] instanceof SVG.Container) {\n            children[i].each(block, deep);\n          }\n        }\n\n        return this;\n      },\n      // Remove a given child\n      removeElement: function removeElement(element) {\n        this.node.removeChild(element.node);\n        return this;\n      },\n      // Remove all elements in this container\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs;\n        return this;\n      },\n      // Get defs\n      defs: function defs() {\n        return this.doc().defs();\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    ungroup: function ungroup(parent, depth) {\n      if (depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this;\n      parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent));\n      depth = depth || Infinity;\n      this.each(function () {\n        if (this instanceof SVG.Defs) return this;\n        if (this instanceof SVG.Parent) return this.ungroup(parent, depth - 1);\n        return this.toParent(parent);\n      });\n      this.node.firstChild || this.remove();\n      return this;\n    },\n    flatten: function flatten(parent, depth) {\n      return this.ungroup(parent, depth);\n    }\n  });\n  SVG.Container = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    },\n    // Inherit from\n    inherit: SVG.Parent\n  });\n  SVG.ViewBox = SVG.invent({\n    create: function create(source) {\n      var base = [0, 0, 0, 0];\n      var x,\n          y,\n          width,\n          height,\n          box,\n          view,\n          we,\n          he,\n          wm = 1,\n          // width multiplier\n      hm = 1,\n          // height multiplier\n      reg = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi;\n\n      if (source instanceof SVG.Element) {\n        we = source;\n        he = source;\n        view = (source.attr('viewBox') || '').match(reg);\n        box = source.bbox; // get dimensions of current node\n\n        width = new SVG.Number(source.width());\n        height = new SVG.Number(source.height()); // find nearest non-percentual dimensions\n\n        while (width.unit == '%') {\n          wm *= width.value;\n          width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width());\n          we = we.parent();\n        }\n\n        while (height.unit == '%') {\n          hm *= height.value;\n          height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height());\n          he = he.parent();\n        } // ensure defaults\n\n\n        this.x = 0;\n        this.y = 0;\n        this.width = width * wm;\n        this.height = height * hm;\n        this.zoom = 1;\n\n        if (view) {\n          // get width and height from viewbox\n          x = parseFloat(view[0]);\n          y = parseFloat(view[1]);\n          width = parseFloat(view[2]);\n          height = parseFloat(view[3]); // calculate zoom accoring to viewbox\n\n          this.zoom = this.width / this.height > width / height ? this.height / height : this.width / width; // calculate real pixel dimensions on parent SVG.Doc element\n\n          this.x = x;\n          this.y = y;\n          this.width = width;\n          this.height = height;\n        }\n      } else {\n        // ensure source as object\n        source = typeof source === 'string' ? source.match(reg).map(function (el) {\n          return parseFloat(el);\n        }) : Array.isArray(source) ? source : _typeof(source) === 'object' ? [source.x, source.y, source.width, source.height] : arguments.length == 4 ? [].slice.call(arguments) : base;\n        this.x = source[0];\n        this.y = source[1];\n        this.width = source[2];\n        this.height = source[3];\n      }\n    },\n    extend: {\n      toString: function toString() {\n        return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height;\n      },\n      morph: function morph(x, y, width, height) {\n        this.destination = new SVG.ViewBox(x, y, width, height);\n        return this;\n      },\n      at: function at(pos) {\n        if (!this.destination) return this;\n        return new SVG.ViewBox([this.x + (this.destination.x - this.x) * pos, this.y + (this.destination.y - this.y) * pos, this.width + (this.destination.width - this.width) * pos, this.height + (this.destination.height - this.height) * pos]);\n      }\n    },\n    // Define parent\n    parent: SVG.Container,\n    // Add parent method\n    construct: {\n      // get/set viewbox\n      viewbox: function viewbox(x, y, width, height) {\n        if (arguments.length == 0) // act as a getter if there are no arguments\n          {\n            return new SVG.ViewBox(this);\n          } // otherwise act as a setter\n\n\n        return this.attr('viewBox', new SVG.ViewBox(x, y, width, height));\n      }\n    }\n  }) // Add events to elements\n  ;\n  ['click', 'dblclick', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'mousemove', // , 'mouseenter' -> not supported by IE\n  // , 'mouseleave' -> not supported by IE\n  'touchstart', 'touchmove', 'touchleave', 'touchend', 'touchcancel'].forEach(function (event) {\n    // add event to SVG.Element\n    SVG.Element.prototype[event] = function (f) {\n      // bind event to element rather than element node\n      SVG.on(this.node, event, f);\n      return this;\n    };\n  }); // Initialize listeners stack\n\n  SVG.listeners = [];\n  SVG.handlerMap = [];\n  SVG.listenerId = 0; // Add event binder in the SVG namespace\n\n  SVG.on = function (node, event, listener, binding, options) {\n    // create listener, get object-index\n    var l = listener.bind(binding || node.instance || node),\n        index = (SVG.handlerMap.indexOf(node) + 1 || SVG.handlerMap.push(node)) - 1,\n        ev = event.split('.')[0],\n        ns = event.split('.')[1] || '*'; // ensure valid object\n\n    SVG.listeners[index] = SVG.listeners[index] || {};\n    SVG.listeners[index][ev] = SVG.listeners[index][ev] || {};\n    SVG.listeners[index][ev][ns] = SVG.listeners[index][ev][ns] || {};\n\n    if (!listener._svgjsListenerId) {\n      listener._svgjsListenerId = ++SVG.listenerId;\n    } // reference listener\n\n\n    SVG.listeners[index][ev][ns][listener._svgjsListenerId] = l; // add listener\n\n    node.addEventListener(ev, l, options || false);\n  }; // Add event unbinder in the SVG namespace\n\n\n  SVG.off = function (node, event, listener) {\n    var index = SVG.handlerMap.indexOf(node),\n        ev = event && event.split('.')[0],\n        ns = event && event.split('.')[1],\n        namespace = '';\n    if (index == -1) return;\n\n    if (listener) {\n      if (typeof listener === 'function') listener = listener._svgjsListenerId;\n      if (!listener) return; // remove listener reference\n\n      if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns || '*']) {\n        // remove listener\n        node.removeEventListener(ev, SVG.listeners[index][ev][ns || '*'][listener], false);\n        delete SVG.listeners[index][ev][ns || '*'][listener];\n      }\n    } else if (ns && ev) {\n      // remove all listeners for a namespaced event\n      if (SVG.listeners[index][ev] && SVG.listeners[index][ev][ns]) {\n        for (listener in SVG.listeners[index][ev][ns]) {\n          SVG.off(node, [ev, ns].join('.'), listener);\n        }\n\n        delete SVG.listeners[index][ev][ns];\n      }\n    } else if (ns) {\n      // remove all listeners for a specific namespace\n      for (event in SVG.listeners[index]) {\n        for (namespace in SVG.listeners[index][event]) {\n          if (ns === namespace) {\n            SVG.off(node, [event, ns].join('.'));\n          }\n        }\n      }\n    } else if (ev) {\n      // remove all listeners for the event\n      if (SVG.listeners[index][ev]) {\n        for (namespace in SVG.listeners[index][ev]) {\n          SVG.off(node, [ev, namespace].join('.'));\n        }\n\n        delete SVG.listeners[index][ev];\n      }\n    } else {\n      // remove all listeners on a given node\n      for (event in SVG.listeners[index]) {\n        SVG.off(node, event);\n      }\n\n      delete SVG.listeners[index];\n      delete SVG.handlerMap[index];\n    }\n  }; //\n\n\n  SVG.extend(SVG.Element, {\n    // Bind given event to listener\n    on: function on(event, listener, binding, options) {\n      SVG.on(this.node, event, listener, binding, options);\n      return this;\n    },\n    // Unbind event from listener\n    off: function off(event, listener) {\n      SVG.off(this.node, event, listener);\n      return this;\n    },\n    // Fire given event\n    fire: function fire(event, data) {\n      // Dispatch event\n      if (event instanceof window.Event) {\n        this.node.dispatchEvent(event);\n      } else {\n        this.node.dispatchEvent(event = new SVG.CustomEvent(event, {\n          detail: data,\n          cancelable: true\n        }));\n      }\n\n      this._event = event;\n      return this;\n    },\n    event: function event() {\n      return this._event;\n    }\n  });\n  SVG.Defs = SVG.invent({\n    // Initialize node\n    create: 'defs',\n    // Inherit from\n    inherit: SVG.Container\n  });\n  SVG.G = SVG.invent({\n    // Initialize node\n    create: 'g',\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Move over x-axis\n      x: function x(_x3) {\n        return _x3 == null ? this.transform('x') : this.transform({\n          x: _x3 - this.x()\n        }, true);\n      },\n      // Move over y-axis\n      y: function y(_y3) {\n        return _y3 == null ? this.transform('y') : this.transform({\n          y: _y3 - this.y()\n        }, true);\n      },\n      // Move by center over x-axis\n      cx: function cx(x) {\n        return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2);\n      },\n      // Move by center over y-axis\n      cy: function cy(y) {\n        return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2);\n      },\n      gbox: function gbox() {\n        var bbox = this.bbox(),\n            trans = this.transform();\n        bbox.x += trans.x;\n        bbox.x2 += trans.x;\n        bbox.cx += trans.x;\n        bbox.y += trans.y;\n        bbox.y2 += trans.y;\n        bbox.cy += trans.y;\n        return bbox;\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create a group element\n      group: function group() {\n        return this.put(new SVG.G());\n      }\n    }\n  });\n  SVG.Doc = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      if (element) {\n        // ensure the presence of a dom element\n        element = typeof element === 'string' ? document.getElementById(element) : element; // If the target is an svg element, use that element as the main wrapper.\n        // This allows svg.js to work with svg documents as well.\n\n        if (element.nodeName == 'svg') {\n          this.constructor.call(this, element);\n        } else {\n          this.constructor.call(this, SVG.create('svg'));\n          element.appendChild(this.node);\n          this.size('100%', '100%');\n        } // set svg element attributes and ensure defs node\n\n\n        this.namespace().defs();\n      }\n    },\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Add namespaces\n      namespace: function namespace() {\n        return this.attr({\n          xmlns: SVG.ns,\n          version: '1.1'\n        }).attr('xmlns:xlink', SVG.xlink, SVG.xmlns).attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns);\n      },\n      // Creates and returns defs element\n      defs: function defs() {\n        if (!this._defs) {\n          var defs; // Find or create a defs element in this instance\n\n          if (defs = this.node.getElementsByTagName('defs')[0]) {\n            this._defs = SVG.adopt(defs);\n          } else {\n            this._defs = new SVG.Defs();\n          } // Make sure the defs node is at the end of the stack\n\n\n          this.node.appendChild(this._defs.node);\n        }\n\n        return this._defs;\n      },\n      // custom parent method\n      parent: function parent() {\n        if (!this.node.parentNode || this.node.parentNode.nodeName == '#document') return null;\n        return this.node.parentNode;\n      },\n      // Fix for possible sub-pixel offset. See:\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\n      spof: function spof() {\n        var pos = this.node.getScreenCTM();\n\n        if (pos) {\n          this.style('left', -pos.e % 1 + 'px').style('top', -pos.f % 1 + 'px');\n        }\n\n        return this;\n      },\n      // Removes the doc from the DOM\n      remove: function remove() {\n        if (this.parent()) {\n          this.parent().removeChild(this.node);\n        }\n\n        return this;\n      },\n      clear: function clear() {\n        // remove children\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // remove defs reference\n\n\n        delete this._defs; // add back parser\n\n        if (SVG.parser.draw && !SVG.parser.draw.parentNode) {\n          this.node.appendChild(SVG.parser.draw);\n        }\n\n        return this;\n      },\n      clone: function clone(parent) {\n        // write dom data to the dom so the clone can pickup the data\n        this.writeDataToDom(); // get reference to node\n\n        var node = this.node; // clone element and assign new id\n\n        var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself\n\n        if (parent) {\n          (parent.node || parent).appendChild(clone.node);\n        } else {\n          node.parentNode.insertBefore(clone.node, node.nextSibling);\n        }\n\n        return clone;\n      }\n    }\n  }); // ### This module adds backward / forward functionality to elements.\n  //\n\n  SVG.extend(SVG.Element, {\n    // Get all siblings, including myself\n    siblings: function siblings() {\n      return this.parent().children();\n    },\n    // Get the curent position siblings\n    position: function position() {\n      return this.parent().index(this);\n    },\n    // Get the next element (will return null if there is none)\n    next: function next() {\n      return this.siblings()[this.position() + 1];\n    },\n    // Get the next element (will return null if there is none)\n    previous: function previous() {\n      return this.siblings()[this.position() - 1];\n    },\n    // Send given element one step forward\n    forward: function forward() {\n      var i = this.position() + 1,\n          p = this.parent(); // move node one step forward\n\n      p.removeElement(this).add(this, i); // make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) {\n        p.node.appendChild(p.defs().node);\n      }\n\n      return this;\n    },\n    // Send given element one step backward\n    backward: function backward() {\n      var i = this.position();\n\n      if (i > 0) {\n        this.parent().removeElement(this).add(this, i - 1);\n      }\n\n      return this;\n    },\n    // Send given element all the way to the front\n    front: function front() {\n      var p = this.parent(); // Move node forward\n\n      p.node.appendChild(this.node); // Make sure defs node is always at the top\n\n      if (p instanceof SVG.Doc) {\n        p.node.appendChild(p.defs().node);\n      }\n\n      return this;\n    },\n    // Send given element all the way to the back\n    back: function back() {\n      if (this.position() > 0) {\n        this.parent().removeElement(this).add(this, 0);\n      }\n\n      return this;\n    },\n    // Inserts a given element before the targeted element\n    before: function before(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i);\n      return this;\n    },\n    // Insters a given element after the targeted element\n    after: function after(element) {\n      element.remove();\n      var i = this.position();\n      this.parent().add(element, i + 1);\n      return this;\n    }\n  });\n  SVG.Mask = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('mask')); // keep references to masked elements\n\n      this.targets = [];\n    },\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Unmask all masked elements and remove itself\n      remove: function remove() {\n        // unmask all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) {\n            this.targets[i].unmask();\n          }\n        }\n\n        this.targets = []; // remove mask from parent\n\n        SVG.Element.prototype.remove.call(this);\n        return this;\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create masking element\n      mask: function mask() {\n        return this.defs().put(new SVG.Mask());\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Distribute mask to svg element\n    maskWith: function maskWith(element) {\n      // use given mask or create a new one\n      this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element); // store reverence on self in mask\n\n      this.masker.targets.push(this); // apply mask\n\n      return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")');\n    },\n    // Unmask element\n    unmask: function unmask() {\n      delete this.masker;\n      return this.attr('mask', null);\n    }\n  });\n  SVG.ClipPath = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('clipPath')); // keep references to clipped elements\n\n      this.targets = [];\n    },\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Unclip all clipped elements and remove itself\n      remove: function remove() {\n        // unclip all targets\n        for (var i = this.targets.length - 1; i >= 0; i--) {\n          if (this.targets[i]) {\n            this.targets[i].unclip();\n          }\n        }\n\n        this.targets = []; // remove clipPath from parent\n\n        this.parent().removeElement(this);\n        return this;\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create clipping element\n      clip: function clip() {\n        return this.defs().put(new SVG.ClipPath());\n      }\n    }\n  }); //\n\n  SVG.extend(SVG.Element, {\n    // Distribute clipPath to svg element\n    clipWith: function clipWith(element) {\n      // use given clip or create a new one\n      this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element); // store reverence on self in mask\n\n      this.clipper.targets.push(this); // apply mask\n\n      return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")');\n    },\n    // Unclip element\n    unclip: function unclip() {\n      delete this.clipper;\n      return this.attr('clip-path', null);\n    }\n  });\n  SVG.Gradient = SVG.invent({\n    // Initialize node\n    create: function create(type) {\n      this.constructor.call(this, SVG.create(type + 'Gradient')); // store type\n\n      this.type = type;\n    },\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Add a color stop\n      at: function at(offset, color, opacity) {\n        return this.put(new SVG.Stop()).update(offset, color, opacity);\n      },\n      // Update gradient\n      update: function update(block) {\n        // remove all stops\n        this.clear(); // invoke passed block\n\n        if (typeof block === 'function') {\n          block.call(this, this);\n        }\n\n        return this;\n      },\n      // Return the fill id\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      },\n      // Alias string convertion to fill\n      toString: function toString() {\n        return this.fill();\n      },\n      // custom attr to handle transform\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'gradientTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create gradient element in defs\n      gradient: function gradient(type, block) {\n        return this.defs().gradient(type, block);\n      }\n    }\n  }); // Add animatable methods to both gradient and fx module\n\n  SVG.extend(SVG.Gradient, SVG.FX, {\n    // From position\n    from: function from(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        fx: new SVG.Number(x),\n        fy: new SVG.Number(y)\n      }) : this.attr({\n        x1: new SVG.Number(x),\n        y1: new SVG.Number(y)\n      });\n    },\n    // To position\n    to: function to(x, y) {\n      return (this._target || this).type == 'radial' ? this.attr({\n        cx: new SVG.Number(x),\n        cy: new SVG.Number(y)\n      }) : this.attr({\n        x2: new SVG.Number(x),\n        y2: new SVG.Number(y)\n      });\n    }\n  }); // Base gradient generation\n\n  SVG.extend(SVG.Defs, {\n    // define gradient\n    gradient: function gradient(type, block) {\n      return this.put(new SVG.Gradient(type)).update(block);\n    }\n  });\n  SVG.Stop = SVG.invent({\n    // Initialize node\n    create: 'stop',\n    // Inherit from\n    inherit: SVG.Element,\n    // Add class methods\n    extend: {\n      // add color stops\n      update: function update(o) {\n        if (typeof o === 'number' || o instanceof SVG.Number) {\n          o = {\n            offset: arguments[0],\n            color: arguments[1],\n            opacity: arguments[2]\n          };\n        } // set attributes\n\n\n        if (o.opacity != null) this.attr('stop-opacity', o.opacity);\n        if (o.color != null) this.attr('stop-color', o.color);\n        if (o.offset != null) this.attr('offset', new SVG.Number(o.offset));\n        return this;\n      }\n    }\n  });\n  SVG.Pattern = SVG.invent({\n    // Initialize node\n    create: 'pattern',\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Return the fill id\n      fill: function fill() {\n        return 'url(#' + this.id() + ')';\n      },\n      // Update pattern by rebuilding\n      update: function update(block) {\n        // remove content\n        this.clear(); // invoke passed block\n\n        if (typeof block === 'function') {\n          block.call(this, this);\n        }\n\n        return this;\n      },\n      // Alias string convertion to fill\n      toString: function toString() {\n        return this.fill();\n      },\n      // custom attr to handle transform\n      attr: function attr(a, b, c) {\n        if (a == 'transform') a = 'patternTransform';\n        return SVG.Container.prototype.attr.call(this, a, b, c);\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create pattern element in defs\n      pattern: function pattern(width, height, block) {\n        return this.defs().pattern(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Define gradient\n    pattern: function pattern(width, height, block) {\n      return this.put(new SVG.Pattern()).update(block).attr({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        patternUnits: 'userSpaceOnUse'\n      });\n    }\n  });\n  SVG.Shape = SVG.invent({\n    // Initialize node\n    create: function create(element) {\n      this.constructor.call(this, element);\n    },\n    // Inherit from\n    inherit: SVG.Element\n  });\n  SVG.Bare = SVG.invent({\n    // Initialize\n    create: function create(element, inherit) {\n      // construct element\n      this.constructor.call(this, SVG.create(element)); // inherit custom methods\n\n      if (inherit) {\n        for (var method in inherit.prototype) {\n          if (typeof inherit.prototype[method] === 'function') {\n            this[method] = inherit.prototype[method];\n          }\n        }\n      }\n    },\n    // Inherit from\n    inherit: SVG.Element,\n    // Add methods\n    extend: {\n      // Insert some plain text\n      words: function words(text) {\n        // remove contents\n        while (this.node.hasChildNodes()) {\n          this.node.removeChild(this.node.lastChild);\n        } // create text node\n\n\n        this.node.appendChild(document.createTextNode(text));\n        return this;\n      }\n    }\n  });\n  SVG.extend(SVG.Parent, {\n    // Create an element that is not described by SVG.js\n    element: function element(_element, inherit) {\n      return this.put(new SVG.Bare(_element, inherit));\n    }\n  });\n  SVG.Symbol = SVG.invent({\n    // Initialize node\n    create: 'symbol',\n    // Inherit from\n    inherit: SVG.Container,\n    construct: {\n      // create symbol\n      symbol: function symbol() {\n        return this.put(new SVG.Symbol());\n      }\n    }\n  });\n  SVG.Use = SVG.invent({\n    // Initialize node\n    create: 'use',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add class methods\n    extend: {\n      // Use element as a reference\n      element: function element(_element2, file) {\n        // Set lined element\n        return this.attr('href', (file || '') + '#' + _element2, SVG.xlink);\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create a use element\n      use: function use(element, file) {\n        return this.put(new SVG.Use()).element(element, file);\n      }\n    }\n  });\n  SVG.Rect = SVG.invent({\n    // Initialize node\n    create: 'rect',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add parent method\n    construct: {\n      // Create a rect element\n      rect: function rect(width, height) {\n        return this.put(new SVG.Rect()).size(width, height);\n      }\n    }\n  });\n  SVG.Circle = SVG.invent({\n    // Initialize node\n    create: 'circle',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add parent method\n    construct: {\n      // Create circle element, based on ellipse\n      circle: function circle(size) {\n        return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Circle, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx) {\n      return this.attr('r', _rx);\n    },\n    // Alias radius x value\n    ry: function ry(_ry) {\n      return this.rx(_ry);\n    }\n  });\n  SVG.Ellipse = SVG.invent({\n    // Initialize node\n    create: 'ellipse',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add parent method\n    construct: {\n      // Create an ellipse\n      ellipse: function ellipse(width, height) {\n        return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);\n      }\n    }\n  });\n  SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\n    // Radius x value\n    rx: function rx(_rx2) {\n      return this.attr('rx', _rx2);\n    },\n    // Radius y value\n    ry: function ry(_ry2) {\n      return this.attr('ry', _ry2);\n    }\n  }); // Add common method\n\n  SVG.extend(SVG.Circle, SVG.Ellipse, {\n    // Move over x-axis\n    x: function x(_x4) {\n      return _x4 == null ? this.cx() - this.rx() : this.cx(_x4 + this.rx());\n    },\n    // Move over y-axis\n    y: function y(_y4) {\n      return _y4 == null ? this.cy() - this.ry() : this.cy(_y4 + this.ry());\n    },\n    // Move by center over x-axis\n    cx: function cx(x) {\n      return x == null ? this.attr('cx') : this.attr('cx', x);\n    },\n    // Move by center over y-axis\n    cy: function cy(y) {\n      return y == null ? this.attr('cy') : this.attr('cy', y);\n    },\n    // Set width of element\n    width: function width(_width3) {\n      return _width3 == null ? this.rx() * 2 : this.rx(new SVG.Number(_width3).divide(2));\n    },\n    // Set height of element\n    height: function height(_height3) {\n      return _height3 == null ? this.ry() * 2 : this.ry(new SVG.Number(_height3).divide(2));\n    },\n    // Custom size function\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));\n    }\n  });\n  SVG.Line = SVG.invent({\n    // Initialize node\n    create: 'line',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add class methods\n    extend: {\n      // Get array\n      array: function array() {\n        return new SVG.PointArray([[this.attr('x1'), this.attr('y1')], [this.attr('x2'), this.attr('y2')]]);\n      },\n      // Overwrite native plot() method\n      plot: function plot(x1, y1, x2, y2) {\n        if (x1 == null) {\n          return this.array();\n        } else if (typeof y1 !== 'undefined') {\n          x1 = {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2\n          };\n        } else {\n          x1 = new SVG.PointArray(x1).toLine();\n        }\n\n        return this.attr(x1);\n      },\n      // Move by left top corner\n      move: function move(x, y) {\n        return this.attr(this.array().move(x, y).toLine());\n      },\n      // Set element size to given width and height\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr(this.array().size(p.width, p.height).toLine());\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create a line element\n      line: function line(x1, y1, x2, y2) {\n        // make sure plot is called as a setter\n        // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\n        return SVG.Line.prototype.plot.apply(this.put(new SVG.Line()), x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]);\n      }\n    }\n  });\n  SVG.Polyline = SVG.invent({\n    // Initialize node\n    create: 'polyline',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add parent method\n    construct: {\n      // Create a wrapped polyline element\n      polyline: function polyline(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polyline()).plot(p || new SVG.PointArray());\n      }\n    }\n  });\n  SVG.Polygon = SVG.invent({\n    // Initialize node\n    create: 'polygon',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add parent method\n    construct: {\n      // Create a wrapped polygon element\n      polygon: function polygon(p) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Polygon()).plot(p || new SVG.PointArray());\n      }\n    }\n  }); // Add polygon-specific functions\n\n  SVG.extend(SVG.Polyline, SVG.Polygon, {\n    // Get array\n    array: function array() {\n      return this._array || (this._array = new SVG.PointArray(this.attr('points')));\n    },\n    // Plot new path\n    plot: function plot(p) {\n      return p == null ? this.array() : this.clear().attr('points', typeof p === 'string' ? p : this._array = new SVG.PointArray(p));\n    },\n    // Clear array cache\n    clear: function clear() {\n      delete this._array;\n      return this;\n    },\n    // Move by left top corner\n    move: function move(x, y) {\n      return this.attr('points', this.array().move(x, y));\n    },\n    // Set element size to given width and height\n    size: function size(width, height) {\n      var p = proportionalSize(this, width, height);\n      return this.attr('points', this.array().size(p.width, p.height));\n    }\n  }); // unify all point to point elements\n\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\n    // Define morphable array\n    morphArray: SVG.PointArray,\n    // Move by left top corner over x-axis\n    x: function x(_x5) {\n      return _x5 == null ? this.bbox().x : this.move(_x5, this.bbox().y);\n    },\n    // Move by left top corner over y-axis\n    y: function y(_y5) {\n      return _y5 == null ? this.bbox().y : this.move(this.bbox().x, _y5);\n    },\n    // Set width of element\n    width: function width(_width4) {\n      var b = this.bbox();\n      return _width4 == null ? b.width : this.size(_width4, b.height);\n    },\n    // Set height of element\n    height: function height(_height4) {\n      var b = this.bbox();\n      return _height4 == null ? b.height : this.size(b.width, _height4);\n    }\n  });\n  SVG.Path = SVG.invent({\n    // Initialize node\n    create: 'path',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add class methods\n    extend: {\n      // Define morphable array\n      morphArray: SVG.PathArray,\n      // Get array\n      array: function array() {\n        return this._array || (this._array = new SVG.PathArray(this.attr('d')));\n      },\n      // Plot new path\n      plot: function plot(d) {\n        return d == null ? this.array() : this.clear().attr('d', typeof d === 'string' ? d : this._array = new SVG.PathArray(d));\n      },\n      // Clear array cache\n      clear: function clear() {\n        delete this._array;\n        return this;\n      },\n      // Move by left top corner\n      move: function move(x, y) {\n        return this.attr('d', this.array().move(x, y));\n      },\n      // Move by left top corner over x-axis\n      x: function x(_x6) {\n        return _x6 == null ? this.bbox().x : this.move(_x6, this.bbox().y);\n      },\n      // Move by left top corner over y-axis\n      y: function y(_y6) {\n        return _y6 == null ? this.bbox().y : this.move(this.bbox().x, _y6);\n      },\n      // Set element size to given width and height\n      size: function size(width, height) {\n        var p = proportionalSize(this, width, height);\n        return this.attr('d', this.array().size(p.width, p.height));\n      },\n      // Set width of element\n      width: function width(_width5) {\n        return _width5 == null ? this.bbox().width : this.size(_width5, this.bbox().height);\n      },\n      // Set height of element\n      height: function height(_height5) {\n        return _height5 == null ? this.bbox().height : this.size(this.bbox().width, _height5);\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create a wrapped path element\n      path: function path(d) {\n        // make sure plot is called as a setter\n        return this.put(new SVG.Path()).plot(d || new SVG.PathArray());\n      }\n    }\n  });\n  SVG.Image = SVG.invent({\n    // Initialize node\n    create: 'image',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add class methods\n    extend: {\n      // (re)load image\n      load: function load(url) {\n        if (!url) return this;\n        var self = this,\n            img = new window.Image(); // preload image\n\n        SVG.on(img, 'load', function () {\n          SVG.off(img);\n          var p = self.parent(SVG.Pattern);\n          if (p === null) return; // ensure image size\n\n          if (self.width() == 0 && self.height() == 0) {\n            self.size(img.width, img.height);\n          } // ensure pattern size if not set\n\n\n          if (p && p.width() == 0 && p.height() == 0) {\n            p.size(self.width(), self.height());\n          } // callback\n\n\n          if (typeof self._loaded === 'function') {\n            self._loaded.call(self, {\n              width: img.width,\n              height: img.height,\n              ratio: img.width / img.height,\n              url: url\n            });\n          }\n        });\n        SVG.on(img, 'error', function (e) {\n          SVG.off(img);\n\n          if (typeof self._error === 'function') {\n            self._error.call(self, e);\n          }\n        });\n        return this.attr('href', img.src = this.src = url, SVG.xlink);\n      },\n      // Add loaded callback\n      loaded: function loaded(_loaded) {\n        this._loaded = _loaded;\n        return this;\n      },\n      error: function error(_error) {\n        this._error = _error;\n        return this;\n      }\n    },\n    // Add parent method\n    construct: {\n      // create image element, load image and set its size\n      image: function image(source, width, height) {\n        return this.put(new SVG.Image()).load(source).size(width || 0, height || width || 0);\n      }\n    }\n  });\n  SVG.Text = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('text'));\n      this.dom.leading = new SVG.Number(1.3); // store leading value for rebuilding\n\n      this._rebuild = true; // enable automatic updating of dy values\n\n      this._build = false; // disable build mode for adding multiple lines\n      // set default font\n\n      this.attr('font-family', SVG.defaults.attrs['font-family']);\n    },\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add class methods\n    extend: {\n      // Move over x-axis\n      x: function x(_x7) {\n        // act as getter\n        if (_x7 == null) {\n          return this.attr('x');\n        }\n\n        return this.attr('x', _x7);\n      },\n      // Move over y-axis\n      y: function y(_y7) {\n        var oy = this.attr('y'),\n            o = typeof oy === 'number' ? oy - this.bbox().y : 0; // act as getter\n\n        if (_y7 == null) {\n          return typeof oy === 'number' ? oy - o : oy;\n        }\n\n        return this.attr('y', typeof _y7.valueOf() === 'number' ? _y7 + o : _y7);\n      },\n      // Move center over x-axis\n      cx: function cx(x) {\n        return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2);\n      },\n      // Move center over y-axis\n      cy: function cy(y) {\n        return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2);\n      },\n      // Set the text content\n      text: function text(_text) {\n        // act as getter\n        if (typeof _text === 'undefined') {\n          var _text = '';\n          var children = this.node.childNodes;\n\n          for (var i = 0, len = children.length; i < len; ++i) {\n            // add newline if its not the first child and newLined is set to true\n            if (i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true) {\n              _text += '\\n';\n            } // add content of this node\n\n\n            _text += children[i].textContent;\n          }\n\n          return _text;\n        } // remove existing content\n\n\n        this.clear().build(true);\n\n        if (typeof _text === 'function') {\n          // call block\n          _text.call(this, this);\n        } else {\n          // store text and make sure text is not blank\n          _text = _text.split('\\n'); // build new lines\n\n          for (var i = 0, il = _text.length; i < il; i++) {\n            this.tspan(_text[i]).newLine();\n          }\n        } // disable build mode and rebuild lines\n\n\n        return this.build(false).rebuild();\n      },\n      // Set font size\n      size: function size(_size) {\n        return this.attr('font-size', _size).rebuild();\n      },\n      // Set / get leading\n      leading: function leading(value) {\n        // act as getter\n        if (value == null) {\n          return this.dom.leading;\n        } // act as setter\n\n\n        this.dom.leading = new SVG.Number(value);\n        return this.rebuild();\n      },\n      // Get all the first level lines\n      lines: function lines() {\n        var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances\n\n        var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function (el) {\n          return SVG.adopt(el);\n        }); // return an instance of SVG.set\n\n        return new SVG.Set(lines);\n      },\n      // Rebuild appearance type\n      rebuild: function rebuild(_rebuild) {\n        // store new rebuild flag if given\n        if (typeof _rebuild === 'boolean') {\n          this._rebuild = _rebuild;\n        } // define position of all lines\n\n\n        if (this._rebuild) {\n          var self = this,\n              blankLineOffset = 0,\n              dy = this.dom.leading * new SVG.Number(this.attr('font-size'));\n          this.lines().each(function () {\n            if (this.dom.newLined) {\n              if (!self.textPath()) {\n                this.attr('x', self.attr('x'));\n              }\n\n              if (this.text() == '\\n') {\n                blankLineOffset += dy;\n              } else {\n                this.attr('dy', dy + blankLineOffset);\n                blankLineOffset = 0;\n              }\n            }\n          });\n          this.fire('rebuild');\n        }\n\n        return this;\n      },\n      // Enable / disable build mode\n      build: function build(_build) {\n        this._build = !!_build;\n        return this;\n      },\n      // overwrite method from parent to set data properly\n      setData: function setData(o) {\n        this.dom = o;\n        this.dom.leading = new SVG.Number(o.leading || 1.3);\n        return this;\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create text element\n      text: function text(_text2) {\n        return this.put(new SVG.Text()).text(_text2);\n      },\n      // Create plain text element\n      plain: function plain(text) {\n        return this.put(new SVG.Text()).plain(text);\n      }\n    }\n  });\n  SVG.Tspan = SVG.invent({\n    // Initialize node\n    create: 'tspan',\n    // Inherit from\n    inherit: SVG.Shape,\n    // Add class methods\n    extend: {\n      // Set text content\n      text: function text(_text3) {\n        if (_text3 == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '');\n        typeof _text3 === 'function' ? _text3.call(this, this) : this.plain(_text3);\n        return this;\n      },\n      // Shortcut dx\n      dx: function dx(_dx) {\n        return this.attr('dx', _dx);\n      },\n      // Shortcut dy\n      dy: function dy(_dy) {\n        return this.attr('dy', _dy);\n      },\n      // Create new line\n      newLine: function newLine() {\n        // fetch text parent\n        var t = this.parent(SVG.Text); // mark new line\n\n        this.dom.newLined = true; // apply new hy¡n\n\n        return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x());\n      }\n    }\n  });\n  SVG.extend(SVG.Text, SVG.Tspan, {\n    // Create plain text node\n    plain: function plain(text) {\n      // clear if build mode is disabled\n      if (this._build === false) {\n        this.clear();\n      } // create text node\n\n\n      this.node.appendChild(document.createTextNode(text));\n      return this;\n    },\n    // Create a tspan\n    tspan: function tspan(text) {\n      var node = (this.textPath && this.textPath() || this).node,\n          tspan = new SVG.Tspan(); // clear if build mode is disabled\n\n      if (this._build === false) {\n        this.clear();\n      } // add new tspan\n\n\n      node.appendChild(tspan.node);\n      return tspan.text(text);\n    },\n    // Clear all lines\n    clear: function clear() {\n      var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes\n\n      while (node.hasChildNodes()) {\n        node.removeChild(node.lastChild);\n      }\n\n      return this;\n    },\n    // Get length of text element\n    length: function length() {\n      return this.node.getComputedTextLength();\n    }\n  });\n  SVG.TextPath = SVG.invent({\n    // Initialize node\n    create: 'textPath',\n    // Inherit from\n    inherit: SVG.Parent,\n    // Define parent class\n    parent: SVG.Text,\n    // Add parent method\n    construct: {\n      morphArray: SVG.PathArray,\n      // Create path for text to run on\n      path: function path(d) {\n        // create textPath element\n        var path = new SVG.TextPath(),\n            track = this.doc().defs().path(d); // move lines to textpath\n\n        while (this.node.hasChildNodes()) {\n          path.node.appendChild(this.node.firstChild);\n        } // add textPath element as child node\n\n\n        this.node.appendChild(path.node); // link textPath to path and add content\n\n        path.attr('href', '#' + track, SVG.xlink);\n        return this;\n      },\n      // return the array of the path track element\n      array: function array() {\n        var track = this.track();\n        return track ? track.array() : null;\n      },\n      // Plot path if any\n      plot: function plot(d) {\n        var track = this.track(),\n            pathArray = null;\n\n        if (track) {\n          pathArray = track.plot(d);\n        }\n\n        return d == null ? pathArray : this;\n      },\n      // Get the path track element\n      track: function track() {\n        var path = this.textPath();\n\n        if (path) {\n          return path.reference('href');\n        }\n      },\n      // Get the textPath child\n      textPath: function textPath() {\n        if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath') {\n          return SVG.adopt(this.node.firstChild);\n        }\n      }\n    }\n  });\n  SVG.Nested = SVG.invent({\n    // Initialize node\n    create: function create() {\n      this.constructor.call(this, SVG.create('svg'));\n      this.style('overflow', 'visible');\n    },\n    // Inherit from\n    inherit: SVG.Container,\n    // Add parent method\n    construct: {\n      // Create nested svg document\n      nested: function nested() {\n        return this.put(new SVG.Nested());\n      }\n    }\n  });\n  SVG.A = SVG.invent({\n    // Initialize node\n    create: 'a',\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Link url\n      to: function to(url) {\n        return this.attr('href', url, SVG.xlink);\n      },\n      // Link show attribute\n      show: function show(target) {\n        return this.attr('show', target, SVG.xlink);\n      },\n      // Link target attribute\n      target: function target(_target2) {\n        return this.attr('target', _target2);\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create a hyperlink element\n      link: function link(url) {\n        return this.put(new SVG.A()).to(url);\n      }\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Create a hyperlink element\n    linkTo: function linkTo(url) {\n      var link = new SVG.A();\n\n      if (typeof url === 'function') {\n        url.call(link, link);\n      } else {\n        link.to(url);\n      }\n\n      return this.parent().put(link).put(this);\n    }\n  });\n  SVG.Marker = SVG.invent({\n    // Initialize node\n    create: 'marker',\n    // Inherit from\n    inherit: SVG.Container,\n    // Add class methods\n    extend: {\n      // Set width of element\n      width: function width(_width6) {\n        return this.attr('markerWidth', _width6);\n      },\n      // Set height of element\n      height: function height(_height6) {\n        return this.attr('markerHeight', _height6);\n      },\n      // Set marker refX and refY\n      ref: function ref(x, y) {\n        return this.attr('refX', x).attr('refY', y);\n      },\n      // Update marker\n      update: function update(block) {\n        // remove all content\n        this.clear(); // invoke passed block\n\n        if (typeof block === 'function') {\n          block.call(this, this);\n        }\n\n        return this;\n      },\n      // Return the fill id\n      toString: function toString() {\n        return 'url(#' + this.id() + ')';\n      }\n    },\n    // Add parent method\n    construct: {\n      marker: function marker(width, height, block) {\n        // Create marker element in defs\n        return this.defs().marker(width, height, block);\n      }\n    }\n  });\n  SVG.extend(SVG.Defs, {\n    // Create marker\n    marker: function marker(width, height, block) {\n      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\n      return this.put(new SVG.Marker()).size(width, height).ref(width / 2, height / 2).viewbox(0, 0, width, height).attr('orient', 'auto').update(block);\n    }\n  });\n  SVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\n    // Create and attach markers\n    marker: function marker(_marker, width, height, block) {\n      var attr = ['marker']; // Build attribute name\n\n      if (_marker != 'all') attr.push(_marker);\n      attr = attr.join('-'); // Set marker attribute\n\n      _marker = arguments[1] instanceof SVG.Marker ? arguments[1] : this.doc().marker(width, height, block);\n      return this.attr(attr, _marker);\n    }\n  }); // Define list of available attributes for stroke and fill\n\n  var sugar = {\n    stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset'],\n    fill: ['color', 'opacity', 'rule'],\n    prefix: function prefix(t, a) {\n      return a == 'color' ? t : t + '-' + a;\n    } // Add sugar for fill and stroke\n\n  };\n  ['fill', 'stroke'].forEach(function (m) {\n    var i,\n        extension = {};\n\n    extension[m] = function (o) {\n      if (typeof o === 'undefined') {\n        return this;\n      }\n\n      if (typeof o === 'string' || SVG.Color.isRgb(o) || o && typeof o.fill === 'function') {\n        this.attr(m, o);\n      } else // set all attributes from sugar.fill and sugar.stroke list\n        {\n          for (i = sugar[m].length - 1; i >= 0; i--) {\n            if (o[sugar[m][i]] != null) {\n              this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]]);\n            }\n          }\n        }\n\n      return this;\n    };\n\n    SVG.extend(SVG.Element, SVG.FX, extension);\n  });\n  SVG.extend(SVG.Element, SVG.FX, {\n    // Map rotation to transform\n    rotate: function rotate(d, cx, cy) {\n      return this.transform({\n        rotation: d,\n        cx: cx,\n        cy: cy\n      });\n    },\n    // Map skew to transform\n    skew: function skew(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        skew: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        skewX: x,\n        skewY: y,\n        cx: cx,\n        cy: cy\n      });\n    },\n    // Map scale to transform\n    scale: function scale(x, y, cx, cy) {\n      return arguments.length == 1 || arguments.length == 3 ? this.transform({\n        scale: x,\n        cx: y,\n        cy: cx\n      }) : this.transform({\n        scaleX: x,\n        scaleY: y,\n        cx: cx,\n        cy: cy\n      });\n    },\n    // Map translate to transform\n    translate: function translate(x, y) {\n      return this.transform({\n        x: x,\n        y: y\n      });\n    },\n    // Map flip to transform\n    flip: function flip(a, o) {\n      o = typeof a === 'number' ? a : o;\n      return this.transform({\n        flip: a || 'both',\n        offset: o\n      });\n    },\n    // Map matrix to transform\n    matrix: function matrix(m) {\n      return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m));\n    },\n    // Opacity\n    opacity: function opacity(value) {\n      return this.attr('opacity', value);\n    },\n    // Relative move over x axis\n    dx: function dx(x) {\n      return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true);\n    },\n    // Relative move over y axis\n    dy: function dy(y) {\n      return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true);\n    },\n    // Relative move over x and y axes\n    dmove: function dmove(x, y) {\n      return this.dx(x).dy(y);\n    }\n  });\n  SVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\n    // Add x and y radius\n    radius: function radius(x, y) {\n      var type = (this._target || this).type;\n      return type == 'radial' || type == 'circle' ? this.attr('r', new SVG.Number(x)) : this.rx(x).ry(y == null ? x : y);\n    }\n  });\n  SVG.extend(SVG.Path, {\n    // Get path length\n    length: function length() {\n      return this.node.getTotalLength();\n    },\n    // Get point at length\n    pointAt: function pointAt(length) {\n      return this.node.getPointAtLength(length);\n    }\n  });\n  SVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\n    // Set font\n    font: function font(a, v) {\n      if (_typeof(a) === 'object') {\n        for (v in a) {\n          this.font(v, a[v]);\n        }\n      }\n\n      return a == 'leading' ? this.leading(v) : a == 'anchor' ? this.attr('text-anchor', v) : a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ? this.attr('font-' + a, v) : this.attr(a, v);\n    }\n  });\n  SVG.Set = SVG.invent({\n    // Initialize\n    create: function create(members) {\n      // Set initial state\n      Array.isArray(members) ? this.members = members : this.clear();\n    },\n    // Add class methods\n    extend: {\n      // Add element to set\n      add: function add() {\n        var i,\n            il,\n            elements = [].slice.call(arguments);\n\n        for (i = 0, il = elements.length; i < il; i++) {\n          this.members.push(elements[i]);\n        }\n\n        return this;\n      },\n      // Remove element from set\n      remove: function remove(element) {\n        var i = this.index(element); // remove given child\n\n        if (i > -1) {\n          this.members.splice(i, 1);\n        }\n\n        return this;\n      },\n      // Iterate over all members\n      each: function each(block) {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          block.apply(this.members[i], [i, this.members]);\n        }\n\n        return this;\n      },\n      // Restore to defaults\n      clear: function clear() {\n        // initialize store\n        this.members = [];\n        return this;\n      },\n      // Get the length of a set\n      length: function length() {\n        return this.members.length;\n      },\n      // Checks if a given element is present in set\n      has: function has(element) {\n        return this.index(element) >= 0;\n      },\n      // retuns index of given element in set\n      index: function index(element) {\n        return this.members.indexOf(element);\n      },\n      // Get member at given index\n      get: function get(i) {\n        return this.members[i];\n      },\n      // Get first member\n      first: function first() {\n        return this.get(0);\n      },\n      // Get last member\n      last: function last() {\n        return this.get(this.members.length - 1);\n      },\n      // Default value\n      valueOf: function valueOf() {\n        return this.members;\n      },\n      // Get the bounding box of all members included or empty box if set has no items\n      bbox: function bbox() {\n        // return an empty box of there are no members\n        if (this.members.length == 0) {\n          return new SVG.RBox();\n        } // get the first rbox and update the target bbox\n\n\n        var rbox = this.members[0].rbox(this.members[0].doc());\n        this.each(function () {\n          // user rbox for correct position and visual representation\n          rbox = rbox.merge(this.rbox(this.doc()));\n        });\n        return rbox;\n      }\n    },\n    // Add parent method\n    construct: {\n      // Create a new set\n      set: function set(members) {\n        return new SVG.Set(members);\n      }\n    }\n  });\n  SVG.FX.Set = SVG.invent({\n    // Initialize node\n    create: function create(set) {\n      // store reference to set\n      this.set = set;\n    }\n  }); // Alias methods\n\n  SVG.Set.inherit = function () {\n    var m,\n        methods = []; // gather shape methods\n\n    for (var m in SVG.Shape.prototype) {\n      if (typeof SVG.Shape.prototype[m] === 'function' && typeof SVG.Set.prototype[m] !== 'function') {\n        methods.push(m);\n      }\n    } // apply shape aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.Set.prototype[method] = function () {\n        for (var i = 0, il = this.members.length; i < il; i++) {\n          if (this.members[i] && typeof this.members[i][method] === 'function') {\n            this.members[i][method].apply(this.members[i], arguments);\n          }\n        }\n\n        return method == 'animate' ? this.fx || (this.fx = new SVG.FX.Set(this)) : this;\n      };\n    }); // clear methods for the next round\n\n    methods = []; // gather fx methods\n\n    for (var m in SVG.FX.prototype) {\n      if (typeof SVG.FX.prototype[m] === 'function' && typeof SVG.FX.Set.prototype[m] !== 'function') {\n        methods.push(m);\n      }\n    } // apply fx aliasses\n\n\n    methods.forEach(function (method) {\n      SVG.FX.Set.prototype[method] = function () {\n        for (var i = 0, il = this.set.members.length; i < il; i++) {\n          this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments);\n        }\n\n        return this;\n      };\n    });\n  };\n\n  SVG.extend(SVG.Element, {\n    // Store data values on svg nodes\n    data: function data(a, v, r) {\n      if (_typeof(a) === 'object') {\n        for (v in a) {\n          this.data(v, a[v]);\n        }\n      } else if (arguments.length < 2) {\n        try {\n          return JSON.parse(this.attr('data-' + a));\n        } catch (e) {\n          return this.attr('data-' + a);\n        }\n      } else {\n        this.attr('data-' + a, v === null ? null : r === true || typeof v === 'string' || typeof v === 'number' ? v : JSON.stringify(v));\n      }\n\n      return this;\n    }\n  });\n  SVG.extend(SVG.Element, {\n    // Remember arbitrary data\n    remember: function remember(k, v) {\n      // remember every item in an object individually\n      if (_typeof(arguments[0]) === 'object') {\n        for (var v in k) {\n          this.remember(v, k[v]);\n        }\n      } // retrieve memory\n      else if (arguments.length == 1) {\n          return this.memory()[k];\n        } // store memory\n        else {\n            this.memory()[k] = v;\n          }\n\n      return this;\n    },\n    // Erase a given memory\n    forget: function forget() {\n      if (arguments.length == 0) {\n        this._memory = {};\n      } else {\n        for (var i = arguments.length - 1; i >= 0; i--) {\n          delete this.memory()[arguments[i]];\n        }\n      }\n\n      return this;\n    },\n    // Initialize or return local memory object\n    memory: function memory() {\n      return this._memory || (this._memory = {});\n    }\n  }); // Method for getting an element by id\n\n  SVG.get = function (id) {\n    var node = document.getElementById(idFromReference(id) || id);\n    return SVG.adopt(node);\n  }; // Select elements by query string\n\n\n  SVG.select = function (query, parent) {\n    return new SVG.Set(SVG.utils.map((parent || document).querySelectorAll(query), function (node) {\n      return SVG.adopt(node);\n    }));\n  };\n\n  SVG.extend(SVG.Parent, {\n    // Scoped select method\n    select: function select(query) {\n      return SVG.select(query, this.node);\n    }\n  });\n\n  function pathRegReplace(a, b, c, d) {\n    return c + d.replace(SVG.regex.dots, ' .');\n  } // creates deep clone of array\n\n\n  function array_clone(arr) {\n    var clone = arr.slice(0);\n\n    for (var i = clone.length; i--;) {\n      if (Array.isArray(clone[i])) {\n        clone[i] = array_clone(clone[i]);\n      }\n    }\n\n    return clone;\n  } // tests if a given element is instance of an object\n\n\n  function _is(el, obj) {\n    return el instanceof obj;\n  } // tests if a given selector matches an element\n\n\n  function _matches(el, selector) {\n    return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\n  } // Convert dash-separated-string to camelCase\n\n\n  function camelCase(s) {\n    return s.toLowerCase().replace(/-(.)/g, function (m, g) {\n      return g.toUpperCase();\n    });\n  } // Capitalize first letter of a string\n\n\n  function capitalize(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  } // Ensure to six-based hex\n\n\n  function fullHex(hex) {\n    return hex.length == 4 ? ['#', hex.substring(1, 2), hex.substring(1, 2), hex.substring(2, 3), hex.substring(2, 3), hex.substring(3, 4), hex.substring(3, 4)].join('') : hex;\n  } // Component to hex value\n\n\n  function compToHex(comp) {\n    var hex = comp.toString(16);\n    return hex.length == 1 ? '0' + hex : hex;\n  } // Calculate proportional width and height values when necessary\n\n\n  function proportionalSize(element, width, height) {\n    if (width == null || height == null) {\n      var box = element.bbox();\n\n      if (width == null) {\n        width = box.width / box.height * height;\n      } else if (height == null) {\n        height = box.height / box.width * width;\n      }\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  } // Delta transform point\n\n\n  function deltaTransformPoint(matrix, x, y) {\n    return {\n      x: x * matrix.a + y * matrix.c + 0,\n      y: x * matrix.b + y * matrix.d + 0\n    };\n  } // Map matrix array to object\n\n\n  function arrayToMatrix(a) {\n    return {\n      a: a[0],\n      b: a[1],\n      c: a[2],\n      d: a[3],\n      e: a[4],\n      f: a[5]\n    };\n  } // Parse matrix if required\n\n\n  function parseMatrix(matrix) {\n    if (!(matrix instanceof SVG.Matrix)) {\n      matrix = new SVG.Matrix(matrix);\n    }\n\n    return matrix;\n  } // Add centre point to transform object\n\n\n  function ensureCentre(o, target) {\n    o.cx = o.cx == null ? target.bbox().cx : o.cx;\n    o.cy = o.cy == null ? target.bbox().cy : o.cy;\n  } // PathArray Helpers\n\n\n  function arrayToString(a) {\n    for (var i = 0, il = a.length, s = ''; i < il; i++) {\n      s += a[i][0];\n\n      if (a[i][1] != null) {\n        s += a[i][1];\n\n        if (a[i][2] != null) {\n          s += ' ';\n          s += a[i][2];\n\n          if (a[i][3] != null) {\n            s += ' ';\n            s += a[i][3];\n            s += ' ';\n            s += a[i][4];\n\n            if (a[i][5] != null) {\n              s += ' ';\n              s += a[i][5];\n              s += ' ';\n              s += a[i][6];\n\n              if (a[i][7] != null) {\n                s += ' ';\n                s += a[i][7];\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s + ' ';\n  } // Deep new id assignment\n\n\n  function assignNewId(node) {\n    // do the same for SVG child nodes as well\n    for (var i = node.childNodes.length - 1; i >= 0; i--) {\n      if (node.childNodes[i] instanceof window.SVGElement) {\n        assignNewId(node.childNodes[i]);\n      }\n    }\n\n    return SVG.adopt(node).id(SVG.eid(node.nodeName));\n  } // Add more bounding box properties\n\n\n  function fullBox(b) {\n    if (b.x == null) {\n      b.x = 0;\n      b.y = 0;\n      b.width = 0;\n      b.height = 0;\n    }\n\n    b.w = b.width;\n    b.h = b.height;\n    b.x2 = b.x + b.width;\n    b.y2 = b.y + b.height;\n    b.cx = b.x + b.width / 2;\n    b.cy = b.y + b.height / 2;\n    return b;\n  } // Get id from reference string\n\n\n  function idFromReference(url) {\n    var m = (url || '').toString().match(SVG.regex.reference);\n    if (m) return m[1];\n  } // If values like 1e-88 are passed, this is not a valid 32 bit float,\n  // but in those cases, we are so close to 0 that 0 works well!\n\n\n  function float32String(v) {\n    return Math.abs(v) > 1e-37 ? v : 0;\n  } // Create matrix array for looping\n\n\n  var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10\n\n  if (typeof window.CustomEvent !== 'function') {\n    // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n    var CustomEventPoly = function CustomEventPoly(event, options) {\n      options = options || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var e = document.createEvent('CustomEvent');\n      e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail);\n      return e;\n    };\n\n    CustomEventPoly.prototype = window.Event.prototype;\n    SVG.CustomEvent = CustomEventPoly;\n  } else {\n    SVG.CustomEvent = window.CustomEvent;\n  } // requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\n\n\n  (function (w) {\n    var lastTime = 0;\n    var vendors = ['moz', 'webkit'];\n\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n      w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame'];\n      w.cancelAnimationFrame = w[vendors[x] + 'CancelAnimationFrame'] || w[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    w.requestAnimationFrame = w.requestAnimationFrame || function (callback) {\n      var currTime = new Date().getTime();\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      var id = w.setTimeout(function () {\n        callback(currTime + timeToCall);\n      }, timeToCall);\n      lastTime = currTime + timeToCall;\n      return id;\n    };\n\n    w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\n  })(window);\n\n  return SVG;\n});\n\n/*! svg.filter.js - v2.0.2 - 2016-02-24\r\n* https://github.com/wout/svg.filter.js\r\n* Copyright (c) 2016 Wout Fierens; Licensed MIT */\r\n(function() {\r\n\r\n  // Main filter class\r\n  SVG.Filter = SVG.invent({\r\n    create: 'filter',\r\n    inherit: SVG.Parent,\r\n    extend: {\r\n      // Static strings\r\n      source:           'SourceGraphic',\r\n      sourceAlpha:      'SourceAlpha',\r\n      background:       'BackgroundImage',\r\n      backgroundAlpha:  'BackgroundAlpha',\r\n      fill:             'FillPaint',\r\n      stroke:           'StrokePaint',\r\n\r\n      autoSetIn: true,\r\n      // Custom put method for leaner code\r\n      put: function(element, i) {\r\n        this.add(element, i);\r\n\r\n        if(!element.attr('in') && this.autoSetIn){\r\n          element.attr('in',this.source);\r\n        }\r\n        if(!element.attr('result')){\r\n          element.attr('result',element);\r\n        }\r\n\r\n        return element\r\n      },\r\n      // Blend effect\r\n      blend: function(in1, in2, mode) {\r\n        return this.put(new SVG.BlendEffect(in1, in2, mode))\r\n      },\r\n      // ColorMatrix effect\r\n      colorMatrix: function(type, values) {\r\n        return this.put(new SVG.ColorMatrixEffect(type, values))\r\n      },\r\n      // ConvolveMatrix effect\r\n      convolveMatrix: function(matrix) {\r\n        return this.put(new SVG.ConvolveMatrixEffect(matrix))\r\n      },\r\n      // ComponentTransfer effect\r\n      componentTransfer: function(components) {\r\n        return this.put(new SVG.ComponentTransferEffect(components))\r\n      },\r\n      // Composite effect\r\n      composite: function(in1, in2, operator) {\r\n        return this.put(new SVG.CompositeEffect(in1, in2, operator))\r\n      },\r\n      // Flood effect\r\n      flood: function(color, opacity) {\r\n        return this.put(new SVG.FloodEffect(color, opacity))\r\n      },\r\n      // Offset effect\r\n      offset: function(x, y) {\r\n        return this.put(new SVG.OffsetEffect(x,y))\r\n      },\r\n      // Image effect\r\n      image: function(src) {\r\n        return this.put(new SVG.ImageEffect(src))\r\n      },\r\n      // Merge effect\r\n      merge: function() {\r\n        //pass the array of arguments to the constructor because we dont know if the user gave us an array as the first arguemnt or wether they listed the effects in the arguments\r\n        var args = [undefined];\r\n        for(var i in arguments) args.push(arguments[i]);\r\n        return this.put(new (SVG.MergeEffect.bind.apply(SVG.MergeEffect,args)))\r\n      },\r\n      // Gaussian Blur effect\r\n      gaussianBlur: function(x,y) {\r\n        return this.put(new SVG.GaussianBlurEffect(x,y))\r\n      },\r\n      // Morphology effect\r\n      morphology: function(operator,radius){\r\n        return this.put(new SVG.MorphologyEffect(operator,radius))\r\n      },\r\n      // DiffuseLighting effect\r\n      diffuseLighting: function(surfaceScale,diffuseConstant,kernelUnitLength){\r\n        return this.put(new SVG.DiffuseLightingEffect(surfaceScale,diffuseConstant,kernelUnitLength))\r\n      },\r\n      // DisplacementMap effect\r\n      displacementMap: function(in1,in2,scale,xChannelSelector,yChannelSelector){\r\n        return this.put(new SVG.DisplacementMapEffect(in1,in2,scale,xChannelSelector,yChannelSelector))\r\n      },\r\n      // SpecularLighting effect\r\n      specularLighting: function(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength){\r\n        return this.put(new SVG.SpecularLightingEffect(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength))\r\n      },\r\n      // Tile effect\r\n      tile: function(){\r\n        return this.put(new SVG.TileEffect());\r\n      },\r\n      // Turbulence effect\r\n      turbulence: function(baseFrequency,numOctaves,seed,stitchTiles,type){\r\n        return this.put(new SVG.TurbulenceEffect(baseFrequency,numOctaves,seed,stitchTiles,type))\r\n      },\r\n      // Default string value\r\n      toString: function() {\r\n        return 'url(#' + this.attr('id') + ')'\r\n      }\r\n    }\r\n  });\r\n\r\n  //add .filter function\r\n  SVG.extend(SVG.Defs, {\r\n    // Define filter\r\n    filter: function(block) {\r\n      var filter = this.put(new SVG.Filter);\r\n\r\n      /* invoke passed block */\r\n      if (typeof block === 'function')\r\n        block.call(filter, filter);\r\n\r\n      return filter\r\n    }\r\n  });\r\n  SVG.extend(SVG.Container, {\r\n    // Define filter on defs\r\n    filter: function(block) {\r\n      return this.defs().filter(block)\r\n    }\r\n  });\r\n  SVG.extend(SVG.Element, SVG.G, SVG.Nested, {\r\n    // Create filter element in defs and store reference\r\n    filter: function(block) {\r\n      this.filterer = block instanceof SVG.Element ?\r\n        block : this.doc().filter(block);\r\n\r\n      if(this.doc() && this.filterer.doc() !== this.doc()){\r\n        this.doc().defs().add(this.filterer);\r\n      }\r\n\r\n      this.attr('filter', this.filterer);\r\n\r\n      return this.filterer\r\n    },\r\n    // Remove filter\r\n    unfilter: function(remove) {\r\n      /* also remove the filter node */\r\n      if (this.filterer && remove === true)\r\n        this.filterer.remove();\r\n\r\n      /* delete reference to filterer */\r\n      delete this.filterer;\r\n\r\n      /* remove filter attribute */\r\n      return this.attr('filter', null)\r\n    }\r\n  });\r\n\r\n  // Create SVG.Effect class\r\n  SVG.Effect = SVG.invent({\r\n    create: function(){\r\n      this.constructor.call(this);\r\n    },\r\n    inherit: SVG.Element,\r\n    extend: {\r\n      // Set in attribute\r\n      in: function(effect) {\r\n        return effect == null? this.parent() && this.parent().select('[result=\"'+this.attr('in')+'\"]').get(0) || this.attr('in') : this.attr('in', effect)\r\n      },\r\n      // Named result\r\n      result: function(result) {\r\n        return result == null? this.attr('result') : this.attr('result',result)\r\n      },\r\n      // Stringification\r\n      toString: function() {\r\n        return this.result()\r\n      }\r\n    }\r\n  });\r\n\r\n  // create class for parent effects like merge\r\n  // Inherit from SVG.Parent\r\n  SVG.ParentEffect = SVG.invent({\r\n    create: function(){\r\n      this.constructor.call(this);\r\n    },\r\n    inherit: SVG.Parent,\r\n    extend: {\r\n      // Set in attribute\r\n      in: function(effect) {\r\n        return effect == null? this.parent() && this.parent().select('[result=\"'+this.attr('in')+'\"]').get(0) || this.attr('in') : this.attr('in', effect)\r\n      },\r\n      // Named result\r\n      result: function(result) {\r\n        return result == null? this.attr('result') : this.attr('result',result)\r\n      },\r\n      // Stringification\r\n      toString: function() {\r\n        return this.result()\r\n      }\r\n    }\r\n  });\r\n\r\n  //chaining\r\n  var chainingEffects = {\r\n    // Blend effect\r\n    blend: function(in2, mode) {\r\n      return this.parent() && this.parent().blend(this, in2, mode) //pass this as the first input\r\n    },\r\n    // ColorMatrix effect\r\n    colorMatrix: function(type, values) {\r\n      return this.parent() && this.parent().colorMatrix(type, values).in(this)\r\n    },\r\n    // ConvolveMatrix effect\r\n    convolveMatrix: function(matrix) {\r\n      return this.parent() && this.parent().convolveMatrix(matrix).in(this)\r\n    },\r\n    // ComponentTransfer effect\r\n    componentTransfer: function(components) {\r\n      return this.parent() && this.parent().componentTransfer(components).in(this)\r\n    },\r\n    // Composite effect\r\n    composite: function(in2, operator) {\r\n      return this.parent() && this.parent().composite(this, in2, operator) //pass this as the first input\r\n    },\r\n    // Flood effect\r\n    flood: function(color, opacity) {\r\n      return this.parent() && this.parent().flood(color, opacity) //this effect dont have inputs\r\n    },\r\n    // Offset effect\r\n    offset: function(x, y) {\r\n      return this.parent() && this.parent().offset(x,y).in(this)\r\n    },\r\n    // Image effect\r\n    image: function(src) {\r\n      return this.parent() && this.parent().image(src) //this effect dont have inputs\r\n    },\r\n    // Merge effect\r\n    merge: function() {\r\n      return this.parent() && this.parent().merge.apply(this.parent(),[this].concat(arguments)) //pass this as the first argument\r\n    },\r\n    // Gaussian Blur effect\r\n    gaussianBlur: function(x,y) {\r\n      return this.parent() && this.parent().gaussianBlur(x,y).in(this)\r\n    },\r\n    // Morphology effect\r\n    morphology: function(operator,radius){\r\n      return this.parent() && this.parent().morphology(operator,radius).in(this)\r\n    },\r\n    // DiffuseLighting effect\r\n    diffuseLighting: function(surfaceScale,diffuseConstant,kernelUnitLength){\r\n      return this.parent() && this.parent().diffuseLighting(surfaceScale,diffuseConstant,kernelUnitLength).in(this)\r\n    },\r\n    // DisplacementMap effect\r\n    displacementMap: function(in2,scale,xChannelSelector,yChannelSelector){\r\n      return this.parent() && this.parent().displacementMap(this,in2,scale,xChannelSelector,yChannelSelector) //pass this as the first input\r\n    },\r\n    // SpecularLighting effect\r\n    specularLighting: function(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength){\r\n      return this.parent() && this.parent().specularLighting(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength).in(this)\r\n    },\r\n    // Tile effect\r\n    tile: function(){\r\n      return this.parent() && this.parent().tile().in(this)\r\n    },\r\n    // Turbulence effect\r\n    turbulence: function(baseFrequency,numOctaves,seed,stitchTiles,type){\r\n      return this.parent() && this.parent().turbulence(baseFrequency,numOctaves,seed,stitchTiles,type).in(this)\r\n    }\r\n  };\r\n  SVG.extend(SVG.Effect,chainingEffects);\r\n  SVG.extend(SVG.ParentEffect,chainingEffects);\r\n\r\n  //crea class for child effects, like MergeNode, FuncR and lights\r\n  SVG.ChildEffect = SVG.invent({\r\n    create: function(){\r\n      this.constructor.call(this);\r\n    },\r\n    inherit: SVG.Element,\r\n    extend: {\r\n    in: function(effect){\r\n      this.attr('in',effect);\r\n    }\r\n    //dont include any \"result\" functions because these types of nodes dont have them\r\n    }\r\n  });\r\n\r\n  // Create all different effects\r\n  var effects = {\r\n    blend: function(in1,in2,mode){\r\n      this.attr({\r\n        in: in1,\r\n        in2: in2,\r\n        mode: mode || 'normal'\r\n      });\r\n    },\r\n    colorMatrix: function(type,values){\r\n      if (type == 'matrix')\r\n        values = normaliseMatrix(values);\r\n\r\n      this.attr({\r\n        type:   type\r\n      , values: typeof values == 'undefined' ? null : values\r\n      });\r\n    },\r\n    convolveMatrix: function(matrix){\r\n      matrix = normaliseMatrix(matrix);\r\n\r\n      this.attr({\r\n        order:        Math.sqrt(matrix.split(' ').length)\r\n      , kernelMatrix: matrix\r\n      });\r\n    },\r\n    composite: function(in1, in2, operator){\r\n      this.attr({\r\n        in: in1,\r\n        in2: in2,\r\n        operator: operator\r\n      });\r\n    },\r\n    flood: function(color,opacity){\r\n      this.attr('flood-color',color);\r\n      if(opacity != null) this.attr('flood-opacity',opacity);\r\n    },\r\n    offset: function(x,y){\r\n      this.attr({\r\n        dx: x,\r\n        dy: y\r\n      });\r\n    },\r\n    image: function(src){\r\n      this.attr('href', src, SVG.xlink);\r\n    },\r\n    displacementMap: function(in1,in2,scale,xChannelSelector,yChannelSelector){\r\n      this.attr({\r\n        in: in1,\r\n        in2: in2,\r\n        scale: scale,\r\n        xChannelSelector: xChannelSelector,\r\n        yChannelSelector: yChannelSelector\r\n      });\r\n    },\r\n    gaussianBlur: function(x,y){\r\n      if(x != null || y != null)\r\n        this.attr('stdDeviation', listString(Array.prototype.slice.call(arguments)));\r\n      else\r\n        this.attr('stdDeviation', '0 0');\r\n    },\r\n    morphology: function(operator,radius){\r\n      this.attr({\r\n        operator: operator,\r\n        radius: radius\r\n      });\r\n    },\r\n    tile: function(){\r\n\r\n    },\r\n    turbulence: function(baseFrequency,numOctaves,seed,stitchTiles,type){\r\n      this.attr({\r\n        numOctaves: numOctaves,\r\n        seed: seed,\r\n        stitchTiles: stitchTiles,\r\n        baseFrequency: baseFrequency,\r\n        type: type\r\n      });\r\n    }\r\n  };\r\n\r\n  // Create all parent effects\r\n  var parentEffects = {\r\n    merge: function(){\r\n      var children;\r\n\r\n      //test to see if we have a set\r\n      if(arguments[0] instanceof SVG.Set){\r\n        var that = this;\r\n        arguments[0].each(function(i){\r\n          if(this instanceof SVG.MergeNode)\r\n            that.put(this);\r\n          else if(this instanceof SVG.Effect || this instanceof SVG.ParentEffect)\r\n            that.put(new SVG.MergeNode(this));\r\n        });\r\n      }\r\n      else{\r\n        //if the first argument is an array use it\r\n        if(Array.isArray(arguments[0]))\r\n          children = arguments[0];\r\n        else\r\n          children = arguments;\r\n\r\n        for(var i = 0; i < children.length; i++){\r\n          if(children[i] instanceof SVG.MergeNode){\r\n            this.put(children[i]);\r\n          }\r\n          else this.put(new SVG.MergeNode(children[i]));\r\n        }\r\n      }\r\n    },\r\n    componentTransfer: function(compontents){\r\n      /* create rgb set */\r\n      this.rgb = new SVG.Set\r\n\r\n      /* create components */\r\n      ;(['r', 'g', 'b', 'a']).forEach(function(c) {\r\n        /* create component */\r\n        this[c] = new SVG['Func' + c.toUpperCase()]('identity');\r\n\r\n        /* store component in set */\r\n        this.rgb.add(this[c]);\r\n\r\n        /* add component node */\r\n        this.node.appendChild(this[c].node);\r\n      }.bind(this)); //lost context in foreach\r\n\r\n      /* set components */\r\n      if (compontents) {\r\n        if (compontents.rgb) {\r\n(['r', 'g', 'b']).forEach(function(c) {\r\n            this[c].attr(compontents.rgb);\r\n          }.bind(this));\r\n\r\n          delete compontents.rgb;\r\n        }\r\n\r\n        /* set individual components */\r\n        for (var c in compontents)\r\n          this[c].attr(compontents[c]);\r\n      }\r\n    },\r\n    diffuseLighting: function(surfaceScale,diffuseConstant,kernelUnitLength){\r\n      this.attr({\r\n        surfaceScale: surfaceScale,\r\n        diffuseConstant: diffuseConstant,\r\n        kernelUnitLength: kernelUnitLength\r\n      });\r\n    },\r\n    specularLighting: function(surfaceScale,diffuseConstant,specularExponent,kernelUnitLength){\r\n      this.attr({\r\n        surfaceScale: surfaceScale,\r\n        diffuseConstant: diffuseConstant,\r\n        specularExponent: specularExponent,\r\n        kernelUnitLength: kernelUnitLength\r\n      });\r\n    },\r\n  };\r\n\r\n  // Create child effects like PointLight and MergeNode\r\n  var childEffects = {\r\n    distantLight: function(azimuth, elevation){\r\n      this.attr({\r\n        azimuth: azimuth,\r\n        elevation: elevation\r\n      });\r\n    },\r\n    pointLight: function(x,y,z){\r\n      this.attr({\r\n        x: x,\r\n        y: y,\r\n        z: z\r\n      });\r\n    },\r\n    spotLight: function(x,y,z,pointsAtX,pointsAtY,pointsAtZ){\r\n      this.attr({\r\n        x: x,\r\n        y: y,\r\n        z: z,\r\n        pointsAtX: pointsAtX,\r\n        pointsAtY: pointsAtY,\r\n        pointsAtZ: pointsAtZ\r\n      });\r\n    },\r\n    mergeNode: function(in1){\r\n      this.attr('in',in1);\r\n    }\r\n  }\r\n\r\n  // Create compontent functions\r\n  ;(['r', 'g', 'b', 'a']).forEach(function(c) {\r\n    /* create class */\r\n    childEffects['Func' + c.toUpperCase()] = function(type) {\r\n      this.attr('type',type);\r\n\r\n      // take diffent arguments based on the type\r\n      switch(type){\r\n        case 'table':\r\n          this.attr('tableValues',arguments[1]);\r\n          break\r\n        case 'linear':\r\n          this.attr('slope',arguments[1]);\r\n          this.attr('intercept',arguments[2]);\r\n          break\r\n        case 'gamma':\r\n          this.attr('amplitude',arguments[1]);\r\n          this.attr('exponent',arguments[2]);\r\n          this.attr('offset',arguments[2]);\r\n          break\r\n      }\r\n    };\r\n  });\r\n\r\n  //create effects\r\n  foreach(effects,function(effect,i){\r\n\r\n    /* capitalize name */\r\n    var name = i.charAt(0).toUpperCase() + i.slice(1);\r\n    var proto = {};\r\n\r\n    /* create class */\r\n    SVG[name + 'Effect'] = SVG.invent({\r\n      create: function() {\r\n        //call super\r\n        this.constructor.call(this, SVG.create('fe' + name));\r\n\r\n        //call constructor for this effect\r\n        effect.apply(this,arguments);\r\n\r\n        //set the result\r\n        this.result(this.attr('id') + 'Out');\r\n      },\r\n      inherit: SVG.Effect,\r\n      extend: proto\r\n    });\r\n  });\r\n\r\n  //create parent effects\r\n  foreach(parentEffects,function(effect,i){\r\n\r\n    /* capitalize name */\r\n    var name = i.charAt(0).toUpperCase() + i.slice(1);\r\n    var proto = {};\r\n\r\n    /* create class */\r\n    SVG[name + 'Effect'] = SVG.invent({\r\n      create: function() {\r\n        //call super\r\n        this.constructor.call(this, SVG.create('fe' + name));\r\n\r\n        //call constructor for this effect\r\n        effect.apply(this,arguments);\r\n\r\n        //set the result\r\n        this.result(this.attr('id') + 'Out');\r\n      },\r\n      inherit: SVG.ParentEffect,\r\n      extend: proto\r\n    });\r\n  });\r\n\r\n  //create child effects\r\n  foreach(childEffects,function(effect,i){\r\n\r\n    /* capitalize name */\r\n    var name = i.charAt(0).toUpperCase() + i.slice(1);\r\n    var proto = {};\r\n\r\n    /* create class */\r\n    SVG[name] = SVG.invent({\r\n      create: function() {\r\n        //call super\r\n        this.constructor.call(this, SVG.create('fe' + name));\r\n\r\n        //call constructor for this effect\r\n        effect.apply(this,arguments);\r\n      },\r\n      inherit: SVG.ChildEffect,\r\n      extend: proto\r\n    });\r\n  });\r\n\r\n  // Effect-specific extensions\r\n  SVG.extend(SVG.MergeEffect,{\r\n    in: function(effect){\r\n      if(effect instanceof SVG.MergeNode)\r\n        this.add(effect,0);\r\n      else\r\n        this.add(new SVG.MergeNode(effect),0);\r\n\r\n      return this\r\n    }\r\n  });\r\n  SVG.extend(SVG.CompositeEffect,SVG.BlendEffect,SVG.DisplacementMapEffect,{\r\n    in2: function(effect){\r\n        return effect == null? this.parent() && this.parent().select('[result=\"'+this.attr('in2')+'\"]').get(0) || this.attr('in2') : this.attr('in2', effect)\r\n    }\r\n  });\r\n\r\n  // Presets\r\n  SVG.filter = {\r\n    sepiatone:  [ .343, .669, .119, 0, 0\r\n                , .249, .626, .130, 0, 0\r\n                , .172, .334, .111, 0, 0\r\n                , .000, .000, .000, 1, 0 ]\r\n  };\r\n\r\n  // Helpers\r\n  function normaliseMatrix(matrix) {\r\n    /* convert possible array value to string */\r\n    if (Array.isArray(matrix))\r\n      matrix = new SVG.Array(matrix);\r\n\r\n    /* ensure there are no leading, tailing or double spaces */\r\n    return matrix.toString().replace(/^\\s+/, '').replace(/\\s+$/, '').replace(/\\s+/g, ' ')\r\n  }\r\n\r\n  function listString(list) {\r\n    if (!Array.isArray(list))\r\n      return list\r\n\r\n    for (var i = 0, l = list.length, s = []; i < l; i++)\r\n      s.push(list[i]);\r\n\r\n    return s.join(' ')\r\n  }\r\n\r\n  function foreach(){ //loops through mutiple objects\r\n    var fn = function(){};\r\n    if(typeof arguments[arguments.length-1] == 'function'){\r\n      fn = arguments[arguments.length-1];\r\n      Array.prototype.splice.call(arguments,arguments.length-1,1);\r\n    }\r\n    for(var k in arguments){\r\n      for(var i in arguments[k]){\r\n        fn(arguments[k][i],i,arguments[k]);\r\n      }\r\n    }\r\n  }\r\n\r\n}).call(undefined);\n\n(function() {\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  morph: function(array) {\r\n\r\n    var startArr = this.value\r\n      ,  destArr = this.parse(array);\r\n\r\n    var startOffsetM = 0\r\n      ,  destOffsetM = 0;\r\n\r\n    var startOffsetNextM = false\r\n      ,  destOffsetNextM = false;\r\n\r\n    while(true){\r\n      // stop if there is no M anymore\r\n      if(startOffsetM === false && destOffsetM === false) break\r\n\r\n      // find the next M in path array\r\n      startOffsetNextM = findNextM(startArr, startOffsetM === false ? false : startOffsetM+1);\r\n       destOffsetNextM = findNextM( destArr,  destOffsetM === false ? false :  destOffsetM+1);\r\n\r\n      // We have to add one M to the startArray\r\n      if(startOffsetM === false){\r\n        var bbox = new SVG.PathArray(result.start).bbox();\r\n\r\n        // when the last block had no bounding box we simply take the first M we got\r\n        if(bbox.height == 0 || bbox.width == 0){\r\n          startOffsetM =  startArr.push(startArr[0]) - 1;\r\n        }else{\r\n          // we take the middle of the bbox instead when we got one\r\n          startOffsetM = startArr.push( ['M', bbox.x + bbox.width/2, bbox.y + bbox.height/2 ] ) - 1;\r\n        }\r\n      }\r\n\r\n      // We have to add one M to the destArray\r\n      if( destOffsetM === false){\r\n        var bbox = new SVG.PathArray(result.dest).bbox();\r\n\r\n        if(bbox.height == 0 || bbox.width == 0){\r\n          destOffsetM =  destArr.push(destArr[0]) - 1;\r\n        }else{\r\n          destOffsetM =  destArr.push( ['M', bbox.x + bbox.width/2, bbox.y + bbox.height/2 ] ) - 1;\r\n        }\r\n      }\r\n\r\n      // handle block from M to next M\r\n      var result = handleBlock(startArr, startOffsetM, startOffsetNextM, destArr, destOffsetM, destOffsetNextM);\r\n\r\n      // update the arrays to their new values\r\n      startArr = startArr.slice(0, startOffsetM).concat(result.start, startOffsetNextM === false ? [] : startArr.slice(startOffsetNextM));\r\n       destArr =  destArr.slice(0,  destOffsetM).concat(result.dest ,  destOffsetNextM === false ? [] :  destArr.slice( destOffsetNextM));\r\n\r\n      // update offsets\r\n      startOffsetM = startOffsetNextM === false ? false : startOffsetM + result.start.length;\r\n       destOffsetM =  destOffsetNextM === false ? false :  destOffsetM + result.dest.length;\r\n\r\n    }\r\n\r\n    // copy back arrays\r\n    this.value = startArr;\r\n    this.destination = new SVG.PathArray();\r\n    this.destination.value = destArr;\r\n\r\n    return this\r\n  }\r\n});\r\n\r\n\r\n\r\n// sorry for the long declaration\r\n// slices out one block (from M to M) and syncronize it so the types and length match\r\nfunction handleBlock(startArr, startOffsetM, startOffsetNextM, destArr, destOffsetM, destOffsetNextM, undefined){\r\n\r\n  // slice out the block we need\r\n  var startArrTemp = startArr.slice(startOffsetM, startOffsetNextM || undefined)\r\n    ,  destArrTemp =  destArr.slice( destOffsetM,  destOffsetNextM || undefined);\r\n\r\n  var i = 0\r\n    , posStart = {pos:[0,0], start:[0,0]}\r\n    , posDest  = {pos:[0,0], start:[0,0]};\r\n\r\n  do{\r\n\r\n    // convert shorthand types to long form\r\n    startArrTemp[i] = simplyfy.call(posStart, startArrTemp[i]);\r\n     destArrTemp[i] = simplyfy.call(posDest ,  destArrTemp[i]);\r\n\r\n    // check if both shape types match\r\n    // 2 elliptical arc curve commands ('A'), are considered different if the\r\n    // flags (large-arc-flag, sweep-flag) don't match\r\n    if(startArrTemp[i][0] != destArrTemp[i][0] || startArrTemp[i][0] == 'M' ||\r\n        (startArrTemp[i][0] == 'A' &&\r\n          (startArrTemp[i][4] != destArrTemp[i][4] || startArrTemp[i][5] != destArrTemp[i][5])\r\n        )\r\n      ) {\r\n\r\n      // if not, convert shapes to beziere\r\n      Array.prototype.splice.apply(startArrTemp, [i, 1].concat(toBeziere.call(posStart, startArrTemp[i])));\r\n       Array.prototype.splice.apply(destArrTemp, [i, 1].concat(toBeziere.call(posDest, destArrTemp[i])));\r\n\r\n    } else {\r\n\r\n      // only update positions otherwise\r\n      startArrTemp[i] = setPosAndReflection.call(posStart, startArrTemp[i]);\r\n       destArrTemp[i] = setPosAndReflection.call(posDest ,  destArrTemp[i]);\r\n\r\n    }\r\n\r\n    // we are at the end at both arrays. stop here\r\n    if(++i == startArrTemp.length && i == destArrTemp.length) break\r\n\r\n    // destArray is longer. Add one element\r\n    if(i == startArrTemp.length){\r\n      startArrTemp.push([\r\n        'C',\r\n        posStart.pos[0],\r\n        posStart.pos[1],\r\n        posStart.pos[0],\r\n        posStart.pos[1],\r\n        posStart.pos[0],\r\n        posStart.pos[1],\r\n      ]);\r\n    }\r\n\r\n    // startArr is longer. Add one element\r\n    if(i == destArrTemp.length){\r\n      destArrTemp.push([\r\n        'C',\r\n        posDest.pos[0],\r\n        posDest.pos[1],\r\n        posDest.pos[0],\r\n        posDest.pos[1],\r\n        posDest.pos[0],\r\n        posDest.pos[1]\r\n      ]);\r\n    }\r\n\r\n\r\n  }while(true)\r\n\r\n  // return the updated block\r\n  return {start:startArrTemp, dest:destArrTemp}\r\n}\r\n\r\n// converts shorthand types to long form\r\nfunction simplyfy(val){\r\n\r\n  switch(val[0]){\r\n    case 'z': // shorthand line to start\r\n    case 'Z':\r\n      val[0] = 'L';\r\n      val[1] = this.start[0];\r\n      val[2] = this.start[1];\r\n      break\r\n    case 'H': // shorthand horizontal line\r\n      val[0] = 'L';\r\n      val[2] = this.pos[1];\r\n      break\r\n    case 'V': // shorthand vertical line\r\n      val[0] = 'L';\r\n      val[2] = val[1];\r\n      val[1] = this.pos[0];\r\n      break\r\n    case 'T': // shorthand quadratic beziere\r\n      val[0] = 'Q';\r\n      val[3] = val[1];\r\n      val[4] = val[2];\r\n      val[1] = this.reflection[1];\r\n      val[2] = this.reflection[0];\r\n      break\r\n    case 'S': // shorthand cubic beziere\r\n      val[0] = 'C';\r\n      val[6] = val[4];\r\n      val[5] = val[3];\r\n      val[4] = val[2];\r\n      val[3] = val[1];\r\n      val[2] = this.reflection[1];\r\n      val[1] = this.reflection[0];\r\n      break\r\n  }\r\n\r\n  return val\r\n\r\n}\r\n\r\n// updates reflection point and current position\r\nfunction setPosAndReflection(val){\r\n\r\n  var len = val.length;\r\n\r\n  this.pos = [ val[len-2], val[len-1] ];\r\n\r\n  if('SCQT'.indexOf(val[0]) != -1)\r\n    this.reflection = [ 2 * this.pos[0] - val[len-4], 2 * this.pos[1] - val[len-3] ];\r\n\r\n  return val\r\n}\r\n\r\n// converts all types to cubic beziere\r\nfunction toBeziere(val){\r\n  var retVal = [val];\r\n\r\n  switch(val[0]){\r\n    case 'M': // special handling for M\r\n      this.pos = this.start = [val[1], val[2]];\r\n      return retVal\r\n    case 'L':\r\n      val[5] = val[3] = val[1];\r\n      val[6] = val[4] = val[2];\r\n      val[1] = this.pos[0];\r\n      val[2] = this.pos[1];\r\n      break\r\n    case 'Q':\r\n      val[6] = val[4];\r\n      val[5] = val[3];\r\n      val[4] = val[4] * 1/3 + val[2] * 2/3;\r\n      val[3] = val[3] * 1/3 + val[1] * 2/3;\r\n      val[2] = this.pos[1] * 1/3 + val[2] * 2/3;\r\n      val[1] = this.pos[0] * 1/3 + val[1] * 2/3;\r\n      break\r\n    case 'A':\r\n      retVal = arcToBeziere(this.pos, val);\r\n      val = retVal[0];\r\n      break\r\n  }\r\n\r\n  val[0] = 'C';\r\n  this.pos = [val[5], val[6]];\r\n  this.reflection = [2 * val[5] - val[3], 2 * val[6] - val[4]];\r\n\r\n  return retVal\r\n\r\n}\r\n\r\n// finds the next position of type M\r\nfunction findNextM(arr, offset){\r\n\r\n  if(offset === false) return false\r\n\r\n  for(var i = offset, len = arr.length;i < len;++i){\r\n\r\n    if(arr[i][0] == 'M') return i\r\n\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n\r\n\r\n// Convert an arc segment into equivalent cubic Bezier curves\r\n// Depending on the arc, up to 4 curves might be used to represent it since a\r\n// curve gives a good approximation for only a quarter of an ellipse\r\n// The curves are returned as an array of SVG curve commands:\r\n// [ ['C', x1, y1, x2, y2, x, y] ... ]\r\nfunction arcToBeziere(pos, val) {\r\n    // Parameters extraction, handle out-of-range parameters as specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/implnote.html#ArcOutOfRangeParameters\r\n    var rx = Math.abs(val[1]), ry = Math.abs(val[2]), xAxisRotation = val[3] % 360\r\n      , largeArcFlag = val[4], sweepFlag = val[5], x = val[6], y = val[7]\r\n      , A = new SVG.Point(pos), B = new SVG.Point(x, y)\r\n      , primedCoord, lambda, mat, k, c, cSquare, t, O, OA, OB, tetaStart, tetaEnd\r\n      , deltaTeta, nbSectors, f, arcSegPoints, angle, sinAngle, cosAngle, pt, i, il\r\n      , retVal = [], x1, y1, x2, y2;\r\n\r\n    // Ensure radii are non-zero\r\n    if(rx === 0 || ry === 0 || (A.x === B.x && A.y === B.y)) {\r\n      // treat this arc as a straight line segment\r\n      return [['C', A.x, A.y, B.x, B.y, B.x, B.y]]\r\n    }\r\n\r\n    // Ensure radii are large enough using the algorithm provided in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/implnote.html#ArcCorrectionOutOfRangeRadii\r\n    primedCoord = new SVG.Point((A.x-B.x)/2, (A.y-B.y)/2).transform(new SVG.Matrix().rotate(xAxisRotation));\r\n    lambda = (primedCoord.x * primedCoord.x) / (rx * rx) + (primedCoord.y * primedCoord.y) / (ry * ry);\r\n    if(lambda > 1) {\r\n      lambda = Math.sqrt(lambda);\r\n      rx = lambda*rx;\r\n      ry = lambda*ry;\r\n    }\r\n\r\n    // To simplify calculations, we make the arc part of a unit circle (rayon is 1) instead of an ellipse\r\n    mat = new SVG.Matrix().rotate(xAxisRotation).scale(1/rx, 1/ry).rotate(-xAxisRotation);\r\n    A = A.transform(mat);\r\n    B = B.transform(mat);\r\n\r\n    // Calculate the horizontal and vertical distance between the initial and final point of the arc\r\n    k = [B.x-A.x, B.y-A.y];\r\n\r\n    // Find the length of the chord formed by A and B\r\n    cSquare = k[0]*k[0] + k[1]*k[1];\r\n    c = Math.sqrt(cSquare);\r\n\r\n    // Calculate the ratios of the horizontal and vertical distance on the length of the chord\r\n    k[0] /= c;\r\n    k[1] /= c;\r\n\r\n    // Calculate the distance between the circle center and the chord midpoint\r\n    // using this formula: t = sqrt(r^2 - c^2 / 4)\r\n    // where t is the distance between the cirle center and the chord midpoint,\r\n    //       r is the rayon of the circle and c is the chord length\r\n    // From: http://www.ajdesigner.com/phpcircle/circle_segment_chord_t.php\r\n    // Because of the imprecision of floating point numbers, cSquare might end\r\n    // up being slightly above 4 which would result in a negative radicand\r\n    // To prevent that, a test is made before computing the square root\r\n    t = (cSquare < 4) ? Math.sqrt(1 - cSquare/4) : 0;\r\n\r\n    // For most situations, there are actually two different ellipses that\r\n    // satisfy the constraints imposed by the points A and B, the radii rx and ry,\r\n    // and the xAxisRotation\r\n    // When the flags largeArcFlag and sweepFlag are equal, it means that the\r\n    // second ellipse is used as a solution\r\n    // See: https://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\r\n    if(largeArcFlag === sweepFlag) {\r\n        t *= -1;\r\n    }\r\n\r\n    // Calculate the coordinates of the center of the circle from the midpoint of the chord\r\n    // This is done by multiplying the ratios calculated previously by the distance between\r\n    // the circle center and the chord midpoint and using these values to go from the midpoint\r\n    // to the center of the circle\r\n    // The negative of the vertical distance ratio is used to modify the x coordinate while\r\n    // the horizontal distance ratio is used to modify the y coordinate\r\n    // That is because the center of the circle is perpendicular to the chord and perpendicular\r\n    // lines are negative reciprocals\r\n    O = new SVG.Point((B.x+A.x)/2 + t*-k[1], (B.y+A.y)/2 + t*k[0]);\r\n    // Move the center of the circle at the origin\r\n    OA = new SVG.Point(A.x-O.x, A.y-O.y);\r\n    OB = new SVG.Point(B.x-O.x, B.y-O.y);\r\n\r\n    // Calculate the start and end angle\r\n    tetaStart = Math.acos(OA.x/Math.sqrt(OA.x*OA.x + OA.y*OA.y));\r\n    if (OA.y < 0) {\r\n      tetaStart *= -1;\r\n    }\r\n    tetaEnd = Math.acos(OB.x/Math.sqrt(OB.x*OB.x + OB.y*OB.y));\r\n    if (OB.y < 0) {\r\n      tetaEnd *= -1;\r\n    }\r\n\r\n    // If sweep-flag is '1', then the arc will be drawn in a \"positive-angle\" direction,\r\n    // make sure that the end angle is above the start angle\r\n    if (sweepFlag && tetaStart > tetaEnd) {\r\n      tetaEnd += 2*Math.PI;\r\n    }\r\n    // If sweep-flag is '0', then the arc will be drawn in a \"negative-angle\" direction,\r\n    // make sure that the end angle is below the start angle\r\n    if (!sweepFlag && tetaStart < tetaEnd) {\r\n      tetaEnd -= 2*Math.PI;\r\n    }\r\n\r\n    // Find the number of Bezier curves that are required to represent the arc\r\n    // A cubic Bezier curve gives a good enough approximation when representing at most a quarter of a circle\r\n    nbSectors = Math.ceil(Math.abs(tetaStart-tetaEnd) * 2/Math.PI);\r\n\r\n    // Calculate the coordinates of the points of all the Bezier curves required to represent the arc\r\n    // For an in-depth explanation of this part see: http://pomax.github.io/bezierinfo/#circles_cubic\r\n    arcSegPoints = [];\r\n    angle = tetaStart;\r\n    deltaTeta = (tetaEnd-tetaStart)/nbSectors;\r\n    f = 4*Math.tan(deltaTeta/4)/3;\r\n    for (i = 0; i <= nbSectors; i++) { // The <= is because a Bezier curve have a start and a endpoint\r\n      cosAngle = Math.cos(angle);\r\n      sinAngle = Math.sin(angle);\r\n\r\n      pt = new SVG.Point(O.x+cosAngle, O.y+sinAngle);\r\n      arcSegPoints[i] = [new SVG.Point(pt.x+f*sinAngle, pt.y-f*cosAngle), pt, new SVG.Point(pt.x-f*sinAngle, pt.y+f*cosAngle)];\r\n\r\n      angle += deltaTeta;\r\n    }\r\n\r\n    // Remove the first control point of the first segment point and remove the second control point of the last segment point\r\n    // These two control points are not used in the approximation of the arc, that is why they are removed\r\n    arcSegPoints[0][0] = arcSegPoints[0][1].clone();\r\n    arcSegPoints[arcSegPoints.length-1][2] = arcSegPoints[arcSegPoints.length-1][1].clone();\r\n\r\n    // Revert the transformation that was applied to make the arc part of a unit circle instead of an ellipse\r\n    mat = new SVG.Matrix().rotate(xAxisRotation).scale(rx, ry).rotate(-xAxisRotation);\r\n    for (i = 0, il = arcSegPoints.length; i < il; i++) {\r\n      arcSegPoints[i][0] = arcSegPoints[i][0].transform(mat);\r\n      arcSegPoints[i][1] = arcSegPoints[i][1].transform(mat);\r\n      arcSegPoints[i][2] = arcSegPoints[i][2].transform(mat);\r\n    }\r\n\r\n\r\n    // Convert the segments points to SVG curve commands\r\n    for (i = 1, il = arcSegPoints.length; i < il; i++) {\r\n      pt = arcSegPoints[i-1][2];\r\n      x1 = pt.x;\r\n      y1 = pt.y;\r\n\r\n      pt = arcSegPoints[i][0];\r\n      x2 = pt.x;\r\n      y2 = pt.y;\r\n\r\n      pt = arcSegPoints[i][1];\r\n      x = pt.x;\r\n      y = pt.y;\r\n\r\n      retVal.push(['C', x1, y1, x2, y2, x, y]);\r\n    }\r\n\r\n    return retVal\r\n}\r\n}());\n\n/*! svg.draggable.js - v2.2.1 - 2016-08-25\r\n* https://github.com/wout/svg.draggable.js\r\n* Copyright (c) 2016 Wout Fierens; Licensed MIT */\r\n(function() {\r\n\r\n  // creates handler, saves it\r\n  function DragHandler(el){\r\n    el.remember('_draggable', this);\r\n    this.el = el;\r\n  }\r\n\r\n\r\n  // Sets new parameter, starts dragging\r\n  DragHandler.prototype.init = function(constraint, val){\r\n    var _this = this;\r\n    this.constraint = constraint;\r\n    this.value = val;\r\n    this.el.on('mousedown.drag', function(e){ _this.start(e); });\r\n    this.el.on('touchstart.drag', function(e){ _this.start(e); });\r\n  };\r\n\r\n  // transforms one point from screen to user coords\r\n  DragHandler.prototype.transformPoint = function(event, offset){\r\n      event = event || window.event;\r\n      var touches = event.changedTouches && event.changedTouches[0] || event;\r\n      this.p.x = touches.pageX - (offset || 0);\r\n      this.p.y = touches.pageY;\r\n      return this.p.matrixTransform(this.m)\r\n  };\r\n  \r\n  // gets elements bounding box with special handling of groups, nested and use\r\n  DragHandler.prototype.getBBox = function(){\r\n\r\n    var box = this.el.bbox();\r\n\r\n    if(this.el instanceof SVG.Nested) box = this.el.rbox();\r\n    \r\n    if (this.el instanceof SVG.G || this.el instanceof SVG.Use || this.el instanceof SVG.Nested) {\r\n      box.x = this.el.x();\r\n      box.y = this.el.y();\r\n    }\r\n\r\n    return box\r\n  };\r\n\r\n  // start dragging\r\n  DragHandler.prototype.start = function(e){\r\n\r\n    // check for left button\r\n    if(e.type == 'click'|| e.type == 'mousedown' || e.type == 'mousemove'){\r\n      if((e.which || e.buttons) != 1){\r\n          return\r\n      }\r\n    }\r\n  \r\n    var _this = this;\r\n\r\n    // fire beforedrag event\r\n    this.el.fire('beforedrag', { event: e, handler: this });\r\n\r\n    // search for parent on the fly to make sure we can call\r\n    // draggable() even when element is not in the dom currently\r\n    this.parent = this.parent || this.el.parent(SVG.Nested) || this.el.parent(SVG.Doc);\r\n    this.p = this.parent.node.createSVGPoint();\r\n\r\n    // save current transformation matrix\r\n    this.m = this.el.node.getScreenCTM().inverse();\r\n\r\n    var box = this.getBBox();\r\n    \r\n    var anchorOffset;\r\n    \r\n    // fix text-anchor in text-element (#37)\r\n    if(this.el instanceof SVG.Text){\r\n      anchorOffset = this.el.node.getComputedTextLength();\r\n        \r\n      switch(this.el.attr('text-anchor')){\r\n        case 'middle':\r\n          anchorOffset /= 2;\r\n          break\r\n        case 'start':\r\n          anchorOffset = 0;\r\n          break;\r\n      }\r\n    }\r\n    \r\n    this.startPoints = {\r\n      // We take absolute coordinates since we are just using a delta here\r\n      point: this.transformPoint(e, anchorOffset),\r\n      box:   box,\r\n      transform: this.el.transform()\r\n    };\r\n    \r\n    // add drag and end events to window\r\n    SVG.on(window, 'mousemove.drag', function(e){ _this.drag(e); });\r\n    SVG.on(window, 'touchmove.drag', function(e){ _this.drag(e); });\r\n    SVG.on(window, 'mouseup.drag', function(e){ _this.end(e); });\r\n    SVG.on(window, 'touchend.drag', function(e){ _this.end(e); });\r\n\r\n    // fire dragstart event\r\n    this.el.fire('dragstart', {event: e, p: this.startPoints.point, m: this.m, handler: this});\r\n\r\n    // prevent browser drag behavior\r\n    e.preventDefault();\r\n\r\n    // prevent propagation to a parent that might also have dragging enabled\r\n    e.stopPropagation();\r\n  };\r\n\r\n  // while dragging\r\n  DragHandler.prototype.drag = function(e){\r\n\r\n    var box = this.getBBox()\r\n      , p   = this.transformPoint(e)\r\n      , x   = this.startPoints.box.x + p.x - this.startPoints.point.x\r\n      , y   = this.startPoints.box.y + p.y - this.startPoints.point.y\r\n      , c   = this.constraint\r\n      , gx  = p.x - this.startPoints.point.x\r\n      , gy  = p.y - this.startPoints.point.y;\r\n      \r\n    var event = new CustomEvent('dragmove', {\r\n        detail: {\r\n            event: e\r\n          , p: p\r\n          , m: this.m\r\n          , handler: this\r\n        }\r\n      , cancelable: true\r\n    });\r\n      \r\n    this.el.fire(event);\r\n    \r\n    if(event.defaultPrevented) return p\r\n\r\n    // move the element to its new position, if possible by constraint\r\n    if (typeof c == 'function') {\r\n\r\n      var coord = c.call(this.el, x, y, this.m);\r\n\r\n      // bool, just show us if movement is allowed or not\r\n      if (typeof coord == 'boolean') {\r\n        coord = {\r\n          x: coord,\r\n          y: coord\r\n        };\r\n      }\r\n\r\n      // if true, we just move. If !false its a number and we move it there\r\n      if (coord.x === true) {\r\n        this.el.x(x);\r\n      } else if (coord.x !== false) {\r\n        this.el.x(coord.x);\r\n      }\r\n\r\n      if (coord.y === true) {\r\n        this.el.y(y);\r\n      } else if (coord.y !== false) {\r\n        this.el.y(coord.y);\r\n      }\r\n\r\n    } else if (typeof c == 'object') {\r\n\r\n      // keep element within constrained box\r\n      if (c.minX != null && x < c.minX)\r\n        x = c.minX;\r\n      else if (c.maxX != null && x > c.maxX - box.width){\r\n        x = c.maxX - box.width;\r\n      }if (c.minY != null && y < c.minY)\r\n        y = c.minY;\r\n      else if (c.maxY != null && y > c.maxY - box.height)\r\n        y = c.maxY - box.height;\r\n        \r\n      if(this.el instanceof SVG.G)\r\n        this.el.matrix(this.startPoints.transform).transform({x:gx, y: gy}, true);\r\n      else\r\n        this.el.move(x, y);\r\n    }\r\n    \r\n    // so we can use it in the end-method, too\r\n    return p\r\n  };\r\n\r\n  DragHandler.prototype.end = function(e){\r\n\r\n    // final drag\r\n    var p = this.drag(e);\r\n\r\n    // fire dragend event\r\n    this.el.fire('dragend', { event: e, p: p, m: this.m, handler: this });\r\n\r\n    // unbind events\r\n    SVG.off(window, 'mousemove.drag');\r\n    SVG.off(window, 'touchmove.drag');\r\n    SVG.off(window, 'mouseup.drag');\r\n    SVG.off(window, 'touchend.drag');\r\n\r\n  };\r\n\r\n  SVG.extend(SVG.Element, {\r\n    // Make element draggable\r\n    // Constraint might be an object (as described in readme.md) or a function in the form \"function (x, y)\" that gets called before every move.\r\n    // The function can return a boolean or an object of the form {x, y}, to which the element will be moved. \"False\" skips moving, true moves to raw x, y.\r\n    draggable: function(value, constraint) {\r\n\r\n      // Check the parameters and reassign if needed\r\n      if (typeof value == 'function' || typeof value == 'object') {\r\n        constraint = value;\r\n        value = true;\r\n      }\r\n\r\n      var dragHandler = this.remember('_draggable') || new DragHandler(this);\r\n\r\n      // When no parameter is given, value is true\r\n      value = typeof value === 'undefined' ? true : value;\r\n\r\n      if(value) dragHandler.init(constraint || {}, value);\r\n      else {\r\n        this.off('mousedown.drag');\r\n        this.off('touchstart.drag');\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n  });\r\n\r\n}).call(undefined);\n\n(function() {\n\nfunction SelectHandler(el) {\r\n\r\n    this.el = el;\r\n    el.remember('_selectHandler', this);\r\n    this.pointSelection = {isSelected: false};\r\n    this.rectSelection = {isSelected: false};\r\n\r\n}\r\n\r\nSelectHandler.prototype.init = function (value, options) {\r\n\r\n    var bbox = this.el.bbox();\r\n    this.options = {};\r\n\r\n    // Merging the defaults and the options-object together\r\n    for (var i in this.el.selectize.defaults) {\r\n        this.options[i] = this.el.selectize.defaults[i];\r\n        if (options[i] !== undefined) {\r\n            this.options[i] = options[i];\r\n        }\r\n    }\r\n\r\n    this.parent = this.el.parent();\r\n    this.nested = (this.nested || this.parent.group());\r\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\r\n\r\n    // When deepSelect is enabled and the element is a line/polyline/polygon, draw only points for moving\r\n    if (this.options.deepSelect && ['line', 'polyline', 'polygon'].indexOf(this.el.type) !== -1) {\r\n        this.selectPoints(value);\r\n    } else {\r\n        this.selectRect(value);\r\n    }\r\n\r\n    this.observe();\r\n    this.cleanup();\r\n\r\n};\r\n\r\nSelectHandler.prototype.selectPoints = function (value) {\r\n\r\n    this.pointSelection.isSelected = value;\r\n\r\n    // When set is already there we dont have to create one\r\n    if (this.pointSelection.set) {\r\n        return this;\r\n    }\r\n\r\n    // Create our set of elements\r\n    this.pointSelection.set = this.parent.set();\r\n    // draw the circles and mark the element as selected\r\n    this.drawCircles();\r\n\r\n    return this;\r\n\r\n};\r\n\r\n// create the point-array which contains the 2 points of a line or simply the points-array of polyline/polygon\r\nSelectHandler.prototype.getPointArray = function () {\r\n    var bbox = this.el.bbox();\r\n\r\n    return this.el.array().valueOf().map(function (el) {\r\n        return [el[0] - bbox.x, el[1] - bbox.y];\r\n    });\r\n};\r\n\r\n// The function to draw the circles\r\nSelectHandler.prototype.drawCircles = function () {\r\n\r\n    var _this = this, array = this.getPointArray();\r\n\r\n    // go through the array of points\r\n    for (var i = 0, len = array.length; i < len; ++i) {\r\n\r\n        var curriedEvent = (function (k) {\r\n            return function (ev) {\r\n                ev = ev || window.event;\r\n                ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n                ev.stopPropagation();\r\n\r\n                var x = ev.pageX || ev.touches[0].pageX;\r\n                var y = ev.pageY || ev.touches[0].pageY;\r\n                _this.el.fire('point', {x: x, y: y, i: k, event: ev});\r\n            };\r\n        })(i);\r\n\r\n        // add every point to the set\r\n        this.pointSelection.set.add(\r\n            // a circle with our css-classes and a touchstart-event which fires our event for moving points\r\n            this.nested.circle(this.options.radius)\r\n                .center(array[i][0], array[i][1])\r\n                .addClass(this.options.classPoints)\r\n                .addClass(this.options.classPoints + '_point')\r\n                .on('touchstart', curriedEvent)\r\n                .on('mousedown', curriedEvent)\r\n        );\r\n    }\r\n\r\n};\r\n\r\n// every time a circle is moved, we have to update the positions of our circle\r\nSelectHandler.prototype.updatePointSelection = function () {\r\n    var array = this.getPointArray();\r\n\r\n    this.pointSelection.set.each(function (i) {\r\n        if (this.cx() === array[i][0] && this.cy() === array[i][1]) {\r\n            return;\r\n        }\r\n        this.center(array[i][0], array[i][1]);\r\n    });\r\n};\r\n\r\nSelectHandler.prototype.updateRectSelection = function () {\r\n    var bbox = this.el.bbox();\r\n\r\n    this.rectSelection.set.get(0).attr({\r\n        width: bbox.width,\r\n        height: bbox.height\r\n    });\r\n\r\n    // set.get(1) is always in the upper left corner. no need to move it\r\n    if (this.options.points) {\r\n        this.rectSelection.set.get(2).center(bbox.width, 0);\r\n        this.rectSelection.set.get(3).center(bbox.width, bbox.height);\r\n        this.rectSelection.set.get(4).center(0, bbox.height);\r\n\r\n        this.rectSelection.set.get(5).center(bbox.width / 2, 0);\r\n        this.rectSelection.set.get(6).center(bbox.width, bbox.height / 2);\r\n        this.rectSelection.set.get(7).center(bbox.width / 2, bbox.height);\r\n        this.rectSelection.set.get(8).center(0, bbox.height / 2);\r\n    }\r\n\r\n    if (this.options.rotationPoint) {\r\n        if (this.options.points) {\r\n            this.rectSelection.set.get(9).center(bbox.width / 2, 20);\r\n        } else {\r\n            this.rectSelection.set.get(1).center(bbox.width / 2, 20);\r\n        }\r\n    }\r\n};\r\n\r\nSelectHandler.prototype.selectRect = function (value) {\r\n\r\n    var _this = this, bbox = this.el.bbox();\r\n\r\n    this.rectSelection.isSelected = value;\r\n\r\n    // when set is already p\r\n    this.rectSelection.set = this.rectSelection.set || this.parent.set();\r\n\r\n    // helperFunction to create a mouse-down function which triggers the event specified in `eventName`\r\n    function getMoseDownFunc(eventName) {\r\n        return function (ev) {\r\n            ev = ev || window.event;\r\n            ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n            ev.stopPropagation();\r\n\r\n            var x = ev.pageX || ev.touches[0].pageX;\r\n            var y = ev.pageY || ev.touches[0].pageY;\r\n            _this.el.fire(eventName, {x: x, y: y, event: ev});\r\n        };\r\n    }\r\n\r\n    // create the selection-rectangle and add the css-class\r\n    if (!this.rectSelection.set.get(0)) {\r\n        this.rectSelection.set.add(this.nested.rect(bbox.width, bbox.height).addClass(this.options.classRect));\r\n    }\r\n\r\n    // Draw Points at the edges, if enabled\r\n    if (this.options.points && !this.rectSelection.set.get(1)) {\r\n        var ename =\"touchstart\", mname = \"mousedown\";\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, 0).attr('class', this.options.classPoints + '_lt').on(mname, getMoseDownFunc('lt')).on(ename, getMoseDownFunc('lt')));\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width, 0).attr('class', this.options.classPoints + '_rt').on(mname, getMoseDownFunc('rt')).on(ename, getMoseDownFunc('rt')));\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width, bbox.height).attr('class', this.options.classPoints + '_rb').on(mname, getMoseDownFunc('rb')).on(ename, getMoseDownFunc('rb')));\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, bbox.height).attr('class', this.options.classPoints + '_lb').on(mname, getMoseDownFunc('lb')).on(ename, getMoseDownFunc('lb')));\r\n\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width / 2, 0).attr('class', this.options.classPoints + '_t').on(mname, getMoseDownFunc('t')).on(ename, getMoseDownFunc('t')));\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width, bbox.height / 2).attr('class', this.options.classPoints + '_r').on(mname, getMoseDownFunc('r')).on(ename, getMoseDownFunc('r')));\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width / 2, bbox.height).attr('class', this.options.classPoints + '_b').on(mname, getMoseDownFunc('b')).on(ename, getMoseDownFunc('b')));\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(0, bbox.height / 2).attr('class', this.options.classPoints + '_l').on(mname, getMoseDownFunc('l')).on(ename, getMoseDownFunc('l')));\r\n\r\n        this.rectSelection.set.each(function () {\r\n            this.addClass(_this.options.classPoints);\r\n        });\r\n    }\r\n\r\n    // draw rotationPint, if enabled\r\n    if (this.options.rotationPoint && ((this.options.points && !this.rectSelection.set.get(9)) || (!this.options.points && !this.rectSelection.set.get(1)))) {\r\n\r\n        var curriedEvent = function (ev) {\r\n            ev = ev || window.event;\r\n            ev.preventDefault ? ev.preventDefault() : ev.returnValue = false;\r\n            ev.stopPropagation();\r\n\r\n            var x = ev.pageX || ev.touches[0].pageX;\r\n            var y = ev.pageY || ev.touches[0].pageY;\r\n            _this.el.fire('rot', {x: x, y: y, event: ev});\r\n        };\r\n        this.rectSelection.set.add(this.nested.circle(this.options.radius).center(bbox.width / 2, 20).attr('class', this.options.classPoints + '_rot')\r\n            .on(\"touchstart\", curriedEvent).on(\"mousedown\", curriedEvent));\r\n\r\n    }\r\n\r\n};\r\n\r\nSelectHandler.prototype.handler = function () {\r\n\r\n    var bbox = this.el.bbox();\r\n    this.nested.matrix(new SVG.Matrix(this.el).translate(bbox.x, bbox.y));\r\n\r\n    if (this.rectSelection.isSelected) {\r\n        this.updateRectSelection();\r\n    }\r\n\r\n    if (this.pointSelection.isSelected) {\r\n        this.updatePointSelection();\r\n    }\r\n\r\n};\r\n\r\nSelectHandler.prototype.observe = function () {\r\n    var _this = this;\r\n\r\n    if (MutationObserver) {\r\n        if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\r\n            this.observerInst = this.observerInst || new MutationObserver(function () {\r\n                _this.handler();\r\n            });\r\n            this.observerInst.observe(this.el.node, {attributes: true});\r\n        } else {\r\n            try {\r\n                this.observerInst.disconnect();\r\n                delete this.observerInst;\r\n            } catch (e) {\r\n            }\r\n        }\r\n    } else {\r\n        this.el.off('DOMAttrModified.select');\r\n\r\n        if (this.rectSelection.isSelected || this.pointSelection.isSelected) {\r\n            this.el.on('DOMAttrModified.select', function () {\r\n                _this.handler();\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nSelectHandler.prototype.cleanup = function () {\r\n\r\n    //var _this = this;\r\n\r\n    if (!this.rectSelection.isSelected && this.rectSelection.set) {\r\n        // stop watching the element, remove the selection\r\n        this.rectSelection.set.each(function () {\r\n            this.remove();\r\n        });\r\n\r\n        this.rectSelection.set.clear();\r\n        delete this.rectSelection.set;\r\n    }\r\n\r\n    if (!this.pointSelection.isSelected && this.pointSelection.set) {\r\n        // Remove all points, clear the set, stop watching the element\r\n        this.pointSelection.set.each(function () {\r\n            this.remove();\r\n        });\r\n\r\n        this.pointSelection.set.clear();\r\n        delete this.pointSelection.set;\r\n    }\r\n\r\n    if (!this.pointSelection.isSelected && !this.rectSelection.isSelected) {\r\n        this.nested.remove();\r\n        delete this.nested;\r\n\r\n    }\r\n};\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n    // Select element with mouse\r\n    selectize: function (value, options) {\r\n\r\n        // Check the parameters and reassign if needed\r\n        if (typeof value === 'object') {\r\n            options = value;\r\n            value = true;\r\n        }\r\n\r\n        var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);\r\n\r\n        selectHandler.init(value === undefined ? true : value, options || {});\r\n\r\n        return this;\r\n\r\n    }\r\n});\r\n\r\nSVG.Element.prototype.selectize.defaults = {\r\n    points: true,                            // If true, points at the edges are drawn. Needed for resize!\r\n    classRect: 'svg_select_boundingRect',    // Css-class added to the rect\r\n    classPoints: 'svg_select_points',        // Css-class added to the points\r\n    radius: 7,                               // radius of the points\r\n    rotationPoint: true,                     // If true, rotation point is drawn. Needed for rotation!\r\n    deepSelect: false                        // If true, moving of single points is possible (only line, polyline, polyon)\r\n};\n}());\n\n(function() {\n(function () {\r\n\r\n    function ResizeHandler(el) {\r\n\r\n        el.remember('_resizeHandler', this);\r\n\r\n        this.el = el;\r\n        this.parameters = {};\r\n        this.lastUpdateCall = null;\r\n        this.p = el.doc().node.createSVGPoint();\r\n    }\r\n\r\n    ResizeHandler.prototype.transformPoint = function(x, y, m){\r\n\r\n        this.p.x = x - (this.offset.x - window.pageXOffset);\r\n        this.p.y = y - (this.offset.y - window.pageYOffset);\r\n\r\n        return this.p.matrixTransform(m || this.m);\r\n\r\n    };\r\n\r\n    ResizeHandler.prototype._extractPosition = function(event) {\r\n        // Extract a position from a mouse/touch event.\r\n        // Returns { x: .., y: .. }\r\n        return {\r\n            x: event.clientX != null ? event.clientX : event.touches[0].clientX,\r\n            y: event.clientY != null ? event.clientY : event.touches[0].clientY\r\n        }\r\n    };\r\n\r\n    ResizeHandler.prototype.init = function (options) {\r\n\r\n        var _this = this;\r\n\r\n        this.stop();\r\n\r\n        if (options === 'stop') {\r\n            return;\r\n        }\r\n\r\n        this.options = {};\r\n\r\n        // Merge options and defaults\r\n        for (var i in this.el.resize.defaults) {\r\n            this.options[i] = this.el.resize.defaults[i];\r\n            if (typeof options[i] !== 'undefined') {\r\n                this.options[i] = options[i];\r\n            }\r\n        }\r\n\r\n        // We listen to all these events which are specifying different edges\r\n        this.el.on('lt.resize', function(e){ _this.resize(e || window.event); });  // Left-Top\r\n        this.el.on('rt.resize', function(e){ _this.resize(e || window.event); });  // Right-Top\r\n        this.el.on('rb.resize', function(e){ _this.resize(e || window.event); });  // Right-Bottom\r\n        this.el.on('lb.resize', function(e){ _this.resize(e || window.event); });  // Left-Bottom\r\n\r\n        this.el.on('t.resize', function(e){ _this.resize(e || window.event); });   // Top\r\n        this.el.on('r.resize', function(e){ _this.resize(e || window.event); });   // Right\r\n        this.el.on('b.resize', function(e){ _this.resize(e || window.event); });   // Bottom\r\n        this.el.on('l.resize', function(e){ _this.resize(e || window.event); });   // Left\r\n\r\n        this.el.on('rot.resize', function(e){ _this.resize(e || window.event); }); // Rotation\r\n\r\n        this.el.on('point.resize', function(e){ _this.resize(e || window.event); }); // Point-Moving\r\n\r\n        // This call ensures, that the plugin reacts to a change of snapToGrid immediately\r\n        this.update();\r\n\r\n    };\r\n\r\n    ResizeHandler.prototype.stop = function(){\r\n        this.el.off('lt.resize');\r\n        this.el.off('rt.resize');\r\n        this.el.off('rb.resize');\r\n        this.el.off('lb.resize');\r\n\r\n        this.el.off('t.resize');\r\n        this.el.off('r.resize');\r\n        this.el.off('b.resize');\r\n        this.el.off('l.resize');\r\n\r\n        this.el.off('rot.resize');\r\n\r\n        this.el.off('point.resize');\r\n\r\n        return this;\r\n    };\r\n\r\n    ResizeHandler.prototype.resize = function (event) {\r\n\r\n        var _this = this;\r\n\r\n        this.m = this.el.node.getScreenCTM().inverse();\r\n        this.offset = { x: window.pageXOffset, y: window.pageYOffset };\r\n\r\n        var txPt = this._extractPosition(event.detail.event);\r\n        this.parameters = {\r\n            type: this.el.type, // the type of element\r\n            p: this.transformPoint(txPt.x, txPt.y),\r\n            x: event.detail.x,      // x-position of the mouse when resizing started\r\n            y: event.detail.y,      // y-position of the mouse when resizing started\r\n            box: this.el.bbox(),    // The bounding-box of the element\r\n            rotation: this.el.transform().rotation  // The current rotation of the element\r\n        };\r\n\r\n        // Add font-size parameter if the element type is text\r\n        if (this.el.type === \"text\") {\r\n            this.parameters.fontSize = this.el.attr()[\"font-size\"];\r\n        }\r\n\r\n        // the i-param in the event holds the index of the point which is moved, when using `deepSelect`\r\n        if (event.detail.i !== undefined) {\r\n\r\n            // get the point array\r\n            var array = this.el.array().valueOf();\r\n\r\n            // Save the index and the point which is moved\r\n            this.parameters.i = event.detail.i;\r\n            this.parameters.pointCoords = [array[event.detail.i][0], array[event.detail.i][1]];\r\n        }\r\n\r\n        // Lets check which edge of the bounding-box was clicked and resize the this.el according to this\r\n        switch (event.type) {\r\n\r\n            // Left-Top-Edge\r\n            case 'lt':\r\n                // We build a calculating function for every case which gives us the new position of the this.el\r\n                this.calc = function (diffX, diffY) {\r\n                    // The procedure is always the same\r\n                    // First we snap the edge to the given grid (snapping to 1px grid is normal resizing)\r\n                    var snap = this.snapToGrid(diffX, diffY);\r\n\r\n                    // Now we check if the new height and width still valid (> 0)\r\n                    if (this.parameters.box.width - snap[0] > 0 && this.parameters.box.height - snap[1] > 0) {\r\n                        // ...if valid, we resize the this.el (which can include moving because the coord-system starts at the left-top and this edge is moving sometimes when resized)\r\n\r\n                        /*\r\n                         * but first check if the element is text box, so we can change the font size instead of\r\n                         * the width and height\r\n                         */\r\n\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap);\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y + snap[1]).size(this.parameters.box.width - snap[0], this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right-Top\r\n            case 'rt':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1 << 1);\r\n                    if (this.parameters.box.width + snap[0] > 0 && this.parameters.box.height - snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap);\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]).size(this.parameters.box.width + snap[0], this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right-Bottom\r\n            case 'rb':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.width + snap[0] > 0 && this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x - snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize + snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap);\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).size(this.parameters.box.width + snap[0], this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Left-Bottom\r\n            case 'lb':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1);\r\n                    if (this.parameters.box.width - snap[0] > 0 && this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y);\r\n                            this.el.attr(\"font-size\", this.parameters.fontSize - snap[0]);\r\n                            return;\r\n                        }\r\n\r\n                        snap = this.checkAspectRatio(snap);\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y).size(this.parameters.box.width - snap[0], this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Top\r\n            case 't':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1 << 1);\r\n                    if (this.parameters.box.height - snap[1] > 0) {\r\n                        // Disable the font-resizing if it is not from the corner of bounding-box\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y + snap[1]).height(this.parameters.box.height - snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Right\r\n            case 'r':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.width + snap[0] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).width(this.parameters.box.width + snap[0]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Bottom\r\n            case 'b':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 0);\r\n                    if (this.parameters.box.height + snap[1] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x, this.parameters.box.y).height(this.parameters.box.height + snap[1]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Left\r\n            case 'l':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n                    var snap = this.snapToGrid(diffX, diffY, 1);\r\n                    if (this.parameters.box.width - snap[0] > 0) {\r\n                        if (this.parameters.type === \"text\") {\r\n                            return;\r\n                        }\r\n\r\n                        this.el.move(this.parameters.box.x + snap[0], this.parameters.box.y).width(this.parameters.box.width - snap[0]);\r\n                    }\r\n                };\r\n                break;\r\n\r\n            // Rotation\r\n            case 'rot':\r\n                // s.a.\r\n                this.calc = function (diffX, diffY) {\r\n\r\n                    // yes this is kinda stupid but we need the mouse coords back...\r\n                    var current = {x: diffX + this.parameters.p.x, y: diffY + this.parameters.p.y};\r\n\r\n                    // start minus middle\r\n                    var sAngle = Math.atan2((this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2), (this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2));\r\n\r\n                    // end minus middle\r\n                    var pAngle = Math.atan2((current.y - this.parameters.box.y - this.parameters.box.height / 2), (current.x - this.parameters.box.x - this.parameters.box.width / 2));\r\n\r\n                    var angle = (pAngle - sAngle) * 180 / Math.PI;\r\n\r\n                    // We have to move the element to the center of the box first and change the rotation afterwards\r\n                    // because rotation always works around a rotation-center, which is changed when moving the element\r\n                    // We also set the new rotation center to the center of the box.\r\n                    this.el.center(this.parameters.box.cx, this.parameters.box.cy).rotate(this.parameters.rotation + angle - angle % this.options.snapToAngle, this.parameters.box.cx, this.parameters.box.cy);\r\n                };\r\n                break;\r\n\r\n            // Moving one single Point (needed when an element is deepSelected which means you can move every single point of the object)\r\n            case 'point':\r\n                this.calc = function (diffX, diffY) {\r\n\r\n                    // Snapping the point to the grid\r\n                    var snap = this.snapToGrid(diffX, diffY, this.parameters.pointCoords[0], this.parameters.pointCoords[1]);\r\n\r\n                    // Get the point array\r\n                    var array = this.el.array().valueOf();\r\n\r\n                    // Changing the moved point in the array\r\n                    array[this.parameters.i][0] = this.parameters.pointCoords[0] + snap[0];\r\n                    array[this.parameters.i][1] = this.parameters.pointCoords[1] + snap[1];\r\n\r\n                    // And plot the new this.el\r\n                    this.el.plot(array);\r\n                };\r\n        }\r\n\r\n        this.el.fire('resizestart', {dx: this.parameters.x, dy: this.parameters.y, event: event});\r\n        // When resizing started, we have to register events for...\r\n        // Touches.\r\n        SVG.on(window, 'touchmove.resize', function(e) {\r\n            _this.update(e || window.event);\r\n        });\r\n        SVG.on(window, 'touchend.resize', function() {\r\n            _this.done();\r\n        });\r\n        // Mouse.\r\n        SVG.on(window, 'mousemove.resize', function (e) {\r\n            _this.update(e || window.event);\r\n        });\r\n        SVG.on(window, 'mouseup.resize', function () {\r\n            _this.done();\r\n        });\r\n\r\n    };\r\n\r\n    // The update-function redraws the element every time the mouse is moving\r\n    ResizeHandler.prototype.update = function (event) {\r\n\r\n        if (!event) {\r\n            if (this.lastUpdateCall) {\r\n                this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Calculate the difference between the mouseposition at start and now\r\n        var txPt = this._extractPosition(event);\r\n        var p = this.transformPoint(txPt.x, txPt.y);\r\n\r\n        var diffX = p.x - this.parameters.p.x,\r\n            diffY = p.y - this.parameters.p.y;\r\n\r\n        this.lastUpdateCall = [diffX, diffY];\r\n\r\n        // Calculate the new position and height / width of the element\r\n        this.calc(diffX, diffY);\r\n\r\n       // Emit an event to say we have changed.\r\n        this.el.fire('resizing', {dx: diffX, dy: diffY, event: event});\r\n    };\r\n\r\n    // Is called on mouseup.\r\n    // Removes the update-function from the mousemove event\r\n    ResizeHandler.prototype.done = function () {\r\n        this.lastUpdateCall = null;\r\n        SVG.off(window, 'mousemove.resize');\r\n        SVG.off(window, 'mouseup.resize');\r\n        SVG.off(window, 'touchmove.resize');\r\n        SVG.off(window, 'touchend.resize');\r\n        this.el.fire('resizedone');\r\n    };\r\n\r\n    // The flag is used to determine whether the resizing is used with a left-Point (first bit) and top-point (second bit)\r\n    // In this cases the temp-values are calculated differently\r\n    ResizeHandler.prototype.snapToGrid = function (diffX, diffY, flag, pointCoordsY) {\r\n\r\n        var temp;\r\n\r\n        // If `pointCoordsY` is given, a single Point has to be snapped (deepSelect). That's why we need a different temp-value\r\n        if (typeof pointCoordsY !== 'undefined') {\r\n            // Note that flag = pointCoordsX in this case\r\n            temp = [(flag + diffX) % this.options.snapToGrid, (pointCoordsY + diffY) % this.options.snapToGrid];\r\n        } else {\r\n            // We check if the flag is set and if not we set a default-value (both bits set - which means upper-left-edge)\r\n            flag = flag == null ? 1 | 1 << 1 : flag;\r\n            temp = [(this.parameters.box.x + diffX + (flag & 1 ? 0 : this.parameters.box.width)) % this.options.snapToGrid, (this.parameters.box.y + diffY + (flag & (1 << 1) ? 0 : this.parameters.box.height)) % this.options.snapToGrid];\r\n        }\r\n\r\n\r\n        diffX -= (Math.abs(temp[0]) < this.options.snapToGrid / 2 ?\r\n                  temp[0] :\r\n                  temp[0] - (diffX < 0 ? -this.options.snapToGrid : this.options.snapToGrid));\r\n        diffY -= (Math.abs(temp[1]) < this.options.snapToGrid / 2 ?\r\n                  temp[1] :\r\n                  temp[1] - (diffY < 0 ? -this.options.snapToGrid : this.options.snapToGrid));\r\n\r\n        return this.constraintToBox(diffX, diffY, flag, pointCoordsY);\r\n\r\n    };\r\n\r\n    // keep element within constrained box\r\n    ResizeHandler.prototype.constraintToBox = function (diffX, diffY, flag, pointCoordsY) {\r\n        //return [diffX, diffY]\r\n        var c = this.options.constraint || {};\r\n        var orgX, orgY;\r\n\r\n        if (typeof pointCoordsY !== 'undefined') {\r\n          orgX = flag;\r\n          orgY = pointCoordsY;\r\n        } else {\r\n          orgX = this.parameters.box.x + (flag & 1 ? 0 : this.parameters.box.width);\r\n          orgY = this.parameters.box.y + (flag & (1<<1) ? 0 : this.parameters.box.height);\r\n        }\r\n\r\n        if (typeof c.minX !== 'undefined' && orgX + diffX < c.minX) {\r\n          diffX = c.minX - orgX;\r\n        }\r\n\r\n        if (typeof c.maxX !== 'undefined' && orgX + diffX > c.maxX) {\r\n          diffX = c.maxX - orgX;\r\n        }\r\n\r\n        if (typeof c.minY !== 'undefined' && orgY + diffY < c.minY) {\r\n          diffY = c.minY - orgY;\r\n        }\r\n\r\n        if (typeof c.maxY !== 'undefined' && orgY + diffY > c.maxY) {\r\n          diffY = c.maxY - orgY;\r\n        }\r\n\r\n        return [diffX, diffY];\r\n    };\r\n\r\n    ResizeHandler.prototype.checkAspectRatio = function (snap) {\r\n        if (!this.options.saveAspectRatio) {\r\n            return snap;\r\n        }\r\n\r\n        var updatedSnap = snap.slice();\r\n        var aspectRatio = this.parameters.box.width / this.parameters.box.height;\r\n        var newW = this.parameters.box.width + snap[0];\r\n        var newH = this.parameters.box.height - snap[1];\r\n        var newAspectRatio = newW / newH;\r\n\r\n        if (newAspectRatio < aspectRatio) {\r\n            // Height is too big. Adapt it\r\n            updatedSnap[1] = newW / aspectRatio - this.parameters.box.height;\r\n        } else if (newAspectRatio > aspectRatio) {\r\n            // Width is too big. Adapt it\r\n            updatedSnap[0] = this.parameters.box.width - newH * aspectRatio;\r\n        }\r\n\r\n        return updatedSnap;\r\n\r\n    };\r\n\r\n    SVG.extend(SVG.Element, {\r\n        // Resize element with mouse\r\n        resize: function (options) {\r\n\r\n            (this.remember('_resizeHandler') || new ResizeHandler(this)).init(options || {});\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n    });\r\n\r\n    SVG.Element.prototype.resize.defaults = {\r\n        snapToAngle: 0.1,       // Specifies the speed the rotation is happening when moving the mouse\r\n        snapToGrid: 1,          // Snaps to a grid of `snapToGrid` Pixels\r\n        constraint: {},         // keep element within constrained box\r\n        saveAspectRatio: false  // Save aspect ratio when resizing using lt, rt, rb or lb points\r\n    };\r\n\r\n}).call(this);\n}());\n\nfunction styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".apexcharts-canvas {\\n  position: relative;\\n  user-select: none;\\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\\n}\\n\\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px;\\n}\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0,0,0,.5);\\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5);\\n}\\n.apexcharts-canvas.dark {\\n  background: #343F57;\\n}\\n\\n.apexcharts-inner {\\n  position: relative;\\n}\\n\\n.legend-mouseover-inactive {\\n  transition: 0.15s ease all;\\n  opacity: 0.20;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0;\\n}\\n\\n.apexcharts-gridline, .apexcharts-text {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: 0.15s ease all;\\n}\\n.apexcharts-tooltip.light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255, 255, 255, 0.96);\\n}\\n.apexcharts-tooltip.dark {\\n  color: #fff;\\n  background: rgba(30,30,30, 0.8);\\n}\\n.apexcharts-tooltip * {\\n  font-family: inherit;\\n}\\n\\n.apexcharts-tooltip .apexcharts-marker,\\n.apexcharts-area-series .apexcharts-area,\\n.apexcharts-line {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-tooltip.active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px;\\n}\\n.apexcharts-tooltip.light .apexcharts-tooltip-title {\\n  background: #ECEFF1;\\n  border-bottom: 1px solid #ddd;\\n}\\n.apexcharts-tooltip.dark .apexcharts-tooltip-title {\\n  background: rgba(0, 0, 0, 0.7);\\n  border-bottom: 1px solid #333;\\n}\\n\\n.apexcharts-tooltip-text-value,\\n.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  font-weight: 600;\\n  margin-left: 5px;\\n}\\n\\n.apexcharts-tooltip-text-z-label:empty,\\n.apexcharts-tooltip-text-z-value:empty {\\n  display: none;\\n}\\n\\n.apexcharts-tooltip-text-value, \\n.apexcharts-tooltip-text-z-value {\\n  font-weight: 600;\\n}\\n\\n.apexcharts-tooltip-marker {\\n  width: 12px;\\n  height: 12px;\\n  position: relative;\\n  top: 0px;\\n  margin-right: 10px;\\n  border-radius: 50%;\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center;\\n}\\n\\n.apexcharts-tooltip-series-group.active .apexcharts-tooltip-marker {\\n  opacity: 1;\\n}\\n.apexcharts-tooltip-series-group.active, .apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px;\\n}\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px;\\n}\\n.apexcharts-tooltip-candlestick {\\n  padding: 4px 8px;\\n}\\n.apexcharts-tooltip-candlestick > div {\\n  margin: 4px 0;\\n}\\n.apexcharts-tooltip-candlestick span.value {\\n  font-weight: bold;\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px;\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777;\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: bold;\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.apexcharts-xaxistooltip {\\n  opacity: 0;\\n  padding: 9px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n\\tbackground: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xaxistooltip.dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-xaxistooltip:after, .apexcharts-xaxistooltip:before {\\n\\tleft: 50%;\\n\\tborder: solid transparent;\\n\\tcontent: \\\" \\\";\\n\\theight: 0;\\n\\twidth: 0;\\n\\tposition: absolute;\\n\\tpointer-events: none;\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n\\tborder-color: rgba(236, 239, 241, 0);\\n\\tborder-width: 6px;\\n\\tmargin-left: -6px;\\n}\\n.apexcharts-xaxistooltip:before {\\n\\tborder-color: rgba(144, 164, 174, 0);\\n\\tborder-width: 7px;\\n\\tmargin-left: -7px;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after, .apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-top:after, .apexcharts-xaxistooltip-top:before {\\n  top: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #ECEFF1;\\n}\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90A4AE;\\n}\\n\\n.apexcharts-xaxistooltip-bottom.dark:after {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-xaxistooltip-bottom.dark:before {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color:#ECEFF1\\n}\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90A4AE;\\n}\\n.apexcharts-xaxistooltip-top.dark:after {\\n  border-top-color:rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-xaxistooltip-top.dark:before {\\n  border-top-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n\\n.apexcharts-xaxistooltip.active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  padding: 4px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n\\tbackground: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip.dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-yaxistooltip:after, .apexcharts-yaxistooltip:before {\\n\\ttop: 50%;\\n\\tborder: solid transparent;\\n\\tcontent: \\\" \\\";\\n\\theight: 0;\\n\\twidth: 0;\\n\\tposition: absolute;\\n\\tpointer-events: none;\\n}\\n.apexcharts-yaxistooltip:after {\\n\\tborder-color: rgba(236, 239, 241, 0);\\n\\tborder-width: 6px;\\n\\tmargin-top: -6px;\\n}\\n.apexcharts-yaxistooltip:before {\\n\\tborder-color: rgba(144, 164, 174, 0);\\n\\tborder-width: 7px;\\n\\tmargin-top: -7px;\\n}\\n\\n.apexcharts-yaxistooltip-left:after, .apexcharts-yaxistooltip-left:before {\\n  left: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-right:after, .apexcharts-yaxistooltip-right:before {\\n  right: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #ECEFF1;\\n}\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90A4AE;\\n}\\n.apexcharts-yaxistooltip-left.dark:after {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-yaxistooltip-left.dark:before {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #ECEFF1;\\n}\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90A4AE;\\n}\\n.apexcharts-yaxistooltip-right.dark:after {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n.apexcharts-yaxistooltip-right.dark:before {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip.active {\\n  opacity: 1;\\n}\\n\\n.apexcharts-xcrosshairs, .apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xcrosshairs.active, .apexcharts-ycrosshairs.active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-zoom-rect {\\n  pointer-events: none;\\n}\\n.apexcharts-selection-rect {\\n  cursor: move;\\n}\\n\\n.svg_select_points, .svg_select_points_rot {\\n  opacity: 0;\\n  visibility: hidden;\\n}\\n.svg_select_points_l, .svg_select_points_r {\\n  cursor: ew-resize;\\n  opacity: 1;\\n  visibility: visible;\\n  fill: #888;\\n}\\n.apexcharts-canvas.zoomable .hovering-zoom {\\n  cursor: crosshair\\n}\\n.apexcharts-canvas.zoomable .hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-xaxis,\\n.apexcharts-yaxis {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-zoom-icon, \\n.apexcharts-zoom-in-icon,\\n.apexcharts-zoom-out-icon,\\n.apexcharts-reset-zoom-icon, \\n.apexcharts-pan-icon, \\n.apexcharts-selection-icon,\\n.apexcharts-menu-icon, \\n.apexcharts-toolbar-custom-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6E8192;\\n  text-align: center;\\n}\\n\\n\\n.apexcharts-zoom-icon svg, \\n.apexcharts-zoom-in-icon svg,\\n.apexcharts-zoom-out-icon svg,\\n.apexcharts-reset-zoom-icon svg,\\n.apexcharts-menu-icon svg {\\n  fill: #6E8192;\\n}\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(0.76)\\n}\\n\\n.dark .apexcharts-zoom-icon svg, \\n.dark .apexcharts-zoom-in-icon svg,\\n.dark .apexcharts-zoom-out-icon svg,\\n.dark .apexcharts-reset-zoom-icon svg, \\n.dark .apexcharts-pan-icon svg, \\n.dark .apexcharts-selection-icon svg,\\n.dark .apexcharts-menu-icon svg, \\n.dark .apexcharts-toolbar-custom-icon svg{\\n  fill: #f3f4f5;\\n}\\n\\n.apexcharts-canvas .apexcharts-zoom-icon.selected svg, \\n.apexcharts-canvas .apexcharts-selection-icon.selected svg, \\n.apexcharts-canvas .apexcharts-reset-zoom-icon.selected svg {\\n  fill: #008FFB;\\n}\\n.light .apexcharts-selection-icon:not(.selected):hover svg,\\n.light .apexcharts-zoom-icon:not(.selected):hover svg, \\n.light .apexcharts-zoom-in-icon:hover svg, \\n.light .apexcharts-zoom-out-icon:hover svg, \\n.light .apexcharts-reset-zoom-icon:hover svg, \\n.light .apexcharts-menu-icon:hover svg {\\n  fill: #333;\\n}\\n\\n.apexcharts-selection-icon, .apexcharts-menu-icon {\\n  position: relative;\\n}\\n.apexcharts-reset-zoom-icon {\\n  margin-left: 5px;\\n}\\n.apexcharts-zoom-icon, .apexcharts-reset-zoom-icon, .apexcharts-menu-icon {\\n  transform: scale(0.85);\\n}\\n\\n.apexcharts-zoom-in-icon, .apexcharts-zoom-out-icon {\\n  transform: scale(0.7)\\n}\\n\\n.apexcharts-zoom-out-icon {\\n  margin-right: 3px;\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(0.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0px;\\n}\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6E8192;\\n  stroke-width: 2;\\n}\\n.apexcharts-pan-icon.selected svg {\\n  stroke: #008FFB;\\n}\\n.apexcharts-pan-icon:not(.selected):hover svg {\\n  stroke: #333;\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  top: 0px;\\n  right: 3px;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0px 6px 2px 6px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center; \\n}\\n\\n.apexcharts-toolbar svg {\\n  pointer-events: none;\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: 0.15s ease all;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-menu.open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer;\\n}\\n.light .apexcharts-menu-item:hover {\\n  background: #eee;\\n}\\n.dark .apexcharts-menu {\\n  background: rgba(0, 0, 0, 0.7);\\n  color: #fff;\\n}\\n\\n@media screen and (min-width: 768px) {\\n  .apexcharts-toolbar {\\n    /*opacity: 0;*/\\n  }\\n\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n    opacity: 1;\\n  } \\n}\\n\\n.apexcharts-datalabel.hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-pie-label,\\n.apexcharts-datalabel, .apexcharts-datalabel-label, .apexcharts-datalabel-value {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: 0.3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease;\\n}\\n\\n.apexcharts-canvas .hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0;\\n}\\n\\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events, .apexcharts-radar-series path, .apexcharts-radar-series polygon {\\n  pointer-events: none;\\n}\\n\\n/* markers */\\n\\n.apexcharts-marker {\\n  transition: 0.15s ease all;\\n}\\n\\n@keyframes opaque {\\n  0% {\\n    opacity: 0;\\n  }\\n  100% {\\n    opacity: 1;\\n  }\\n}\";\nstyleInject(css);\n\n/*\n * classList.js: Cross-browser full element.classList implementation.\n * 1.2.20171210\n *\n * By Eli Grey, http://eligrey.com\n * License: Dedicated to the public domain.\n *   See https://github.com/eligrey/classList.js/blob/master/LICENSE.md\n */\n\n/*global self, document, DOMException */\n\n/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js */\nif (\"document\" in self) {\n  // Full polyfill for browsers with no classList support\n  // Including IE < Edge missing SVGElement.classList\n  if (!(\"classList\" in document.createElement(\"_\")) || document.createElementNS && !(\"classList\" in document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\"))) {\n    (function (view) {\n\n      if (!('Element' in view)) return;\n\n      var classListProp = \"classList\",\n          protoProp = \"prototype\",\n          elemCtrProto = view.Element[protoProp],\n          objCtr = Object,\n          strTrim = String[protoProp].trim || function () {\n        return this.replace(/^\\s+|\\s+$/g, \"\");\n      },\n          arrIndexOf = Array[protoProp].indexOf || function (item) {\n        var i = 0,\n            len = this.length;\n\n        for (; i < len; i++) {\n          if (i in this && this[i] === item) {\n            return i;\n          }\n        }\n\n        return -1;\n      } // Vendors: please allow content code to instantiate DOMExceptions\n      ,\n          DOMEx = function DOMEx(type, message) {\n        this.name = type;\n        this.code = DOMException[type];\n        this.message = message;\n      },\n          checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {\n        if (token === \"\") {\n          throw new DOMEx(\"SYNTAX_ERR\", \"The token must not be empty.\");\n        }\n\n        if (/\\s/.test(token)) {\n          throw new DOMEx(\"INVALID_CHARACTER_ERR\", \"The token must not contain space characters.\");\n        }\n\n        return arrIndexOf.call(classList, token);\n      },\n          ClassList = function ClassList(elem) {\n        var trimmedClasses = strTrim.call(elem.getAttribute(\"class\") || \"\"),\n            classes = trimmedClasses ? trimmedClasses.split(/\\s+/) : [],\n            i = 0,\n            len = classes.length;\n\n        for (; i < len; i++) {\n          this.push(classes[i]);\n        }\n\n        this._updateClassName = function () {\n          elem.setAttribute(\"class\", this.toString());\n        };\n      },\n          classListProto = ClassList[protoProp] = [],\n          classListGetter = function classListGetter() {\n        return new ClassList(this);\n      }; // Most DOMException implementations don't allow calling DOMException's toString()\n      // on non-DOMExceptions. Error's toString() is sufficient here.\n\n\n      DOMEx[protoProp] = Error[protoProp];\n\n      classListProto.item = function (i) {\n        return this[i] || null;\n      };\n\n      classListProto.contains = function (token) {\n        return ~checkTokenAndGetIndex(this, token + \"\");\n      };\n\n      classListProto.add = function () {\n        var tokens = arguments,\n            i = 0,\n            l = tokens.length,\n            token,\n            updated = false;\n\n        do {\n          token = tokens[i] + \"\";\n\n          if (!~checkTokenAndGetIndex(this, token)) {\n            this.push(token);\n            updated = true;\n          }\n        } while (++i < l);\n\n        if (updated) {\n          this._updateClassName();\n        }\n      };\n\n      classListProto.remove = function () {\n        var tokens = arguments,\n            i = 0,\n            l = tokens.length,\n            token,\n            updated = false,\n            index;\n\n        do {\n          token = tokens[i] + \"\";\n          index = checkTokenAndGetIndex(this, token);\n\n          while (~index) {\n            this.splice(index, 1);\n            updated = true;\n            index = checkTokenAndGetIndex(this, token);\n          }\n        } while (++i < l);\n\n        if (updated) {\n          this._updateClassName();\n        }\n      };\n\n      classListProto.toggle = function (token, force) {\n        var result = this.contains(token),\n            method = result ? force !== true && \"remove\" : force !== false && \"add\";\n\n        if (method) {\n          this[method](token);\n        }\n\n        if (force === true || force === false) {\n          return force;\n        } else {\n          return !result;\n        }\n      };\n\n      classListProto.replace = function (token, replacement_token) {\n        var index = checkTokenAndGetIndex(token + \"\");\n\n        if (~index) {\n          this.splice(index, 1, replacement_token);\n\n          this._updateClassName();\n        }\n      };\n\n      classListProto.toString = function () {\n        return this.join(\" \");\n      };\n\n      if (objCtr.defineProperty) {\n        var classListPropDesc = {\n          get: classListGetter,\n          enumerable: true,\n          configurable: true\n        };\n\n        try {\n          objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n        } catch (ex) {\n          // IE 8 doesn't support enumerable:true\n          // adding undefined to fight this issue https://github.com/eligrey/classList.js/issues/36\n          // modernie IE8-MSW7 machine has IE8 8.0.6001.18702 and is affected\n          if (ex.number === undefined || ex.number === -0x7FF5EC54) {\n            classListPropDesc.enumerable = false;\n            objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);\n          }\n        }\n      } else if (objCtr[protoProp].__defineGetter__) {\n        elemCtrProto.__defineGetter__(classListProp, classListGetter);\n      }\n    })(self);\n  } // There is full or partial native classList support, so just check if we need\n  // to normalize the add/remove and toggle APIs.\n\n\n  (function () {\n\n    var testElement = document.createElement(\"_\");\n    testElement.classList.add(\"c1\", \"c2\"); // Polyfill for IE 10/11 and Firefox <26, where classList.add and\n    // classList.remove exist but support only one argument at a time.\n\n    if (!testElement.classList.contains(\"c2\")) {\n      var createMethod = function createMethod(method) {\n        var original = DOMTokenList.prototype[method];\n\n        DOMTokenList.prototype[method] = function (token) {\n          var i,\n              len = arguments.length;\n\n          for (i = 0; i < len; i++) {\n            token = arguments[i];\n            original.call(this, token);\n          }\n        };\n      };\n\n      createMethod('add');\n      createMethod('remove');\n    }\n\n    testElement.classList.toggle(\"c3\", false); // Polyfill for IE 10 and Firefox <24, where classList.toggle does not\n    // support the second argument.\n\n    if (testElement.classList.contains(\"c3\")) {\n      var _toggle = DOMTokenList.prototype.toggle;\n\n      DOMTokenList.prototype.toggle = function (token, force) {\n        if (1 in arguments && !this.contains(token) === !force) {\n          return force;\n        } else {\n          return _toggle.call(this, token);\n        }\n      };\n    } // replace() polyfill\n\n\n    if (!(\"replace\" in document.createElement(\"_\").classList)) {\n      DOMTokenList.prototype.replace = function (token, replacement_token) {\n        var tokens = this.toString().split(\" \"),\n            index = tokens.indexOf(token + \"\");\n\n        if (~index) {\n          tokens = tokens.slice(index);\n          this.remove.apply(this, tokens);\n          this.add(replacement_token);\n          this.add.apply(this, tokens.slice(1));\n        }\n      };\n    }\n\n    testElement = null;\n  })();\n}\n\n/**\n* Detect Element Resize\n*\n* https://github.com/sdecima/javascript-detect-element-resize\n* Sebastian Decima\n*\n* version: 0.5.3\n**/\n(function () {\n  var stylesCreated = false;\n\n  function resetTriggers(element) {\n    var triggers = element.__resizeTriggers__,\n        expand = triggers.firstElementChild,\n        contract = triggers.lastElementChild,\n        expandChild = expand.firstElementChild;\n    contract.scrollLeft = contract.scrollWidth;\n    contract.scrollTop = contract.scrollHeight;\n    expandChild.style.width = expand.offsetWidth + 1 + 'px';\n    expandChild.style.height = expand.offsetHeight + 1 + 'px';\n    expand.scrollLeft = expand.scrollWidth;\n    expand.scrollTop = expand.scrollHeight;\n  }\n\n  function checkTriggers(element) {\n    return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;\n  }\n\n  function scrollListener(e) {\n    var element = this;\n    resetTriggers(this);\n    if (this.__resizeRAF__) cancelFrame(this.__resizeRAF__);\n    this.__resizeRAF__ = requestFrame(function () {\n      if (checkTriggers(element)) {\n        element.__resizeLast__.width = element.offsetWidth;\n        element.__resizeLast__.height = element.offsetHeight;\n\n        element.__resizeListeners__.forEach(function (fn) {\n          fn.call(e);\n        });\n      }\n    });\n  }\n\n  function createStyles() {\n    if (!stylesCreated) {\n      // opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360\n      var css = (animationKeyframes || '') + '.resize-triggers { ' + (animationStyle || '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: \\\" \\\"; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',\n          head = document.head || document.getElementsByTagName('head')[0],\n          style = document.createElement('style');\n      style.type = 'text/css';\n\n      if (style.styleSheet) {\n        style.styleSheet.cssText = css;\n      } else {\n        style.appendChild(document.createTextNode(css));\n      }\n\n      head.appendChild(style);\n      stylesCreated = true;\n    }\n  }\n\n  var requestFrame = function () {\n    var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {\n      return window.setTimeout(fn, 20);\n    };\n\n    return function (fn) {\n      return raf(fn);\n    };\n  }();\n\n  var cancelFrame = function () {\n    var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;\n    return function (id) {\n      return cancel(id);\n    };\n  }();\n  /* Detect CSS Animations support to detect element display/re-attach */\n\n\n  var animation = false,\n      keyframeprefix = '',\n      animationstartevent = 'animationstart',\n      domPrefixes = 'Webkit Moz O ms'.split(' '),\n      startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),\n      pfx = '';\n  {\n    var elm = document.createElement('fakeelement');\n\n    if (elm.style.animationName !== undefined) {\n      animation = true;\n    }\n\n    if (animation === false) {\n      for (var i = 0; i < domPrefixes.length; i++) {\n        if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {\n          pfx = domPrefixes[i];\n          keyframeprefix = '-' + pfx.toLowerCase() + '-';\n          animationstartevent = startEvents[i];\n          break;\n        }\n      }\n    }\n  }\n  var animationName = 'resizeanim';\n  var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';\n  var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';\n\n  window.addResizeListener = function (element, fn) {\n    if (!element.__resizeTriggers__) {\n      if (getComputedStyle(element).position == 'static') element.style.position = 'relative';\n      createStyles();\n      element.__resizeLast__ = {};\n      element.__resizeListeners__ = [];\n      (element.__resizeTriggers__ = document.createElement('div')).className = 'resize-triggers';\n      element.__resizeTriggers__.innerHTML = '<div class=\"expand-trigger\"><div></div></div>' + '<div class=\"contract-trigger\"></div>';\n      element.appendChild(element.__resizeTriggers__);\n      resetTriggers(element);\n      element.addEventListener('scroll', scrollListener, true);\n      /* Listen for a css animation to detect element display/re-attach */\n\n      animationstartevent && element.__resizeTriggers__.addEventListener(animationstartevent, function (e) {\n        if (e.animationName == animationName) {\n          resetTriggers(element);\n        }\n      });\n    }\n\n    element.__resizeListeners__.push(fn);\n  };\n\n  window.removeResizeListener = function (element, fn) {\n    if (element) {\n      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n\n      if (!element.__resizeListeners__.length) {\n        element.removeEventListener('scroll', scrollListener);\n        element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);\n      }\n    }\n  };\n})();\n\nwindow.Apex = {};\n/**\n *\n * @module ApexCharts\n **/\n\nvar ApexCharts$1 =\n/*#__PURE__*/\nfunction () {\n  function ApexCharts(el, opts) {\n    _classCallCheck(this, ApexCharts);\n\n    this.opts = opts;\n    this.ctx = this; // Pass the user supplied options to the Base Class where these options will be extended with defaults. The returned object from Base Class will become the config object in the entire codebase.\n\n    this.w = new Base(opts).init();\n    this.el = el;\n    this.w.globals.cuid = (Math.random() + 1).toString(36).substring(4);\n    this.w.globals.chartID = this.w.config.chart.id ? this.w.config.chart.id : this.w.globals.cuid;\n    this.initModules();\n    this.create = Utils.bind(this.create, this);\n    this.windowResizeHandler = this.windowResize.bind(this);\n  }\n  /**\n   * The primary method user will call to render the chart.\n   */\n\n\n  _createClass(ApexCharts, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // main method\n      return new Promise$1(function (resolve, reject) {\n        // only draw chart, if element found\n        if (_this.el !== null) {\n          if (typeof Apex._chartInstances === 'undefined') {\n            Apex._chartInstances = [];\n          }\n\n          if (_this.w.config.chart.id) {\n            Apex._chartInstances.push({\n              id: _this.w.globals.chartID,\n              group: _this.w.config.chart.group,\n              chart: _this\n            });\n          } // set the locale here\n\n\n          _this.setLocale(_this.w.config.chart.defaultLocale);\n\n          var beforeMount = _this.w.config.chart.events.beforeMount;\n\n          if (typeof beforeMount === 'function') {\n            beforeMount(_this, _this.w);\n          }\n\n          _this.fireEvent('beforeMount', [_this, _this.w]);\n\n          window.addEventListener('resize', _this.windowResizeHandler);\n          window.addResizeListener(_this.el.parentNode, _this.parentResizeCallback.bind(_this));\n\n          var graphData = _this.create(_this.w.config.series, {});\n\n          if (!graphData) return resolve(_this);\n\n          _this.mount(graphData).then(function () {\n            resolve(graphData);\n\n            if (typeof _this.w.config.chart.events.mounted === 'function') {\n              _this.w.config.chart.events.mounted(_this, _this.w);\n            }\n\n            _this.fireEvent('mounted', [_this, _this.w]);\n          }).catch(function (e) {\n            reject(e); // handle error in case no data or element not found\n          });\n        } else {\n          reject(new Error('Element not found'));\n        }\n      });\n    }\n  }, {\n    key: \"initModules\",\n    value: function initModules() {\n      this.animations = new Animations(this);\n      this.annotations = new Annotations(this);\n      this.core = new Core(this.el, this);\n      this.grid = new Grid(this);\n      this.coreUtils = new CoreUtils(this);\n      this.config = new Config({});\n      this.crosshairs = new Crosshairs(this);\n      this.options = new Options();\n      this.responsive = new Responsive(this);\n      this.series = new Series(this);\n      this.theme = new Theme(this);\n      this.formatters = new Formatters(this);\n      this.titleSubtitle = new TitleSubtitle(this);\n      this.legend = new Legend(this);\n      this.toolbar = new Toolbar(this);\n      this.dimensions = new Dimensions(this);\n      this.zoomPanSelection = new ZoomPanSelection(this);\n      this.w.globals.tooltip = new Tooltip(this);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(name$$1, handler) {\n      var w = this.w;\n\n      if (w.globals.events.hasOwnProperty(name$$1)) {\n        w.globals.events[name$$1].push(handler);\n      } else {\n        w.globals.events[name$$1] = [handler];\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(name$$1, handler) {\n      var w = this.w;\n\n      if (!w.globals.events.hasOwnProperty(name$$1)) {\n        return;\n      }\n\n      var index = w.globals.events[name$$1].indexOf(handler);\n\n      if (index !== -1) {\n        w.globals.events[name$$1].splice(index, 1);\n      }\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(name$$1, args) {\n      var w = this.w;\n\n      if (!w.globals.events.hasOwnProperty(name$$1)) {\n        return;\n      }\n\n      if (!args || !args.length) {\n        args = [];\n      }\n\n      var evs = w.globals.events[name$$1];\n      var l = evs.length;\n\n      for (var i = 0; i < l; i++) {\n        evs[i].apply(null, args);\n      }\n    }\n  }, {\n    key: \"create\",\n    value: function create(ser, opts) {\n      var w = this.w;\n      this.initModules();\n      var gl = this.w.globals;\n      gl.noData = false;\n      gl.animationEnded = false;\n      this.responsive.checkResponsiveConfig(opts);\n\n      if (this.el === null) {\n        gl.animationEnded = true;\n        return null;\n      }\n\n      this.core.setupElements();\n\n      if (gl.svgWidth === 0) {\n        // if the element is hidden, skip drawing\n        gl.animationEnded = true;\n        return null;\n      }\n\n      var combo = CoreUtils.checkComboSeries(ser);\n      gl.comboCharts = combo.comboCharts;\n      gl.comboChartsHasBars = combo.comboChartsHasBars;\n\n      if (ser.length === 0 || ser.length === 1 && ser[0].data && ser[0].data.length === 0) {\n        this.series.handleNoData();\n      }\n\n      this.setupEventHandlers(); // Handle the data inputted by user and set some of the global variables (for eg, if data is datetime / numeric / category). Don't calculate the range / min / max at this time\n\n      this.core.parseData(ser); // this is a good time to set theme colors first\n\n      this.theme.init(); // as markers accepts array, we need to setup global markers for easier access\n\n      var markers = new Markers(this);\n      markers.setGlobalMarkerSize(); // labelFormatters should be called before dimensions as in dimensions we need text labels width\n\n      this.formatters.setLabelFormatters();\n      this.titleSubtitle.draw(); // legend is calculated here before coreCalculations because it affects the plottable area\n\n      this.legend.init(); // check whether in multiple series, all series share the same X\n\n      this.series.hasAllSeriesEqualX(); // coreCalculations will give the min/max range and yaxis/axis values. It should be called here to set series variable from config to globals\n\n      if (gl.axisCharts) {\n        this.core.coreCalculations();\n\n        if (w.config.xaxis.type !== 'category') {\n          // as we have minX and maxX values, determine the default DateTimeFormat for time series\n          this.formatters.setLabelFormatters();\n        }\n      } // we need to generate yaxis for heatmap separately as we are not showing numerics there, but seriesNames. There are some tweaks which are required for heatmap to align labels correctly which are done in below function\n      // Also we need to do this before calcuting Dimentions plotCoords() method of Dimensions\n\n\n      this.formatters.heatmapLabelFormatters(); // We got plottable area here, next task would be to calculate axis areas\n\n      this.dimensions.plotCoords();\n      var xyRatios = this.core.xySettings();\n      this.grid.createGridMask();\n      var elGraph = this.core.plotChartType(ser, xyRatios); // after all the drawing calculations, shift the graphical area (actual charts/bars) excluding legends\n\n      this.core.shiftGraphPosition();\n      var dim = {\n        plot: {\n          left: w.globals.translateX,\n          top: w.globals.translateY,\n          width: w.globals.gridWidth,\n          height: w.globals.gridHeight\n        }\n      };\n      return {\n        elGraph: elGraph,\n        xyRatios: xyRatios,\n        elInner: w.globals.dom.elGraphical,\n        dimensions: dim\n      };\n    }\n  }, {\n    key: \"mount\",\n    value: function mount() {\n      var graphData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var me = this;\n      var w = me.w;\n      return new Promise$1(function (resolve, reject) {\n        // no data to display\n        if (me.el === null) {\n          return reject(new Error('Not enough data to display or target element not found'));\n        } else if (graphData === null || w.globals.allSeriesCollapsed) {\n          me.series.handleNoData();\n        }\n\n        me.core.drawAxis(w.config.chart.type, graphData.xyRatios);\n        me.grid = new Grid(me);\n\n        if (w.config.grid.position === 'back') {\n          me.grid.drawGrid();\n        }\n\n        if (w.config.annotations.position === 'back') {\n          me.annotations.drawAnnotations();\n        }\n\n        if (graphData.elGraph instanceof Array) {\n          for (var g = 0; g < graphData.elGraph.length; g++) {\n            w.globals.dom.elGraphical.add(graphData.elGraph[g]);\n          }\n        } else {\n          w.globals.dom.elGraphical.add(graphData.elGraph);\n        }\n\n        if (w.config.grid.position === 'front') {\n          me.grid.drawGrid();\n        }\n\n        if (w.config.xaxis.crosshairs.position === 'front') {\n          me.crosshairs.drawXCrosshairs();\n        }\n\n        if (w.config.yaxis[0].crosshairs.position === 'front') {\n          me.crosshairs.drawYCrosshairs();\n        }\n\n        if (w.config.annotations.position === 'front') {\n          me.annotations.drawAnnotations();\n        }\n\n        if (!w.globals.noData) {\n          // draw tooltips at the end\n          if (w.config.tooltip.enabled && !w.globals.noData) {\n            me.w.globals.tooltip.drawTooltip(graphData.xyRatios);\n          }\n\n          if (w.globals.axisCharts && w.globals.isXNumeric) {\n            if (w.config.chart.zoom.enabled || w.config.chart.selection && w.config.chart.selection.enabled || w.config.chart.pan && w.config.chart.pan.enabled) {\n              me.zoomPanSelection.init({\n                xyRatios: graphData.xyRatios\n              });\n            }\n          } else {\n            var tools = w.config.chart.toolbar.tools;\n            tools.zoom = false;\n            tools.zoomin = false;\n            tools.zoomout = false;\n            tools.selection = false;\n            tools.pan = false;\n            tools.reset = false;\n          }\n\n          if (w.config.chart.toolbar.show && !w.globals.allSeriesCollapsed) {\n            me.toolbar.createToolbar();\n          }\n        }\n\n        if (w.globals.memory.methodsToExec.length > 0) {\n          w.globals.memory.methodsToExec.forEach(function (fn) {\n            fn.method(fn.params, false, fn.context);\n          });\n        }\n\n        resolve(me);\n      });\n    }\n  }, {\n    key: \"clearPreviousPaths\",\n    value: function clearPreviousPaths() {\n      var w = this.w;\n      w.globals.previousPaths = [];\n      w.globals.allSeriesCollapsed = false;\n      w.globals.collapsedSeries = [];\n      w.globals.collapsedSeriesIndices = [];\n    }\n    /**\n     * Allows users to update Options after the chart has rendered.\n     *\n     * @param {object} options - A new config object can be passed which will be merged with the existing config object\n     * @param {boolean} redraw - should redraw from beginning or should use existing paths and redraw from there\n     * @param {boolean} animate - should animate or not on updating Options\n     */\n\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions(options$$1) {\n      var redraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var overwriteInitialConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var w = this.w;\n\n      if (options$$1.series) {\n        if (options$$1.series[0].data) {\n          options$$1.series = options$$1.series.map(function (s, i) {\n            return _objectSpread({}, w.config.series[i], {\n              name: s.name ? s.name : w.config.series[i] && w.config.series[i].name,\n              type: s.type ? s.type : w.config.series[i] && w.config.series[i].type,\n              data: s.data ? s.data : w.config.series[i] && w.config.series[i].data\n            });\n          });\n        } // user updated the series via updateOptions() function.\n        // Hence, we need to reset axis min/max to avoid zooming issues\n\n\n        this.revertDefaultAxisMinMax();\n      } // user has set x-axis min/max externally - hence we need to forcefully set the xaxis min/max\n\n\n      if (options$$1.xaxis) {\n        if (options$$1.xaxis.min || options$$1.xaxis.max) {\n          this.forceXAxisUpdate(options$$1);\n        }\n        /* fixes apexcharts.js#369 and react-apexcharts#46 */\n\n\n        if (options$$1.xaxis.categories && options$$1.xaxis.categories.length && w.config.xaxis.convertedCatToNumeric) {\n          options$$1 = Defaults.convertCatToNumeric(options$$1);\n        }\n      }\n\n      if (w.globals.collapsedSeriesIndices.length > 0) {\n        this.clearPreviousPaths();\n      }\n      /* update theme mode#459 */\n\n\n      if (options$$1.theme) {\n        options$$1 = this.theme.updateThemeOptions(options$$1);\n      }\n\n      return this._updateOptions(options$$1, redraw, animate, overwriteInitialConfig);\n    }\n    /**\n     * private method to update Options.\n     *\n     * @param {object} options - A new config object can be passed which will be merged with the existing config object\n     * @param {boolean} redraw - should redraw from beginning or should use existing paths and redraw from there\n     * @param {boolean} animate - should animate or not on updating Options\n     * @param {boolean} overwriteInitialConfig - should update the initial config or not\n     */\n\n  }, {\n    key: \"_updateOptions\",\n    value: function _updateOptions(options$$1) {\n      var redraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var overwriteInitialConfig = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var charts = this.getSyncedCharts();\n      charts.forEach(function (ch) {\n        var w = ch.w;\n        w.globals.shouldAnimate = animate;\n\n        if (!redraw) {\n          w.globals.resized = true;\n          w.globals.dataChanged = true;\n\n          if (animate) {\n            ch.series.getPreviousPaths();\n          }\n        }\n\n        if (options$$1 && _typeof(options$$1) === 'object') {\n          ch.config = new Config(options$$1);\n          options$$1 = CoreUtils.extendArrayProps(ch.config, options$$1);\n          w.config = Utils.extend(w.config, options$$1);\n\n          if (overwriteInitialConfig) {\n            // we need to forget the lastXAxis and lastYAxis is user forcefully overwriteInitialConfig. If we do not do this, and next time when user zooms the chart after setting yaxis.min/max or xaxis.min/max - the stored lastXAxis will never allow the chart to use the updated min/max by user.\n            w.globals.lastXAxis = [];\n            w.globals.lastYAxis = []; // After forgetting lastAxes, we need to restore the new config in initialConfig/initialSeries\n\n            w.globals.initialConfig = Utils.extend({}, w.config);\n            w.globals.initialSeries = JSON.parse(JSON.stringify(w.config.series));\n          }\n        }\n\n        return ch.update(options$$1);\n      });\n    }\n    /**\n     * Allows users to update Series after the chart has rendered.\n     *\n     * @param {array} series - New series which will override the existing\n     */\n\n  }, {\n    key: \"updateSeries\",\n    value: function updateSeries() {\n      var newSeries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var overwriteInitialSeries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      this.revertDefaultAxisMinMax();\n      return this._updateSeries(newSeries, animate, overwriteInitialSeries);\n    }\n    /**\n     * Allows users to append a new series after the chart has rendered.\n     *\n     * @param {array} newSerie - New serie which will be appended to the existing series\n     */\n\n  }, {\n    key: \"appendSeries\",\n    value: function appendSeries(newSerie) {\n      var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var newSeries = this.w.config.series.slice();\n      newSeries.push(newSerie);\n      this.revertDefaultAxisMinMax();\n      return this._updateSeries(newSeries, animate);\n    }\n    /**\n     * Private method to update Series.\n     *\n     * @param {array} series - New series which will override the existing\n     */\n\n  }, {\n    key: \"_updateSeries\",\n    value: function _updateSeries(newSeries, animate) {\n      var overwriteInitialSeries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var w = this.w;\n      this.w.globals.shouldAnimate = animate;\n      w.globals.dataChanged = true; // if user has collapsed some series with legend, we need to clear those\n\n      if (w.globals.allSeriesCollapsed) {\n        w.globals.allSeriesCollapsed = false;\n      }\n\n      if (animate) {\n        this.series.getPreviousPaths();\n      }\n\n      var existingSeries; // axis charts\n\n      if (w.globals.axisCharts) {\n        existingSeries = newSeries.map(function (s, i) {\n          return _objectSpread({}, w.config.series[i], {\n            name: s.name ? s.name : w.config.series[i] && w.config.series[i].name,\n            type: s.type ? s.type : w.config.series[i] && w.config.series[i].type,\n            data: s.data ? s.data : w.config.series[i] && w.config.series[i].data\n          });\n        });\n\n        if (existingSeries.length === 0) {\n          existingSeries = [{\n            data: []\n          }];\n        }\n\n        w.config.series = existingSeries;\n      } else {\n        // non-axis chart (pie/radialbar)\n        w.config.series = newSeries.slice();\n      }\n\n      if (overwriteInitialSeries) {\n        w.globals.initialConfig.series = JSON.parse(JSON.stringify(w.config.series));\n        w.globals.initialSeries = JSON.parse(JSON.stringify(w.config.series));\n      }\n\n      return this.update();\n    }\n    /**\n     * Get all charts in the same \"group\" (including the instance which is called upon) to sync them when user zooms in/out or pan.\n     */\n\n  }, {\n    key: \"getSyncedCharts\",\n    value: function getSyncedCharts() {\n      var chartGroups = this.getGroupedCharts();\n      var allCharts = [this];\n\n      if (chartGroups.length) {\n        allCharts = [];\n        chartGroups.forEach(function (ch) {\n          allCharts.push(ch);\n        });\n      }\n\n      return allCharts;\n    }\n    /**\n     * Get charts in the same \"group\" (excluding the instance which is called upon) to perform operations on the other charts of the same group (eg., tooltip hovering)\n     */\n\n  }, {\n    key: \"getGroupedCharts\",\n    value: function getGroupedCharts() {\n      var _this2 = this;\n\n      return Apex._chartInstances.filter(function (ch) {\n        if (ch.group) {\n          return true;\n        }\n      }).map(function (ch) {\n        return _this2.w.config.chart.group === ch.group ? ch.chart : _this2;\n      });\n    }\n    /**\n     * Allows users to append Data to series.\n     *\n     * @param {array} newData - New data in the same format as series\n     */\n\n  }, {\n    key: \"appendData\",\n    value: function appendData(newData) {\n      var overwriteInitialSeries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var me = this;\n      me.w.globals.dataChanged = true;\n      me.series.getPreviousPaths();\n      var newSeries = me.w.config.series.slice();\n\n      for (var i = 0; i < newSeries.length; i++) {\n        if (typeof newData[i] !== 'undefined') {\n          for (var j = 0; j < newData[i].data.length; j++) {\n            newSeries[i].data.push(newData[i].data[j]);\n          }\n        }\n      }\n\n      me.w.config.series = newSeries;\n\n      if (overwriteInitialSeries) {\n        me.w.globals.initialSeries = JSON.parse(JSON.stringify(me.w.config.series));\n      }\n\n      return this.update();\n    }\n  }, {\n    key: \"update\",\n    value: function update(options$$1) {\n      var _this3 = this;\n\n      return new Promise$1(function (resolve, reject) {\n        _this3.clear();\n\n        var graphData = _this3.create(_this3.w.config.series, options$$1);\n\n        if (!graphData) return resolve(_this3);\n\n        _this3.mount(graphData).then(function () {\n          if (typeof _this3.w.config.chart.events.updated === 'function') {\n            _this3.w.config.chart.events.updated(_this3, _this3.w);\n          }\n\n          _this3.fireEvent('updated', [_this3, _this3.w]);\n\n          _this3.w.globals.isDirty = true;\n          resolve(_this3);\n        }).catch(function (e) {\n          reject(e);\n        });\n      });\n    }\n  }, {\n    key: \"forceXAxisUpdate\",\n    value: function forceXAxisUpdate(options$$1) {\n      var w = this.w;\n\n      if (typeof options$$1.xaxis.min !== 'undefined') {\n        w.config.xaxis.min = options$$1.xaxis.min;\n        w.globals.lastXAxis.min = options$$1.xaxis.min;\n      }\n\n      if (typeof options$$1.xaxis.max !== 'undefined') {\n        w.config.xaxis.max = options$$1.xaxis.max;\n        w.globals.lastXAxis.max = options$$1.xaxis.max;\n      }\n    }\n    /**\n     * This function reverts the yaxis and xaxis min/max values to what it was when the chart was defined.\n     * This function fixes an important bug where a user might load a new series after zooming in/out of previous series which resulted in wrong min/max\n     * Also, this should never be called internally on zoom/pan - the reset should only happen when user calls the updateSeries() function externally\n     */\n\n  }, {\n    key: \"revertDefaultAxisMinMax\",\n    value: function revertDefaultAxisMinMax() {\n      var w = this.w;\n      w.config.xaxis.min = w.globals.lastXAxis.min;\n      w.config.xaxis.max = w.globals.lastXAxis.max;\n      w.config.yaxis.map(function (yaxe, index) {\n        if (w.globals.zoomed) {\n          // if user has zoomed, and this function is called\n          // then we need to get the lastAxis min and max\n          if (typeof w.globals.lastYAxis[index] !== 'undefined') {\n            yaxe.min = w.globals.lastYAxis[index].min;\n            yaxe.max = w.globals.lastYAxis[index].max;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this.zoomPanSelection) {\n        this.zoomPanSelection.destroy();\n      }\n\n      if (this.toolbar) {\n        this.toolbar.destroy();\n      }\n\n      this.animations = null;\n      this.annotations = null;\n      this.core = null;\n      this.grid = null;\n      this.series = null;\n      this.responsive = null;\n      this.theme = null;\n      this.formatters = null;\n      this.titleSubtitle = null;\n      this.legend = null;\n      this.dimensions = null;\n      this.options = null;\n      this.crosshairs = null;\n      this.zoomPanSelection = null;\n      this.toolbar = null;\n      this.w.globals.tooltip = null;\n      this.clearDomElements();\n    }\n  }, {\n    key: \"killSVG\",\n    value: function killSVG(draw) {\n      return new Promise$1(function (resolve, reject) {\n        draw.each(function (i, children) {\n          this.removeClass('*');\n          this.off();\n          this.stop();\n        }, true);\n        draw.ungroup();\n        draw.clear();\n        resolve('done');\n      });\n    }\n  }, {\n    key: \"clearDomElements\",\n    value: function clearDomElements() {\n      var domEls = this.w.globals.dom;\n\n      if (this.el !== null) {\n        // remove all child elements - resetting the whole chart\n        while (this.el.firstChild) {\n          this.el.removeChild(this.el.firstChild);\n        }\n      }\n\n      this.killSVG(domEls.Paper);\n      domEls.Paper.remove();\n      domEls.elWrap = null;\n      domEls.elGraphical = null;\n      domEls.elLegendWrap = null;\n      domEls.baseEl = null;\n      domEls.elGridRect = null;\n      domEls.elGridRectMask = null;\n      domEls.elGridRectMarkerMask = null;\n      domEls.elDefs = null;\n    }\n    /**\n     * Destroy the chart instance by removing all elements which also clean up event listeners on those elements.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clear(); // remove the chart's instance from the global Apex._chartInstances\n\n      var chartID = this.w.config.chart.id;\n\n      if (chartID) {\n        Apex._chartInstances.forEach(function (c, i) {\n          if (c.id === chartID) {\n            Apex._chartInstances.splice(i, 1);\n          }\n        });\n      }\n\n      window.removeEventListener('resize', this.windowResizeHandler);\n      window.removeResizeListener(this.el.parentNode, this.parentResizeCallback.bind(this));\n    }\n    /**\n     * Allows the user to provide data attrs in the element and the chart will render automatically when this method is called by searching for the elements containing 'data-apexcharts' attribute\n     */\n\n  }, {\n    key: \"toggleSeries\",\n    value: function toggleSeries(seriesName) {\n      var targetElement = this.series.getSeriesByName(seriesName);\n      var seriesCnt = parseInt(targetElement.getAttribute('data:realIndex'));\n      var isHidden = targetElement.classList.contains('apexcharts-series-collapsed');\n      this.legend.toggleDataSeries(seriesCnt, isHidden);\n    }\n  }, {\n    key: \"resetToggleSeries\",\n    value: function resetToggleSeries() {\n      this.legend.resetToggleDataSeries();\n    }\n  }, {\n    key: \"setupEventHandlers\",\n    value: function setupEventHandlers() {\n      var w = this.w;\n      var me = this;\n      var clickableArea = w.globals.dom.baseEl.querySelector(w.globals.chartClass);\n      var eventList = ['mousedown', 'mousemove', 'touchstart', 'touchmove', 'mouseup', 'touchend'];\n      eventList.forEach(function (event) {\n        clickableArea.addEventListener(event, function (e) {\n          if (e.type === 'mousedown' && e.which === 1) ; else if (e.type === 'mouseup' && e.which === 1 || e.type === 'touchend') {\n            if (typeof w.config.chart.events.click === 'function') {\n              w.config.chart.events.click(e, me, w);\n            }\n\n            me.fireEvent('click', [e, me, w]);\n          }\n        }, {\n          capture: false,\n          passive: true\n        });\n      });\n      eventList.forEach(function (event) {\n        document.addEventListener(event, function (e) {\n          w.globals.clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;\n          w.globals.clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;\n        });\n      });\n      this.core.setupBrushHandler();\n    }\n  }, {\n    key: \"addXaxisAnnotation\",\n    value: function addXaxisAnnotation(opts) {\n      var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var me = this;\n\n      if (context) {\n        me = context;\n      }\n\n      me.annotations.addXaxisAnnotationExternal(opts, pushToMemory, me);\n    }\n  }, {\n    key: \"addYaxisAnnotation\",\n    value: function addYaxisAnnotation(opts) {\n      var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var me = this;\n\n      if (context) {\n        me = context;\n      }\n\n      me.annotations.addYaxisAnnotationExternal(opts, pushToMemory, me);\n    }\n  }, {\n    key: \"addPointAnnotation\",\n    value: function addPointAnnotation(opts) {\n      var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var me = this;\n\n      if (context) {\n        me = context;\n      }\n\n      me.annotations.addPointAnnotationExternal(opts, pushToMemory, me);\n    }\n  }, {\n    key: \"clearAnnotations\",\n    value: function clearAnnotations() {\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n      var me = this;\n\n      if (context) {\n        me = context;\n      }\n\n      me.annotations.clearAnnotations(me);\n    } // This method is never used internally and will be only called externally on the chart instance.\n    // Hence, we need to keep all these elements in memory when the chart gets updated and redraw again\n\n  }, {\n    key: \"addText\",\n    value: function addText(options$$1) {\n      var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      var me = this;\n\n      if (context) {\n        me = context;\n      }\n\n      me.annotations.addText(options$$1, pushToMemory, me);\n    }\n  }, {\n    key: \"getChartArea\",\n    value: function getChartArea() {\n      var el = this.w.globals.dom.baseEl.querySelector('.apexcharts-inner');\n      return el;\n    }\n  }, {\n    key: \"getSeriesTotalXRange\",\n    value: function getSeriesTotalXRange(minX, maxX) {\n      return this.coreUtils.getSeriesTotalsXRange(minX, maxX);\n    }\n  }, {\n    key: \"getHighestValueInSeries\",\n    value: function getHighestValueInSeries() {\n      var seriesIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var range = new Range$1(this.ctx);\n      var minYmaxY = range.getMinYMaxY(seriesIndex);\n      return minYmaxY.highestY;\n    }\n  }, {\n    key: \"getLowestValueInSeries\",\n    value: function getLowestValueInSeries() {\n      var seriesIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var range = new Range$1(this.ctx);\n      var minYmaxY = range.getMinYMaxY(seriesIndex);\n      return minYmaxY.lowestY;\n    }\n  }, {\n    key: \"getSeriesTotal\",\n    value: function getSeriesTotal() {\n      return this.w.globals.seriesTotals;\n    }\n  }, {\n    key: \"setLocale\",\n    value: function setLocale(localeName) {\n      this.setCurrentLocaleValues(localeName);\n    }\n  }, {\n    key: \"setCurrentLocaleValues\",\n    value: function setCurrentLocaleValues(localeName) {\n      var locales = this.w.config.chart.locales; // check if user has specified locales in global Apex variable\n      // if yes - then extend those with local chart's locale\n\n      if (window.Apex.chart && window.Apex.chart.locales && window.Apex.chart.locales.length > 0) {\n        locales = this.w.config.chart.locales.concat(window.Apex.chart.locales);\n      } // find the locale from the array of locales which user has set (either by chart.defaultLocale or by calling setLocale() method.)\n\n\n      var selectedLocale = locales.filter(function (c) {\n        return c.name === localeName;\n      })[0];\n\n      if (selectedLocale) {\n        // create a complete locale object by extending defaults so you don't get undefined errors.\n        var ret = Utils.extend(en, selectedLocale); // store these locale options in global var for ease access\n\n        this.w.globals.locale = ret.options;\n      } else {\n        throw new Error('Wrong locale name provided. Please make sure you set the correct locale name in options');\n      }\n    }\n  }, {\n    key: \"dataURI\",\n    value: function dataURI() {\n      var exp = new Exports(this.ctx);\n      return exp.dataURI();\n    }\n  }, {\n    key: \"paper\",\n    value: function paper() {\n      return this.w.globals.dom.Paper;\n    }\n  }, {\n    key: \"parentResizeCallback\",\n    value: function parentResizeCallback() {\n      if (this.w.globals.animationEnded) {\n        this.windowResize();\n      }\n    }\n    /**\n     * Handle window resize and re-draw the whole chart.\n     */\n\n  }, {\n    key: \"windowResize\",\n    value: function windowResize() {\n      var _this4 = this;\n\n      clearTimeout(this.w.globals.resizeTimer);\n      this.w.globals.resizeTimer = window.setTimeout(function () {\n        _this4.w.globals.resized = true;\n        _this4.w.globals.dataChanged = false; // we need to redraw the whole chart on window resize (with a small delay).\n\n        _this4.update();\n      }, 150);\n    }\n  }], [{\n    key: \"initOnLoad\",\n    value: function initOnLoad() {\n      var els = document.querySelectorAll('[data-apexcharts]');\n\n      for (var i = 0; i < els.length; i++) {\n        var el = els[i];\n        var options$$1 = JSON.parse(els[i].getAttribute('data-options'));\n        var apexChart = new ApexCharts(el, options$$1);\n        apexChart.render();\n      }\n    }\n    /**\n     * This static method allows users to call chart methods without necessarily from the\n     * instance of the chart in case user has assigned chartID to the targetted chart.\n     * The chartID is used for mapping the instance stored in Apex._chartInstances global variable\n     *\n     * This is helpful in cases when you don't have reference of the chart instance\n     * easily and need to call the method from anywhere.\n     * For eg, in React/Vue applications when you have many parent/child components,\n     * and need easy reference to other charts for performing dynamic operations\n     *\n     * @param {string} chartID - The unique identifier which will be used to call methods\n     * on that chart instance\n     * @param {function} fn - The method name to call\n     * @param {object} opts - The parameters which are accepted in the original method will be passed here in the same order.\n     */\n\n  }, {\n    key: \"exec\",\n    value: function exec(chartID, fn) {\n      var chart = this.getChartByID(chartID);\n      if (!chart) return;\n\n      for (var _len = arguments.length, opts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        opts[_key - 2] = arguments[_key];\n      }\n\n      switch (fn) {\n        case 'updateOptions':\n          {\n            return chart.updateOptions.apply(chart, opts);\n          }\n\n        case 'updateSeries':\n          {\n            return chart.updateSeries.apply(chart, opts);\n          }\n\n        case 'appendData':\n          {\n            return chart.appendData.apply(chart, opts);\n          }\n\n        case 'appendSeries':\n          {\n            return chart.appendSeries.apply(chart, opts);\n          }\n\n        case 'toggleSeries':\n          {\n            return chart.toggleSeries.apply(chart, opts);\n          }\n\n        case 'dataURI':\n          {\n            return chart.dataURI.apply(chart, opts);\n          }\n\n        case 'addXaxisAnnotation':\n          {\n            return chart.addXaxisAnnotation.apply(chart, opts);\n          }\n\n        case 'addYaxisAnnotation':\n          {\n            return chart.addYaxisAnnotation.apply(chart, opts);\n          }\n\n        case 'addPointAnnotation':\n          {\n            return chart.addPointAnnotation.apply(chart, opts);\n          }\n\n        case 'addText':\n          {\n            return chart.addText.apply(chart, opts);\n          }\n\n        case 'clearAnnotations':\n          {\n            return chart.clearAnnotations.apply(chart, opts);\n          }\n\n        case 'paper':\n          {\n            return chart.paper.apply(chart, opts);\n          }\n\n        case 'destroy':\n          {\n            return chart.destroy();\n          }\n      }\n    }\n  }, {\n    key: \"merge\",\n    value: function merge(target, source) {\n      return Utils.extend(target, source);\n    }\n  }, {\n    key: \"getChartByID\",\n    value: function getChartByID(chartID) {\n      var c = Apex._chartInstances.filter(function (ch) {\n        return ch.id === chartID;\n      })[0];\n\n      return c.chart;\n    }\n  }]);\n\n  return ApexCharts;\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ApexCharts$1);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/apexcharts/dist/apexcharts.esm.js\n");

/***/ }),

/***/ "./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * clipboard.js v2.0.4\n * https://zenorocha.github.io/clipboard.js\n * \n * Licensed MIT © Zeno Rocha\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _clipboardAction = __webpack_require__(1);\n\nvar _clipboardAction2 = _interopRequireDefault(_clipboardAction);\n\nvar _tinyEmitter = __webpack_require__(3);\n\nvar _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);\n\nvar _goodListener = __webpack_require__(4);\n\nvar _goodListener2 = _interopRequireDefault(_goodListener);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Base class which takes one or more elements, adds event listeners to them,\n * and instantiates a new `ClipboardAction` on each click.\n */\nvar Clipboard = function (_Emitter) {\n    _inherits(Clipboard, _Emitter);\n\n    /**\n     * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n     * @param {Object} options\n     */\n    function Clipboard(trigger, options) {\n        _classCallCheck(this, Clipboard);\n\n        var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));\n\n        _this.resolveOptions(options);\n        _this.listenClick(trigger);\n        return _this;\n    }\n\n    /**\n     * Defines if attributes would be resolved using internal setter functions\n     * or custom functions that were passed in the constructor.\n     * @param {Object} options\n     */\n\n\n    _createClass(Clipboard, [{\n        key: 'resolveOptions',\n        value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.action = typeof options.action === 'function' ? options.action : this.defaultAction;\n            this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;\n            this.text = typeof options.text === 'function' ? options.text : this.defaultText;\n            this.container = _typeof(options.container) === 'object' ? options.container : document.body;\n        }\n\n        /**\n         * Adds a click event listener to the passed trigger.\n         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n         */\n\n    }, {\n        key: 'listenClick',\n        value: function listenClick(trigger) {\n            var _this2 = this;\n\n            this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {\n                return _this2.onClick(e);\n            });\n        }\n\n        /**\n         * Defines a new `ClipboardAction` on each click event.\n         * @param {Event} e\n         */\n\n    }, {\n        key: 'onClick',\n        value: function onClick(e) {\n            var trigger = e.delegateTarget || e.currentTarget;\n\n            if (this.clipboardAction) {\n                this.clipboardAction = null;\n            }\n\n            this.clipboardAction = new _clipboardAction2.default({\n                action: this.action(trigger),\n                target: this.target(trigger),\n                text: this.text(trigger),\n                container: this.container,\n                trigger: trigger,\n                emitter: this\n            });\n        }\n\n        /**\n         * Default `action` lookup function.\n         * @param {Element} trigger\n         */\n\n    }, {\n        key: 'defaultAction',\n        value: function defaultAction(trigger) {\n            return getAttributeValue('action', trigger);\n        }\n\n        /**\n         * Default `target` lookup function.\n         * @param {Element} trigger\n         */\n\n    }, {\n        key: 'defaultTarget',\n        value: function defaultTarget(trigger) {\n            var selector = getAttributeValue('target', trigger);\n\n            if (selector) {\n                return document.querySelector(selector);\n            }\n        }\n\n        /**\n         * Returns the support of the given action, or all actions if no action is\n         * given.\n         * @param {String} [action]\n         */\n\n    }, {\n        key: 'defaultText',\n\n\n        /**\n         * Default `text` lookup function.\n         * @param {Element} trigger\n         */\n        value: function defaultText(trigger) {\n            return getAttributeValue('text', trigger);\n        }\n\n        /**\n         * Destroy lifecycle.\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.listener.destroy();\n\n            if (this.clipboardAction) {\n                this.clipboardAction.destroy();\n                this.clipboardAction = null;\n            }\n        }\n    }], [{\n        key: 'isSupported',\n        value: function isSupported() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];\n\n            var actions = typeof action === 'string' ? [action] : action;\n            var support = !!document.queryCommandSupported;\n\n            actions.forEach(function (action) {\n                support = support && !!document.queryCommandSupported(action);\n            });\n\n            return support;\n        }\n    }]);\n\n    return Clipboard;\n}(_tinyEmitter2.default);\n\n/**\n * Helper function to retrieve attribute value.\n * @param {String} suffix\n * @param {Element} element\n */\n\n\nfunction getAttributeValue(suffix, element) {\n    var attribute = 'data-clipboard-' + suffix;\n\n    if (!element.hasAttribute(attribute)) {\n        return;\n    }\n\n    return element.getAttribute(attribute);\n}\n\nmodule.exports = Clipboard;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _select = __webpack_require__(2);\n\nvar _select2 = _interopRequireDefault(_select);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Inner class which performs selection from either `text` or `target`\n * properties and then executes copy or cut operations.\n */\nvar ClipboardAction = function () {\n    /**\n     * @param {Object} options\n     */\n    function ClipboardAction(options) {\n        _classCallCheck(this, ClipboardAction);\n\n        this.resolveOptions(options);\n        this.initSelection();\n    }\n\n    /**\n     * Defines base properties passed from constructor.\n     * @param {Object} options\n     */\n\n\n    _createClass(ClipboardAction, [{\n        key: 'resolveOptions',\n        value: function resolveOptions() {\n            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            this.action = options.action;\n            this.container = options.container;\n            this.emitter = options.emitter;\n            this.target = options.target;\n            this.text = options.text;\n            this.trigger = options.trigger;\n\n            this.selectedText = '';\n        }\n\n        /**\n         * Decides which selection strategy is going to be applied based\n         * on the existence of `text` and `target` properties.\n         */\n\n    }, {\n        key: 'initSelection',\n        value: function initSelection() {\n            if (this.text) {\n                this.selectFake();\n            } else if (this.target) {\n                this.selectTarget();\n            }\n        }\n\n        /**\n         * Creates a fake textarea element, sets its value from `text` property,\n         * and makes a selection on it.\n         */\n\n    }, {\n        key: 'selectFake',\n        value: function selectFake() {\n            var _this = this;\n\n            var isRTL = document.documentElement.getAttribute('dir') == 'rtl';\n\n            this.removeFake();\n\n            this.fakeHandlerCallback = function () {\n                return _this.removeFake();\n            };\n            this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;\n\n            this.fakeElem = document.createElement('textarea');\n            // Prevent zooming on iOS\n            this.fakeElem.style.fontSize = '12pt';\n            // Reset box model\n            this.fakeElem.style.border = '0';\n            this.fakeElem.style.padding = '0';\n            this.fakeElem.style.margin = '0';\n            // Move element out of screen horizontally\n            this.fakeElem.style.position = 'absolute';\n            this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';\n            // Move element to the same position vertically\n            var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n            this.fakeElem.style.top = yPosition + 'px';\n\n            this.fakeElem.setAttribute('readonly', '');\n            this.fakeElem.value = this.text;\n\n            this.container.appendChild(this.fakeElem);\n\n            this.selectedText = (0, _select2.default)(this.fakeElem);\n            this.copyText();\n        }\n\n        /**\n         * Only removes the fake element after another click event, that way\n         * a user can hit `Ctrl+C` to copy because selection still exists.\n         */\n\n    }, {\n        key: 'removeFake',\n        value: function removeFake() {\n            if (this.fakeHandler) {\n                this.container.removeEventListener('click', this.fakeHandlerCallback);\n                this.fakeHandler = null;\n                this.fakeHandlerCallback = null;\n            }\n\n            if (this.fakeElem) {\n                this.container.removeChild(this.fakeElem);\n                this.fakeElem = null;\n            }\n        }\n\n        /**\n         * Selects the content from element passed on `target` property.\n         */\n\n    }, {\n        key: 'selectTarget',\n        value: function selectTarget() {\n            this.selectedText = (0, _select2.default)(this.target);\n            this.copyText();\n        }\n\n        /**\n         * Executes the copy operation based on the current selection.\n         */\n\n    }, {\n        key: 'copyText',\n        value: function copyText() {\n            var succeeded = void 0;\n\n            try {\n                succeeded = document.execCommand(this.action);\n            } catch (err) {\n                succeeded = false;\n            }\n\n            this.handleResult(succeeded);\n        }\n\n        /**\n         * Fires an event based on the copy operation result.\n         * @param {Boolean} succeeded\n         */\n\n    }, {\n        key: 'handleResult',\n        value: function handleResult(succeeded) {\n            this.emitter.emit(succeeded ? 'success' : 'error', {\n                action: this.action,\n                text: this.selectedText,\n                trigger: this.trigger,\n                clearSelection: this.clearSelection.bind(this)\n            });\n        }\n\n        /**\n         * Moves focus away from `target` and back to the trigger, removes current selection.\n         */\n\n    }, {\n        key: 'clearSelection',\n        value: function clearSelection() {\n            if (this.trigger) {\n                this.trigger.focus();\n            }\n\n            window.getSelection().removeAllRanges();\n        }\n\n        /**\n         * Sets the `action` to be performed which can be either 'copy' or 'cut'.\n         * @param {String} action\n         */\n\n    }, {\n        key: 'destroy',\n\n\n        /**\n         * Destroy lifecycle.\n         */\n        value: function destroy() {\n            this.removeFake();\n        }\n    }, {\n        key: 'action',\n        set: function set() {\n            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';\n\n            this._action = action;\n\n            if (this._action !== 'copy' && this._action !== 'cut') {\n                throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n            }\n        }\n\n        /**\n         * Gets the `action` property.\n         * @return {String}\n         */\n        ,\n        get: function get() {\n            return this._action;\n        }\n\n        /**\n         * Sets the `target` property using an element\n         * that will be have its content copied.\n         * @param {Element} target\n         */\n\n    }, {\n        key: 'target',\n        set: function set(target) {\n            if (target !== undefined) {\n                if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {\n                    if (this.action === 'copy' && target.hasAttribute('disabled')) {\n                        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                    }\n\n                    if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {\n                        throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                    }\n\n                    this._target = target;\n                } else {\n                    throw new Error('Invalid \"target\" value, use a valid Element');\n                }\n            }\n        }\n\n        /**\n         * Gets the `target` property.\n         * @return {String|HTMLElement}\n         */\n        ,\n        get: function get() {\n            return this._target;\n        }\n    }]);\n\n    return ClipboardAction;\n}();\n\nmodule.exports = ClipboardAction;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nfunction select(element) {\n    var selectedText;\n\n    if (element.nodeName === 'SELECT') {\n        element.focus();\n\n        selectedText = element.value;\n    }\n    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n        var isReadOnly = element.hasAttribute('readonly');\n\n        if (!isReadOnly) {\n            element.setAttribute('readonly', '');\n        }\n\n        element.select();\n        element.setSelectionRange(0, element.value.length);\n\n        if (!isReadOnly) {\n            element.removeAttribute('readonly');\n        }\n\n        selectedText = element.value;\n    }\n    else {\n        if (element.hasAttribute('contenteditable')) {\n            element.focus();\n        }\n\n        var selection = window.getSelection();\n        var range = document.createRange();\n\n        range.selectNodeContents(element);\n        selection.removeAllRanges();\n        selection.addRange(range);\n\n        selectedText = selection.toString();\n    }\n\n    return selectedText;\n}\n\nmodule.exports = select;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nfunction E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar is = __webpack_require__(5);\nvar delegate = __webpack_require__(6);\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n    if (!target && !type && !callback) {\n        throw new Error('Missing required arguments');\n    }\n\n    if (!is.string(type)) {\n        throw new TypeError('Second argument must be a String');\n    }\n\n    if (!is.fn(callback)) {\n        throw new TypeError('Third argument must be a Function');\n    }\n\n    if (is.node(target)) {\n        return listenNode(target, type, callback);\n    }\n    else if (is.nodeList(target)) {\n        return listenNodeList(target, type, callback);\n    }\n    else if (is.string(target)) {\n        return listenSelector(target, type, callback);\n    }\n    else {\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n    }\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n    node.addEventListener(type, callback);\n\n    return {\n        destroy: function() {\n            node.removeEventListener(type, callback);\n        }\n    }\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n    Array.prototype.forEach.call(nodeList, function(node) {\n        node.addEventListener(type, callback);\n    });\n\n    return {\n        destroy: function() {\n            Array.prototype.forEach.call(nodeList, function(node) {\n                node.removeEventListener(type, callback);\n            });\n        }\n    }\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n    return delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.node = function(value) {\n    return value !== undefined\n        && value instanceof HTMLElement\n        && value.nodeType === 1;\n};\n\n/**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.nodeList = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return value !== undefined\n        && (type === '[object NodeList]' || type === '[object HTMLCollection]')\n        && ('length' in value)\n        && (value.length === 0 || exports.node(value[0]));\n};\n\n/**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.string = function(value) {\n    return typeof value === 'string'\n        || value instanceof String;\n};\n\n/**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */\nexports.fn = function(value) {\n    var type = Object.prototype.toString.call(value);\n\n    return type === '[object Function]';\n};\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar closest = __webpack_require__(7);\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction _delegate(element, selector, type, callback, useCapture) {\n    var listenerFn = listener.apply(this, arguments);\n\n    element.addEventListener(type, listenerFn, useCapture);\n\n    return {\n        destroy: function() {\n            element.removeEventListener(type, listenerFn, useCapture);\n        }\n    }\n}\n\n/**\n * Delegates event to a selector.\n *\n * @param {Element|String|Array} [elements]\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */\nfunction delegate(elements, selector, type, callback, useCapture) {\n    // Handle the regular Element usage\n    if (typeof elements.addEventListener === 'function') {\n        return _delegate.apply(null, arguments);\n    }\n\n    // Handle Element-less usage, it defaults to global delegation\n    if (typeof type === 'function') {\n        // Use `document` as the first parameter, then apply arguments\n        // This is a short way to .unshift `arguments` without running into deoptimizations\n        return _delegate.bind(null, document).apply(null, arguments);\n    }\n\n    // Handle Selector-based usage\n    if (typeof elements === 'string') {\n        elements = document.querySelectorAll(elements);\n    }\n\n    // Handle Array-like based usage\n    return Array.prototype.map.call(elements, function (element) {\n        return _delegate(element, selector, type, callback, useCapture);\n    });\n}\n\n/**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */\nfunction listener(element, selector, type, callback) {\n    return function(e) {\n        e.delegateTarget = closest(e.target, selector);\n\n        if (e.delegateTarget) {\n            callback.call(element, e);\n        }\n    }\n}\n\nmodule.exports = delegate;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nvar DOCUMENT_NODE_TYPE = 9;\n\n/**\n * A polyfill for Element.matches()\n */\nif (typeof Element !== 'undefined' && !Element.prototype.matches) {\n    var proto = Element.prototype;\n\n    proto.matches = proto.matchesSelector ||\n                    proto.mozMatchesSelector ||\n                    proto.msMatchesSelector ||\n                    proto.oMatchesSelector ||\n                    proto.webkitMatchesSelector;\n}\n\n/**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */\nfunction closest (element, selector) {\n    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {\n        if (typeof element.matches === 'function' &&\n            element.matches(selector)) {\n          return element;\n        }\n        element = element.parentNode;\n    }\n}\n\nmodule.exports = closest;\n\n\n/***/ })\n/******/ ]);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/clipboard/dist/clipboard.js\n");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/setimmediate/setImmediate.js\n");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzPzUxMTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/timers-browserify/main.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzPzAwODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXztcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzPzgyYjAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/harmony-module.js\n");

/***/ })

}]);